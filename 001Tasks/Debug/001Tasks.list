
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08006ce0  08006ce0  00007ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e40  08006e40  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006e40  08006e40  00007e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e48  08006e48  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e48  08006e48  00007e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e4c  08006e4c  00007e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006e50  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008070  2**0
                  CONTENTS
 10 .bss          000145d4  20000070  20000070  00008070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014644  20014644  00008070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015418  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003207  00000000  00000000  0001d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  000206c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9f  00000000  00000000  00021b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105fc  00000000  00000000  00022abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006b8c  00000000  00000000  000330bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00039c47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b50  00000000  00000000  00039c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0003f7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006cc8 	.word	0x08006cc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006cc8 	.word	0x08006cc8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f20 	.word	0x20012f20

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fb9d 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f853 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8bb 	bl	80006dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* Enable the CYCCNT counter */

  DWT_CTRL |= (1 << 0);
 8000566:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <main+0x98>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a20      	ldr	r2, [pc, #128]	@ (80005ec <main+0x98>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000572:	f004 f8a3 	bl	80046bc <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000576:	f005 f95f 	bl	8005838 <SEGGER_SYSVIEW_Start>


  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2302      	movs	r3, #2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	4b1a      	ldr	r3, [pc, #104]	@ (80005f0 <main+0x9c>)
 8000586:	22c8      	movs	r2, #200	@ 0xc8
 8000588:	491a      	ldr	r1, [pc, #104]	@ (80005f4 <main+0xa0>)
 800058a:	481b      	ldr	r0, [pc, #108]	@ (80005f8 <main+0xa4>)
 800058c:	f002 f97e 	bl	800288c <xTaskCreate>
 8000590:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d00b      	beq.n	80005b0 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800059c:	f383 8811 	msr	BASEPRI, r3
 80005a0:	f3bf 8f6f 	isb	sy
 80005a4:	f3bf 8f4f 	dsb	sy
 80005a8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2302      	movs	r3, #2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <main+0xa8>)
 80005ba:	22c8      	movs	r2, #200	@ 0xc8
 80005bc:	4910      	ldr	r1, [pc, #64]	@ (8000600 <main+0xac>)
 80005be:	4811      	ldr	r0, [pc, #68]	@ (8000604 <main+0xb0>)
 80005c0:	f002 f964 	bl	800288c <xTaskCreate>
 80005c4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d00b      	beq.n	80005e4 <main+0x90>
        __asm volatile
 80005cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d0:	f383 8811 	msr	BASEPRI, r3
 80005d4:	f3bf 8f6f 	isb	sy
 80005d8:	f3bf 8f4f 	dsb	sy
 80005dc:	60fb      	str	r3, [r7, #12]
    }
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0x8c>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80005e4:	f002 fadc 	bl	8002ba0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x94>
 80005ec:	e0001000 	.word	0xe0001000
 80005f0:	08006ce0 	.word	0x08006ce0
 80005f4:	08006cf8 	.word	0x08006cf8
 80005f8:	08000999 	.word	0x08000999
 80005fc:	08006d00 	.word	0x08006d00
 8000600:	08006d18 	.word	0x08006d18
 8000604:	080009a9 	.word	0x080009a9

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f006 f89e 	bl	8006758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800067c:	2332      	movs	r3, #50	@ 0x32
 800067e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000680:	2304      	movs	r3, #4
 8000682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fddd 	bl	800124c <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 f9a0 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f83e 	bl	800173c <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 f989 	bl	80009dc <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	@ 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	@ 0x30
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
 80006f6:	4ba2      	ldr	r3, [pc, #648]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4aa1      	ldr	r2, [pc, #644]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 80006fc:	f043 0310 	orr.w	r3, r3, #16
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b9f      	ldr	r3, [pc, #636]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0310 	and.w	r3, r3, #16
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	4b9b      	ldr	r3, [pc, #620]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a9a      	ldr	r2, [pc, #616]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b98      	ldr	r3, [pc, #608]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b94      	ldr	r3, [pc, #592]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a93      	ldr	r2, [pc, #588]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b91      	ldr	r3, [pc, #580]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b8d      	ldr	r3, [pc, #564]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a8c      	ldr	r2, [pc, #560]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b8a      	ldr	r3, [pc, #552]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b86      	ldr	r3, [pc, #536]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a85      	ldr	r2, [pc, #532]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b83      	ldr	r3, [pc, #524]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b7f      	ldr	r3, [pc, #508]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a7e      	ldr	r2, [pc, #504]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b7c      	ldr	r3, [pc, #496]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2108      	movs	r1, #8
 800079e:	4879      	ldr	r0, [pc, #484]	@ (8000984 <MX_GPIO_Init+0x2a8>)
 80007a0:	f000 fd3a 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2101      	movs	r1, #1
 80007a8:	4877      	ldr	r0, [pc, #476]	@ (8000988 <MX_GPIO_Init+0x2ac>)
 80007aa:	f000 fd35 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ae:	2200      	movs	r2, #0
 80007b0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007b4:	4875      	ldr	r0, [pc, #468]	@ (800098c <MX_GPIO_Init+0x2b0>)
 80007b6:	f000 fd2f 	bl	8001218 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ba:	2308      	movs	r3, #8
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	486c      	ldr	r0, [pc, #432]	@ (8000984 <MX_GPIO_Init+0x2a8>)
 80007d2:	f000 fb85 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4866      	ldr	r0, [pc, #408]	@ (8000988 <MX_GPIO_Init+0x2ac>)
 80007ee:	f000 fb77 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000802:	2305      	movs	r3, #5
 8000804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	485e      	ldr	r0, [pc, #376]	@ (8000988 <MX_GPIO_Init+0x2ac>)
 800080e:	f000 fb67 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000816:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	485a      	ldr	r0, [pc, #360]	@ (8000990 <MX_GPIO_Init+0x2b4>)
 8000828:	f000 fb5a 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800082c:	2310      	movs	r3, #16
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800083c:	2306      	movs	r3, #6
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4852      	ldr	r0, [pc, #328]	@ (8000990 <MX_GPIO_Init+0x2b4>)
 8000848:	f000 fb4a 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800084c:	23e0      	movs	r3, #224	@ 0xe0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800085c:	2305      	movs	r3, #5
 800085e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	484a      	ldr	r0, [pc, #296]	@ (8000990 <MX_GPIO_Init+0x2b4>)
 8000868:	f000 fb3a 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800086c:	2304      	movs	r3, #4
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4845      	ldr	r0, [pc, #276]	@ (8000994 <MX_GPIO_Init+0x2b8>)
 8000880:	f000 fb2e 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000884:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000896:	2305      	movs	r3, #5
 8000898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	483c      	ldr	r0, [pc, #240]	@ (8000994 <MX_GPIO_Init+0x2b8>)
 80008a2:	f000 fb1d 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008aa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4833      	ldr	r0, [pc, #204]	@ (800098c <MX_GPIO_Init+0x2b0>)
 80008c0:	f000 fb0e 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d6:	2306      	movs	r3, #6
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4829      	ldr	r0, [pc, #164]	@ (8000988 <MX_GPIO_Init+0x2ac>)
 80008e2:	f000 fafd 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4825      	ldr	r0, [pc, #148]	@ (8000990 <MX_GPIO_Init+0x2b4>)
 80008fc:	f000 faf0 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000900:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000912:	230a      	movs	r3, #10
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481c      	ldr	r0, [pc, #112]	@ (8000990 <MX_GPIO_Init+0x2b4>)
 800091e:	f000 fadf 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000922:	2320      	movs	r3, #32
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4815      	ldr	r0, [pc, #84]	@ (800098c <MX_GPIO_Init+0x2b0>)
 8000936:	f000 fad3 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800093a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000940:	2312      	movs	r3, #18
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094c:	2304      	movs	r3, #4
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	480f      	ldr	r0, [pc, #60]	@ (8000994 <MX_GPIO_Init+0x2b8>)
 8000958:	f000 fac2 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800095c:	2302      	movs	r3, #2
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000960:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_GPIO_Init+0x2a8>)
 8000972:	f000 fab5 	bl	8000ee0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000976:	bf00      	nop
 8000978:	3730      	adds	r7, #48	@ 0x30
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40021000 	.word	0x40021000
 8000988:	40020800 	.word	0x40020800
 800098c:	40020c00 	.word	0x40020c00
 8000990:	40020000 	.word	0x40020000
 8000994:	40020400 	.word	0x40020400

08000998 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*) parameters);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f005 fde9 	bl	8006578 <puts>
 80009a6:	e7fb      	b.n	80009a0 <task1_handler+0x8>

080009a8 <task2_handler>:
	}

}

static void task2_handler(void* parameters)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*) parameters);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f005 fde1 	bl	8006578 <puts>
 80009b6:	e7fb      	b.n	80009b0 <task2_handler+0x8>

080009b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ca:	f000 f987 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40001000 	.word	0x40001000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000a26:	f003 fab9 	bl	8003f9c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08e      	sub	sp, #56	@ 0x38
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4b33      	ldr	r3, [pc, #204]	@ (8000b1c <HAL_InitTick+0xe4>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a50:	4a32      	ldr	r2, [pc, #200]	@ (8000b1c <HAL_InitTick+0xe4>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a58:	4b30      	ldr	r3, [pc, #192]	@ (8000b1c <HAL_InitTick+0xe4>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	f003 0310 	and.w	r3, r3, #16
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a64:	f107 0210 	add.w	r2, r7, #16
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 f870 	bl	8001b54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d103      	bne.n	8000a86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a7e:	f001 f855 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8000a82:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a84:	e004      	b.n	8000a90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a86:	f001 f851 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a92:	4a23      	ldr	r2, [pc, #140]	@ (8000b20 <HAL_InitTick+0xe8>)
 8000a94:	fba2 2303 	umull	r2, r3, r2, r3
 8000a98:	0c9b      	lsrs	r3, r3, #18
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <HAL_InitTick+0xec>)
 8000aa0:	4a21      	ldr	r2, [pc, #132]	@ (8000b28 <HAL_InitTick+0xf0>)
 8000aa2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <HAL_InitTick+0xec>)
 8000aa6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aaa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aac:	4a1d      	ldr	r2, [pc, #116]	@ (8000b24 <HAL_InitTick+0xec>)
 8000aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ab0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <HAL_InitTick+0xec>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <HAL_InitTick+0xec>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abe:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_InitTick+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ac4:	4817      	ldr	r0, [pc, #92]	@ (8000b24 <HAL_InitTick+0xec>)
 8000ac6:	f001 f877 	bl	8001bb8 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d11b      	bne.n	8000b10 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ad8:	4812      	ldr	r0, [pc, #72]	@ (8000b24 <HAL_InitTick+0xec>)
 8000ada:	f001 f8c7 	bl	8001c6c <HAL_TIM_Base_Start_IT>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ae4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d111      	bne.n	8000b10 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aec:	2036      	movs	r0, #54	@ 0x36
 8000aee:	f000 f9e9 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d808      	bhi.n	8000b0a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	2036      	movs	r0, #54	@ 0x36
 8000afe:	f000 f9c5 	bl	8000e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <HAL_InitTick+0xf4>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e002      	b.n	8000b10 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3738      	adds	r7, #56	@ 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	431bde83 	.word	0x431bde83
 8000b24:	2000008c 	.word	0x2000008c
 8000b28:	40001000 	.word	0x40001000
 8000b2c:	20000004 	.word	0x20000004

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <NMI_Handler+0x4>

08000b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <MemManage_Handler+0x4>

08000b48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <TIM6_DAC_IRQHandler+0x10>)
 8000b6e:	f001 f8ed 	bl	8001d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000008c 	.word	0x2000008c

08000b7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e00a      	b.n	8000ba4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b8e:	f3af 8000 	nop.w
 8000b92:	4601      	mov	r1, r0
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	60ba      	str	r2, [r7, #8]
 8000b9a:	b2ca      	uxtb	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf0      	blt.n	8000b8e <_read+0x12>
  }

  return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
  return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c48:	f7ff ffea 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	@ (8000c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	@ (8000c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f005 fdad 	bl	80067d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fc6d 	bl	8000554 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c88:	08006e50 	.word	0x08006e50
  ldr r2, =_sbss
 8000c8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c90:	20014644 	.word	0x20014644

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f8d8 	bl	8000e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff feb6 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fe8c 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200000d4 	.word	0x200000d4

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200000d4 	.word	0x200000d4

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	@ (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	@ (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	@ (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	@ 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff4c 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9e:	f7ff ff61 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff ffb1 	bl	8000e10 <NVIC_EncodePriority>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff80 	bl	8000dbc <__NVIC_SetPriority>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff54 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	@ 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e16b      	b.n	80011d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 815a 	bne.w	80011ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d005      	beq.n	8000f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d017      	beq.n	8000fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d123      	bne.n	8001024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0203 	and.w	r2, r3, #3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80b4 	beq.w	80011ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b60      	ldr	r3, [pc, #384]	@ (80011ec <HAL_GPIO_Init+0x30c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	4a5f      	ldr	r2, [pc, #380]	@ (80011ec <HAL_GPIO_Init+0x30c>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001074:	6453      	str	r3, [r2, #68]	@ 0x44
 8001076:	4b5d      	ldr	r3, [pc, #372]	@ (80011ec <HAL_GPIO_Init+0x30c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a5b      	ldr	r2, [pc, #364]	@ (80011f0 <HAL_GPIO_Init+0x310>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a52      	ldr	r2, [pc, #328]	@ (80011f4 <HAL_GPIO_Init+0x314>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d02b      	beq.n	8001106 <HAL_GPIO_Init+0x226>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a51      	ldr	r2, [pc, #324]	@ (80011f8 <HAL_GPIO_Init+0x318>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d025      	beq.n	8001102 <HAL_GPIO_Init+0x222>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a50      	ldr	r2, [pc, #320]	@ (80011fc <HAL_GPIO_Init+0x31c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d01f      	beq.n	80010fe <HAL_GPIO_Init+0x21e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001200 <HAL_GPIO_Init+0x320>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d019      	beq.n	80010fa <HAL_GPIO_Init+0x21a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001204 <HAL_GPIO_Init+0x324>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0x216>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001208 <HAL_GPIO_Init+0x328>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00d      	beq.n	80010f2 <HAL_GPIO_Init+0x212>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	@ (800120c <HAL_GPIO_Init+0x32c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d007      	beq.n	80010ee <HAL_GPIO_Init+0x20e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001210 <HAL_GPIO_Init+0x330>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_GPIO_Init+0x20a>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e00e      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010ea:	2308      	movs	r3, #8
 80010ec:	e00c      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e00a      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x228>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x228>
 8001106:	2300      	movs	r3, #0
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4935      	ldr	r1, [pc, #212]	@ (80011f0 <HAL_GPIO_Init+0x310>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001126:	4b3b      	ldr	r3, [pc, #236]	@ (8001214 <HAL_GPIO_Init+0x334>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114a:	4a32      	ldr	r2, [pc, #200]	@ (8001214 <HAL_GPIO_Init+0x334>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001150:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <HAL_GPIO_Init+0x334>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001174:	4a27      	ldr	r2, [pc, #156]	@ (8001214 <HAL_GPIO_Init+0x334>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117a:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <HAL_GPIO_Init+0x334>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119e:	4a1d      	ldr	r2, [pc, #116]	@ (8001214 <HAL_GPIO_Init+0x334>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <HAL_GPIO_Init+0x334>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c8:	4a12      	ldr	r2, [pc, #72]	@ (8001214 <HAL_GPIO_Init+0x334>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f67f ae90 	bls.w	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3724      	adds	r7, #36	@ 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021000 	.word	0x40021000
 8001208:	40021400 	.word	0x40021400
 800120c:	40021800 	.word	0x40021800
 8001210:	40021c00 	.word	0x40021c00
 8001214:	40013c00 	.word	0x40013c00

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001234:	e003      	b.n	800123e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	041a      	lsls	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e267      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d075      	beq.n	8001356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800126a:	4b88      	ldr	r3, [pc, #544]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b04      	cmp	r3, #4
 8001274:	d00c      	beq.n	8001290 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4b85      	ldr	r3, [pc, #532]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800127e:	2b08      	cmp	r3, #8
 8001280:	d112      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001282:	4b82      	ldr	r3, [pc, #520]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800128a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800128e:	d10b      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	4b7e      	ldr	r3, [pc, #504]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d05b      	beq.n	8001354 <HAL_RCC_OscConfig+0x108>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d157      	bne.n	8001354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e242      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b0:	d106      	bne.n	80012c0 <HAL_RCC_OscConfig+0x74>
 80012b2:	4b76      	ldr	r3, [pc, #472]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a75      	ldr	r2, [pc, #468]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x98>
 80012ca:	4b70      	ldr	r3, [pc, #448]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6f      	ldr	r2, [pc, #444]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6d      	ldr	r3, [pc, #436]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6c      	ldr	r2, [pc, #432]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012e4:	4b69      	ldr	r3, [pc, #420]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a68      	ldr	r2, [pc, #416]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b66      	ldr	r3, [pc, #408]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a65      	ldr	r2, [pc, #404]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fcfe 	bl	8000d04 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fcfa 	bl	8000d04 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	@ 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e207      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b5b      	ldr	r3, [pc, #364]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xc0>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fcea 	bl	8000d04 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fce6 	bl	8000d04 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	@ 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1f3      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b51      	ldr	r3, [pc, #324]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0xe8>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001362:	4b4a      	ldr	r3, [pc, #296]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b47      	ldr	r3, [pc, #284]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137a:	4b44      	ldr	r3, [pc, #272]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b41      	ldr	r3, [pc, #260]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1c7      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b3b      	ldr	r3, [pc, #236]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4937      	ldr	r1, [pc, #220]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b34      	ldr	r3, [pc, #208]	@ (8001490 <HAL_RCC_OscConfig+0x244>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fc9f 	bl	8000d04 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fc9b 	bl	8000d04 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1a8      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b2b      	ldr	r3, [pc, #172]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b28      	ldr	r3, [pc, #160]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4925      	ldr	r1, [pc, #148]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <HAL_RCC_OscConfig+0x244>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fc7e 	bl	8000d04 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fc7a 	bl	8000d04 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e187      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d036      	beq.n	80014a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d016      	beq.n	800146c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <HAL_RCC_OscConfig+0x248>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fc5e 	bl	8000d04 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fc5a 	bl	8000d04 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e167      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x200>
 800146a:	e01b      	b.n	80014a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <HAL_RCC_OscConfig+0x248>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fc47 	bl	8000d04 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	e00e      	b.n	8001498 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff fc43 	bl	8000d04 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d907      	bls.n	8001498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e150      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 800148c:	40023800 	.word	0x40023800
 8001490:	42470000 	.word	0x42470000
 8001494:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	4b88      	ldr	r3, [pc, #544]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800149a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ea      	bne.n	800147a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8097 	beq.w	80015e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b6:	4b81      	ldr	r3, [pc, #516]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10f      	bne.n	80014e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b7d      	ldr	r3, [pc, #500]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a7c      	ldr	r2, [pc, #496]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b7a      	ldr	r3, [pc, #488]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b77      	ldr	r3, [pc, #476]	@ (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ee:	4b74      	ldr	r3, [pc, #464]	@ (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a73      	ldr	r2, [pc, #460]	@ (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fc03 	bl	8000d04 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff fbff 	bl	8000d04 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e10c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	4b6a      	ldr	r3, [pc, #424]	@ (80016c0 <HAL_RCC_OscConfig+0x474>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x2ea>
 8001528:	4b64      	ldr	r3, [pc, #400]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152c:	4a63      	ldr	r2, [pc, #396]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	@ 0x70
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x30c>
 800153e:	4b5f      	ldr	r3, [pc, #380]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001542:	4a5e      	ldr	r2, [pc, #376]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6713      	str	r3, [r2, #112]	@ 0x70
 800154a:	4b5c      	ldr	r3, [pc, #368]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154e:	4a5b      	ldr	r2, [pc, #364]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6713      	str	r3, [r2, #112]	@ 0x70
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001558:	4b58      	ldr	r3, [pc, #352]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800155c:	4a57      	ldr	r2, [pc, #348]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 0301 	bic.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	@ 0x70
 8001564:	4b55      	ldr	r3, [pc, #340]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001568:	4a54      	ldr	r2, [pc, #336]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800156a:	f023 0304 	bic.w	r3, r3, #4
 800156e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d015      	beq.n	80015a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fbc4 	bl	8000d04 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	e00a      	b.n	8001596 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001580:	f7ff fbc0 	bl	8000d04 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0cb      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001596:	4b49      	ldr	r3, [pc, #292]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0ee      	beq.n	8001580 <HAL_RCC_OscConfig+0x334>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fbae 	bl	8000d04 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff fbaa 	bl	8000d04 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e0b5      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c2:	4b3e      	ldr	r3, [pc, #248]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ee      	bne.n	80015ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4b39      	ldr	r3, [pc, #228]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	4a38      	ldr	r2, [pc, #224]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a1 	beq.w	800172c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ea:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d05c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d141      	bne.n	8001682 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b31      	ldr	r3, [pc, #196]	@ (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fb7e 	bl	8000d04 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fb7a 	bl	8000d04 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e087      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	019b      	lsls	r3, r3, #6
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	3b01      	subs	r3, #1
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	491b      	ldr	r1, [pc, #108]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fb53 	bl	8000d04 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff fb4f 	bl	8000d04 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e05c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x416>
 8001680:	e054      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb3c 	bl	8000d04 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb38 	bl	8000d04 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e045      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x444>
 80016ae:	e03d      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d107      	bne.n	80016c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e038      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000
 80016c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <HAL_RCC_OscConfig+0x4ec>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d028      	beq.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d121      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d11a      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016f8:	4013      	ands	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001700:	4293      	cmp	r3, r2
 8001702:	d111      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	3b01      	subs	r3, #1
 8001712:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d107      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001722:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0cc      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b68      	ldr	r3, [pc, #416]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d90c      	bls.n	8001778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b65      	ldr	r3, [pc, #404]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b63      	ldr	r3, [pc, #396]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b8      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001790:	4b59      	ldr	r3, [pc, #356]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a58      	ldr	r2, [pc, #352]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800179a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a8:	4b53      	ldr	r3, [pc, #332]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a52      	ldr	r2, [pc, #328]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b4:	4b50      	ldr	r3, [pc, #320]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	494d      	ldr	r1, [pc, #308]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d044      	beq.n	800185c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b47      	ldr	r3, [pc, #284]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d119      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e07f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b3f      	ldr	r3, [pc, #252]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b3b      	ldr	r3, [pc, #236]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e067      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4b37      	ldr	r3, [pc, #220]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 0203 	bic.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4934      	ldr	r1, [pc, #208]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800182c:	f7ff fa6a 	bl	8000d04 <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7ff fa66 	bl	8000d04 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e04f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 020c 	and.w	r2, r3, #12
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	429a      	cmp	r2, r3
 800185a:	d1eb      	bne.n	8001834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d20c      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e032      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4916      	ldr	r1, [pc, #88]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ae:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	490e      	ldr	r1, [pc, #56]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018c2:	f000 f821 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	490a      	ldr	r1, [pc, #40]	@ (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	5ccb      	ldrb	r3, [r1, r3]
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	4a09      	ldr	r2, [pc, #36]	@ (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f8a8 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023c00 	.word	0x40023c00
 80018f8:	40023800 	.word	0x40023800
 80018fc:	08006e00 	.word	0x08006e00
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800190c:	b094      	sub	sp, #80	@ 0x50
 800190e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001920:	4b79      	ldr	r3, [pc, #484]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d00d      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x40>
 800192c:	2b08      	cmp	r3, #8
 800192e:	f200 80e1 	bhi.w	8001af4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x34>
 8001936:	2b04      	cmp	r3, #4
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x3a>
 800193a:	e0db      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b73      	ldr	r3, [pc, #460]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0x204>)
 800193e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001940:	e0db      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001942:	4b73      	ldr	r3, [pc, #460]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001944:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001946:	e0d8      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001948:	4b6f      	ldr	r3, [pc, #444]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001950:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001952:	4b6d      	ldr	r3, [pc, #436]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d063      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	099b      	lsrs	r3, r3, #6
 8001964:	2200      	movs	r2, #0
 8001966:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001968:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800196a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800196c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001970:	633b      	str	r3, [r7, #48]	@ 0x30
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	@ 0x34
 8001976:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800197a:	4622      	mov	r2, r4
 800197c:	462b      	mov	r3, r5
 800197e:	f04f 0000 	mov.w	r0, #0
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	0159      	lsls	r1, r3, #5
 8001988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800198c:	0150      	lsls	r0, r2, #5
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4621      	mov	r1, r4
 8001994:	1a51      	subs	r1, r2, r1
 8001996:	6139      	str	r1, [r7, #16]
 8001998:	4629      	mov	r1, r5
 800199a:	eb63 0301 	sbc.w	r3, r3, r1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019ac:	4659      	mov	r1, fp
 80019ae:	018b      	lsls	r3, r1, #6
 80019b0:	4651      	mov	r1, sl
 80019b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019b6:	4651      	mov	r1, sl
 80019b8:	018a      	lsls	r2, r1, #6
 80019ba:	4651      	mov	r1, sl
 80019bc:	ebb2 0801 	subs.w	r8, r2, r1
 80019c0:	4659      	mov	r1, fp
 80019c2:	eb63 0901 	sbc.w	r9, r3, r1
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019da:	4690      	mov	r8, r2
 80019dc:	4699      	mov	r9, r3
 80019de:	4623      	mov	r3, r4
 80019e0:	eb18 0303 	adds.w	r3, r8, r3
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	462b      	mov	r3, r5
 80019e8:	eb49 0303 	adc.w	r3, r9, r3
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019fa:	4629      	mov	r1, r5
 80019fc:	024b      	lsls	r3, r1, #9
 80019fe:	4621      	mov	r1, r4
 8001a00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a04:	4621      	mov	r1, r4
 8001a06:	024a      	lsls	r2, r1, #9
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a0e:	2200      	movs	r2, #0
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a18:	f7fe fc24 	bl	8000264 <__aeabi_uldivmod>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4613      	mov	r3, r2
 8001a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a24:	e058      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a26:	4b38      	ldr	r3, [pc, #224]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	099b      	lsrs	r3, r3, #6
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4611      	mov	r1, r2
 8001a32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a36:	623b      	str	r3, [r7, #32]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a40:	4642      	mov	r2, r8
 8001a42:	464b      	mov	r3, r9
 8001a44:	f04f 0000 	mov.w	r0, #0
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	0159      	lsls	r1, r3, #5
 8001a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a52:	0150      	lsls	r0, r2, #5
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4641      	mov	r1, r8
 8001a5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a5e:	4649      	mov	r1, r9
 8001a60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a78:	ebb2 040a 	subs.w	r4, r2, sl
 8001a7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	00eb      	lsls	r3, r5, #3
 8001a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a8e:	00e2      	lsls	r2, r4, #3
 8001a90:	4614      	mov	r4, r2
 8001a92:	461d      	mov	r5, r3
 8001a94:	4643      	mov	r3, r8
 8001a96:	18e3      	adds	r3, r4, r3
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	eb45 0303 	adc.w	r3, r5, r3
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aae:	4629      	mov	r1, r5
 8001ab0:	028b      	lsls	r3, r1, #10
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab8:	4621      	mov	r1, r4
 8001aba:	028a      	lsls	r2, r1, #10
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	61fa      	str	r2, [r7, #28]
 8001ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001acc:	f7fe fbca 	bl	8000264 <__aeabi_uldivmod>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ae8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001af2:	e002      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001af6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3750      	adds	r7, #80	@ 0x50
 8001b00:	46bd      	mov	sp, r7
 8001b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	00f42400 	.word	0x00f42400
 8001b10:	007a1200 	.word	0x007a1200

08001b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b18:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000000 	.word	0x20000000

08001b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b30:	f7ff fff0 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0a9b      	lsrs	r3, r3, #10
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4903      	ldr	r1, [pc, #12]	@ (8001b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	08006e10 	.word	0x08006e10

08001b54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	220f      	movs	r2, #15
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b70:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b88:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b96:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x60>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0207 	and.w	r2, r3, #7
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e041      	b.n	8001c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f839 	bl	8001c56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f000 f9c0 	bl	8001f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d001      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e04e      	b.n	8001d22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a23      	ldr	r2, [pc, #140]	@ (8001d30 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d022      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cae:	d01d      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d34 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d018      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001d38 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00e      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	@ (8001d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d004      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a18      	ldr	r2, [pc, #96]	@ (8001d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d111      	bne.n	8001d10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d010      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0e:	e007      	b.n	8001d20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40000400 	.word	0x40000400
 8001d38:	40000800 	.word	0x40000800
 8001d3c:	40000c00 	.word	0x40000c00
 8001d40:	40010400 	.word	0x40010400
 8001d44:	40014000 	.word	0x40014000
 8001d48:	40001800 	.word	0x40001800

08001d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d020      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01b      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0202 	mvn.w	r2, #2
 8001d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8d2 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001d9c:	e005      	b.n	8001daa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8c4 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f8d5 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d020      	beq.n	8001dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01b      	beq.n	8001dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0204 	mvn.w	r2, #4
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8ac 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f89e 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f8af 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d020      	beq.n	8001e48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01b      	beq.n	8001e48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0208 	mvn.w	r2, #8
 8001e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f886 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001e34:	e005      	b.n	8001e42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f878 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f889 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d020      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01b      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0210 	mvn.w	r2, #16
 8001e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f860 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001e80:	e005      	b.n	8001e8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f852 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f863 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0201 	mvn.w	r2, #1
 8001eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7fe fd80 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f906 	bl	80020e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00c      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f834 	bl	8001f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00c      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0220 	mvn.w	r2, #32
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8d8 	bl	80020d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a46      	ldr	r2, [pc, #280]	@ (80020a8 <TIM_Base_SetConfig+0x12c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f9a:	d00f      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a43      	ldr	r2, [pc, #268]	@ (80020ac <TIM_Base_SetConfig+0x130>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00b      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a42      	ldr	r2, [pc, #264]	@ (80020b0 <TIM_Base_SetConfig+0x134>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a41      	ldr	r2, [pc, #260]	@ (80020b4 <TIM_Base_SetConfig+0x138>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a40      	ldr	r2, [pc, #256]	@ (80020b8 <TIM_Base_SetConfig+0x13c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d108      	bne.n	8001fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a35      	ldr	r2, [pc, #212]	@ (80020a8 <TIM_Base_SetConfig+0x12c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fdc:	d027      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a32      	ldr	r2, [pc, #200]	@ (80020ac <TIM_Base_SetConfig+0x130>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d023      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a31      	ldr	r2, [pc, #196]	@ (80020b0 <TIM_Base_SetConfig+0x134>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01f      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a30      	ldr	r2, [pc, #192]	@ (80020b4 <TIM_Base_SetConfig+0x138>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a2f      	ldr	r2, [pc, #188]	@ (80020b8 <TIM_Base_SetConfig+0x13c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d017      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a2e      	ldr	r2, [pc, #184]	@ (80020bc <TIM_Base_SetConfig+0x140>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a2d      	ldr	r2, [pc, #180]	@ (80020c0 <TIM_Base_SetConfig+0x144>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00f      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a2c      	ldr	r2, [pc, #176]	@ (80020c4 <TIM_Base_SetConfig+0x148>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2b      	ldr	r2, [pc, #172]	@ (80020c8 <TIM_Base_SetConfig+0x14c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a2a      	ldr	r2, [pc, #168]	@ (80020cc <TIM_Base_SetConfig+0x150>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d003      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a29      	ldr	r2, [pc, #164]	@ (80020d0 <TIM_Base_SetConfig+0x154>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d108      	bne.n	8002040 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a10      	ldr	r2, [pc, #64]	@ (80020a8 <TIM_Base_SetConfig+0x12c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d003      	beq.n	8002074 <TIM_Base_SetConfig+0xf8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a12      	ldr	r2, [pc, #72]	@ (80020b8 <TIM_Base_SetConfig+0x13c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d103      	bne.n	800207c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d105      	bne.n	800209a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f023 0201 	bic.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	611a      	str	r2, [r3, #16]
  }
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40000800 	.word	0x40000800
 80020b4:	40000c00 	.word	0x40000c00
 80020b8:	40010400 	.word	0x40010400
 80020bc:	40014000 	.word	0x40014000
 80020c0:	40014400 	.word	0x40014400
 80020c4:	40014800 	.word	0x40014800
 80020c8:	40001800 	.word	0x40001800
 80020cc:	40001c00 	.word	0x40001c00
 80020d0:	40002000 	.word	0x40002000

080020d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f103 0208 	add.w	r2, r3, #8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002114:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f103 0208 	add.w	r2, r3, #8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0208 	add.w	r2, r3, #8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800216c:	d103      	bne.n	8002176 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e00c      	b.n	8002190 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3308      	adds	r3, #8
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e002      	b.n	8002184 <vListInsert+0x2e>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	429a      	cmp	r2, r3
 800218e:	d2f6      	bcs.n	800217e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	601a      	str	r2, [r3, #0]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6892      	ldr	r2, [r2, #8]
 80021de:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6852      	ldr	r2, [r2, #4]
 80021e8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d103      	bne.n	80021fc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	1e5a      	subs	r2, r3, #1
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002226:	2301      	movs	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10b      	bne.n	800224c <xQueueGenericReset+0x30>
        __asm volatile
 8002234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	60fb      	str	r3, [r7, #12]
    }
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d05d      	beq.n	800230e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	d059      	beq.n	800230e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002262:	2100      	movs	r1, #0
 8002264:	fba3 2302 	umull	r2, r3, r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d000      	beq.n	800226e <xQueueGenericReset+0x52>
 800226c:	2101      	movs	r1, #1
 800226e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002270:	2b00      	cmp	r3, #0
 8002272:	d14c      	bne.n	800230e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002274:	f001 ff12 	bl	800409c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002280:	6939      	ldr	r1, [r7, #16]
 8002282:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	441a      	add	r2, r3
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2200      	movs	r2, #0
 8002292:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a4:	3b01      	subs	r3, #1
 80022a6:	6939      	ldr	r1, [r7, #16]
 80022a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	441a      	add	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	22ff      	movs	r2, #255	@ 0xff
 80022b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	22ff      	movs	r2, #255	@ 0xff
 80022c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d114      	bne.n	80022f4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01a      	beq.n	8002308 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	3310      	adds	r3, #16
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 ffea 	bl	80032b0 <xTaskRemoveFromEventList>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d012      	beq.n	8002308 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80022e2:	4b16      	ldr	r3, [pc, #88]	@ (800233c <xQueueGenericReset+0x120>)
 80022e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f3bf 8f4f 	dsb	sy
 80022ee:	f3bf 8f6f 	isb	sy
 80022f2:	e009      	b.n	8002308 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	3310      	adds	r3, #16
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff feff 	bl	80020fc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	3324      	adds	r3, #36	@ 0x24
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fefa 	bl	80020fc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002308:	f001 fefa 	bl	8004100 <vPortExitCritical>
 800230c:	e001      	b.n	8002312 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10b      	bne.n	8002330 <xQueueGenericReset+0x114>
        __asm volatile
 8002318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	60bb      	str	r3, [r7, #8]
    }
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002330:	697b      	ldr	r3, [r7, #20]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000ed04 	.word	0xe000ed04

08002340 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	@ 0x28
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	4613      	mov	r3, r2
 800234c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d02e      	beq.n	80023b6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002358:	2100      	movs	r1, #0
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	fba3 2302 	umull	r2, r3, r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d000      	beq.n	8002368 <xQueueGenericCreate+0x28>
 8002366:	2101      	movs	r1, #1
 8002368:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	d123      	bne.n	80023b6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002376:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800237a:	d81c      	bhi.n	80023b6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	fb02 f303 	mul.w	r3, r2, r3
 8002384:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3350      	adds	r3, #80	@ 0x50
 800238a:	4618      	mov	r0, r3
 800238c:	f001 ffb8 	bl	8004300 <pvPortMalloc>
 8002390:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01d      	beq.n	80023d4 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3350      	adds	r3, #80	@ 0x50
 80023a0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023a2:	79fa      	ldrb	r2, [r7, #7]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f815 	bl	80023de <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80023b4:	e00e      	b.n	80023d4 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10b      	bne.n	80023d4 <xQueueGenericCreate+0x94>
        __asm volatile
 80023bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	613b      	str	r3, [r7, #16]
    }
 80023ce:	bf00      	nop
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023d4:	69fb      	ldr	r3, [r7, #28]
    }
 80023d6:	4618      	mov	r0, r3
 80023d8:	3720      	adds	r7, #32
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e002      	b.n	8002400 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800240c:	2101      	movs	r1, #1
 800240e:	69b8      	ldr	r0, [r7, #24]
 8002410:	f7ff ff04 	bl	800221c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	68f9      	ldr	r1, [r7, #12]
 8002422:	2073      	movs	r0, #115	@ 0x73
 8002424:	f003 f900 	bl	8005628 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b08f      	sub	sp, #60	@ 0x3c
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800243c:	2300      	movs	r3, #0
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10b      	bne.n	8002462 <xQueueReceive+0x32>
        __asm volatile
 800244a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800244e:	f383 8811 	msr	BASEPRI, r3
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	623b      	str	r3, [r7, #32]
    }
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	e7fd      	b.n	800245e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d103      	bne.n	8002470 <xQueueReceive+0x40>
 8002468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <xQueueReceive+0x44>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <xQueueReceive+0x46>
 8002474:	2300      	movs	r3, #0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10b      	bne.n	8002492 <xQueueReceive+0x62>
        __asm volatile
 800247a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800247e:	f383 8811 	msr	BASEPRI, r3
 8002482:	f3bf 8f6f 	isb	sy
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	61fb      	str	r3, [r7, #28]
    }
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	e7fd      	b.n	800248e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002492:	f001 f923 	bl	80036dc <xTaskGetSchedulerState>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <xQueueReceive+0x72>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <xQueueReceive+0x76>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <xQueueReceive+0x78>
 80024a6:	2300      	movs	r3, #0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10b      	bne.n	80024c4 <xQueueReceive+0x94>
        __asm volatile
 80024ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	61bb      	str	r3, [r7, #24]
    }
 80024be:	bf00      	nop
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024c4:	f001 fdea 	bl	800409c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d02f      	beq.n	8002534 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024d8:	f000 f8be 	bl	8002658 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80024dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 fdce 	bl	8006080 <SEGGER_SYSVIEW_ShrinkId>
 80024e4:	4604      	mov	r4, r0
 80024e6:	2000      	movs	r0, #0
 80024e8:	f003 fdca 	bl	8006080 <SEGGER_SYSVIEW_ShrinkId>
 80024ec:	4602      	mov	r2, r0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2101      	movs	r1, #1
 80024f2:	9100      	str	r1, [sp, #0]
 80024f4:	4621      	mov	r1, r4
 80024f6:	205c      	movs	r0, #92	@ 0x5c
 80024f8:	f003 f90c 	bl	8005714 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	1e5a      	subs	r2, r3, #1
 8002500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002502:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00f      	beq.n	800252c <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800250c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250e:	3310      	adds	r3, #16
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fecd 	bl	80032b0 <xTaskRemoveFromEventList>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800251c:	4b4d      	ldr	r3, [pc, #308]	@ (8002654 <xQueueReceive+0x224>)
 800251e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800252c:	f001 fde8 	bl	8004100 <vPortExitCritical>
                return pdPASS;
 8002530:	2301      	movs	r3, #1
 8002532:	e08a      	b.n	800264a <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d113      	bne.n	8002562 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800253a:	f001 fde1 	bl	8004100 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800253e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002540:	4618      	mov	r0, r3
 8002542:	f003 fd9d 	bl	8006080 <SEGGER_SYSVIEW_ShrinkId>
 8002546:	4604      	mov	r4, r0
 8002548:	2000      	movs	r0, #0
 800254a:	f003 fd99 	bl	8006080 <SEGGER_SYSVIEW_ShrinkId>
 800254e:	4602      	mov	r2, r0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2101      	movs	r1, #1
 8002554:	9100      	str	r1, [sp, #0]
 8002556:	4621      	mov	r1, r4
 8002558:	205c      	movs	r0, #92	@ 0x5c
 800255a:	f003 f8db 	bl	8005714 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800255e:	2300      	movs	r3, #0
 8002560:	e073      	b.n	800264a <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002564:	2b00      	cmp	r3, #0
 8002566:	d106      	bne.n	8002576 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	4618      	mov	r0, r3
 800256e:	f000 ff79 	bl	8003464 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002572:	2301      	movs	r3, #1
 8002574:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002576:	f001 fdc3 	bl	8004100 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800257a:	f000 fb73 	bl	8002c64 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800257e:	f001 fd8d 	bl	800409c <vPortEnterCritical>
 8002582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002584:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002588:	b25b      	sxtb	r3, r3
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800258e:	d103      	bne.n	8002598 <xQueueReceive+0x168>
 8002590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800259e:	b25b      	sxtb	r3, r3
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025a4:	d103      	bne.n	80025ae <xQueueReceive+0x17e>
 80025a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025ae:	f001 fda7 	bl	8004100 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025b2:	1d3a      	adds	r2, r7, #4
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 ff68 	bl	8003490 <xTaskCheckForTimeOut>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d124      	bne.n	8002610 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025c8:	f000 f8be 	bl	8002748 <prvIsQueueEmpty>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d018      	beq.n	8002604 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d4:	3324      	adds	r3, #36	@ 0x24
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fdf8 	bl	80031d0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025e2:	f000 f85f 	bl	80026a4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025e6:	f000 fb4b 	bl	8002c80 <xTaskResumeAll>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f af69 	bne.w	80024c4 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80025f2:	4b18      	ldr	r3, [pc, #96]	@ (8002654 <xQueueReceive+0x224>)
 80025f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	e75f      	b.n	80024c4 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002606:	f000 f84d 	bl	80026a4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800260a:	f000 fb39 	bl	8002c80 <xTaskResumeAll>
 800260e:	e759      	b.n	80024c4 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002610:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002612:	f000 f847 	bl	80026a4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002616:	f000 fb33 	bl	8002c80 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800261a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800261c:	f000 f894 	bl	8002748 <prvIsQueueEmpty>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	f43f af4e 	beq.w	80024c4 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262a:	4618      	mov	r0, r3
 800262c:	f003 fd28 	bl	8006080 <SEGGER_SYSVIEW_ShrinkId>
 8002630:	4604      	mov	r4, r0
 8002632:	2000      	movs	r0, #0
 8002634:	f003 fd24 	bl	8006080 <SEGGER_SYSVIEW_ShrinkId>
 8002638:	4602      	mov	r2, r0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2101      	movs	r1, #1
 800263e:	9100      	str	r1, [sp, #0]
 8002640:	4621      	mov	r1, r4
 8002642:	205c      	movs	r0, #92	@ 0x5c
 8002644:	f003 f866 	bl	8005714 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002648:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800264a:	4618      	mov	r0, r3
 800264c:	3734      	adds	r7, #52	@ 0x34
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}
 8002652:	bf00      	nop
 8002654:	e000ed04 	.word	0xe000ed04

08002658 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	d018      	beq.n	800269c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	441a      	add	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	429a      	cmp	r2, r3
 8002682:	d303      	bcc.n	800268c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68d9      	ldr	r1, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	461a      	mov	r2, r3
 8002696:	6838      	ldr	r0, [r7, #0]
 8002698:	f004 f8c1 	bl	800681e <memcpy>
    }
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80026ac:	f001 fcf6 	bl	800409c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026b6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026b8:	e011      	b.n	80026de <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d012      	beq.n	80026e8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3324      	adds	r3, #36	@ 0x24
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fdf2 	bl	80032b0 <xTaskRemoveFromEventList>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80026d2:	f000 ff45 	bl	8003560 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	3b01      	subs	r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	dce9      	bgt.n	80026ba <prvUnlockQueue+0x16>
 80026e6:	e000      	b.n	80026ea <prvUnlockQueue+0x46>
                    break;
 80026e8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	22ff      	movs	r2, #255	@ 0xff
 80026ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80026f2:	f001 fd05 	bl	8004100 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80026f6:	f001 fcd1 	bl	800409c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002700:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002702:	e011      	b.n	8002728 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d012      	beq.n	8002732 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3310      	adds	r3, #16
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fdcd 	bl	80032b0 <xTaskRemoveFromEventList>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800271c:	f000 ff20 	bl	8003560 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002720:	7bbb      	ldrb	r3, [r7, #14]
 8002722:	3b01      	subs	r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800272c:	2b00      	cmp	r3, #0
 800272e:	dce9      	bgt.n	8002704 <prvUnlockQueue+0x60>
 8002730:	e000      	b.n	8002734 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002732:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	22ff      	movs	r2, #255	@ 0xff
 8002738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800273c:	f001 fce0 	bl	8004100 <vPortExitCritical>
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002750:	f001 fca4 	bl	800409c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800275c:	2301      	movs	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	e001      	b.n	8002766 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002766:	f001 fccb 	bl	8004100 <vPortExitCritical>

    return xReturn;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10b      	bne.n	80027a0 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	60fb      	str	r3, [r7, #12]
    }
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d024      	beq.n	80027f0 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e01e      	b.n	80027ea <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80027ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002820 <vQueueAddToRegistry+0xac>)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d105      	bne.n	80027c8 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <vQueueAddToRegistry+0xac>)
 80027c2:	4413      	add	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
                    break;
 80027c6:	e013      	b.n	80027f0 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <vQueueAddToRegistry+0x70>
 80027ce:	4a14      	ldr	r2, [pc, #80]	@ (8002820 <vQueueAddToRegistry+0xac>)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d104      	bne.n	80027e4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4a10      	ldr	r2, [pc, #64]	@ (8002820 <vQueueAddToRegistry+0xac>)
 80027e0:	4413      	add	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3301      	adds	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b07      	cmp	r3, #7
 80027ee:	d9dd      	bls.n	80027ac <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00f      	beq.n	8002816 <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4618      	mov	r0, r3
 8002806:	f003 fc3b 	bl	8006080 <SEGGER_SYSVIEW_ShrinkId>
 800280a:	4601      	mov	r1, r0
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	2071      	movs	r0, #113	@ 0x71
 8002812:	f002 feaf 	bl	8005574 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200000d8 	.word	0x200000d8

08002824 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002834:	f001 fc32 	bl	800409c <vPortEnterCritical>
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800283e:	b25b      	sxtb	r3, r3
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002844:	d103      	bne.n	800284e <vQueueWaitForMessageRestricted+0x2a>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002854:	b25b      	sxtb	r3, r3
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800285a:	d103      	bne.n	8002864 <vQueueWaitForMessageRestricted+0x40>
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002864:	f001 fc4c 	bl	8004100 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286c:	2b00      	cmp	r3, #0
 800286e:	d106      	bne.n	800287e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3324      	adds	r3, #36	@ 0x24
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fccf 	bl	800321c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f7ff ff10 	bl	80026a4 <prvUnlockQueue>
    }
 8002884:	bf00      	nop
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800288c:	b580      	push	{r7, lr}
 800288e:	b08c      	sub	sp, #48	@ 0x30
 8002890:	af04      	add	r7, sp, #16
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 fd2d 	bl	8004300 <pvPortMalloc>
 80028a6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d013      	beq.n	80028d6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028ae:	2058      	movs	r0, #88	@ 0x58
 80028b0:	f001 fd26 	bl	8004300 <pvPortMalloc>
 80028b4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80028bc:	2258      	movs	r2, #88	@ 0x58
 80028be:	2100      	movs	r1, #0
 80028c0:	69f8      	ldr	r0, [r7, #28]
 80028c2:	f003 ff49 	bl	8006758 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80028cc:	e005      	b.n	80028da <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f001 fdd2 	bl	8004478 <vPortFree>
 80028d4:	e001      	b.n	80028da <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028e0:	88fa      	ldrh	r2, [r7, #6]
 80028e2:	2300      	movs	r3, #0
 80028e4:	9303      	str	r3, [sp, #12]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	9302      	str	r3, [sp, #8]
 80028ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f80e 	bl	8002918 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80028fc:	69f8      	ldr	r0, [r7, #28]
 80028fe:	f000 f89b 	bl	8002a38 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002902:	2301      	movs	r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	e002      	b.n	800290e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002908:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800290c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800290e:	69bb      	ldr	r3, [r7, #24]
    }
 8002910:	4618      	mov	r0, r3
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002928:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	461a      	mov	r2, r3
 8002930:	21a5      	movs	r1, #165	@ 0xa5
 8002932:	f003 ff11 	bl	8006758 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002938:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002940:	3b01      	subs	r3, #1
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f023 0307 	bic.w	r3, r3, #7
 800294e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	617b      	str	r3, [r7, #20]
    }
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	e7fd      	b.n	800296e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01e      	beq.n	80029b6 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	e012      	b.n	80029a4 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	4413      	add	r3, r2
 8002984:	7819      	ldrb	r1, [r3, #0]
 8002986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	3334      	adds	r3, #52	@ 0x34
 800298e:	460a      	mov	r2, r1
 8002990:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3301      	adds	r3, #1
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b09      	cmp	r3, #9
 80029a8:	d9e9      	bls.n	800297e <prvInitialiseNewTask+0x66>
 80029aa:	e000      	b.n	80029ae <prvInitialiseNewTask+0x96>
            {
                break;
 80029ac:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80029b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d90b      	bls.n	80029d4 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	613b      	str	r3, [r7, #16]
    }
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d901      	bls.n	80029de <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029da:	2304      	movs	r3, #4
 80029dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80029de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80029e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029e8:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ec:	3304      	adds	r3, #4
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fba4 	bl	800213c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f6:	3318      	adds	r3, #24
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fb9f 	bl	800213c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a02:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a06:	f1c3 0205 	rsb	r2, r3, #5
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a12:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	68f9      	ldr	r1, [r7, #12]
 8002a18:	69b8      	ldr	r0, [r7, #24]
 8002a1a:	f001 f989 	bl	8003d30 <pxPortInitialiseStack>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a22:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a2e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a30:	bf00      	nop
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a38:	b5b0      	push	{r4, r5, r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a40:	f001 fb2c 	bl	800409c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a44:	4b4f      	ldr	r3, [pc, #316]	@ (8002b84 <prvAddNewTaskToReadyList+0x14c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4a4e      	ldr	r2, [pc, #312]	@ (8002b84 <prvAddNewTaskToReadyList+0x14c>)
 8002a4c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b88 <prvAddNewTaskToReadyList+0x150>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a56:	4a4c      	ldr	r2, [pc, #304]	@ (8002b88 <prvAddNewTaskToReadyList+0x150>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a5c:	4b49      	ldr	r3, [pc, #292]	@ (8002b84 <prvAddNewTaskToReadyList+0x14c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d110      	bne.n	8002a86 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a64:	f000 fda0 	bl	80035a8 <prvInitialiseTaskLists>
 8002a68:	e00d      	b.n	8002a86 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a6a:	4b48      	ldr	r3, [pc, #288]	@ (8002b8c <prvAddNewTaskToReadyList+0x154>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a72:	4b45      	ldr	r3, [pc, #276]	@ (8002b88 <prvAddNewTaskToReadyList+0x150>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d802      	bhi.n	8002a86 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a80:	4a41      	ldr	r2, [pc, #260]	@ (8002b88 <prvAddNewTaskToReadyList+0x150>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a86:	4b42      	ldr	r3, [pc, #264]	@ (8002b90 <prvAddNewTaskToReadyList+0x158>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	4a40      	ldr	r2, [pc, #256]	@ (8002b90 <prvAddNewTaskToReadyList+0x158>)
 8002a8e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a90:	4b3f      	ldr	r3, [pc, #252]	@ (8002b90 <prvAddNewTaskToReadyList+0x158>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d016      	beq.n	8002acc <prvAddNewTaskToReadyList+0x94>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 fa27 	bl	8005ef4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	461d      	mov	r5, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461c      	mov	r4, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	1ae3      	subs	r3, r4, r3
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	462b      	mov	r3, r5
 8002ac8:	f001 fe9a 	bl	8004800 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 fa94 	bl	8005ffc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad8:	2201      	movs	r2, #1
 8002ada:	409a      	lsls	r2, r3
 8002adc:	4b2d      	ldr	r3, [pc, #180]	@ (8002b94 <prvAddNewTaskToReadyList+0x15c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b94 <prvAddNewTaskToReadyList+0x15c>)
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aea:	492b      	ldr	r1, [pc, #172]	@ (8002b98 <prvAddNewTaskToReadyList+0x160>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	3304      	adds	r3, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	3204      	adds	r2, #4
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	1d1a      	adds	r2, r3, #4
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4a1b      	ldr	r2, [pc, #108]	@ (8002b98 <prvAddNewTaskToReadyList+0x160>)
 8002b2a:	441a      	add	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	615a      	str	r2, [r3, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b34:	4918      	ldr	r1, [pc, #96]	@ (8002b98 <prvAddNewTaskToReadyList+0x160>)
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	1c59      	adds	r1, r3, #1
 8002b44:	4814      	ldr	r0, [pc, #80]	@ (8002b98 <prvAddNewTaskToReadyList+0x160>)
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4403      	add	r3, r0
 8002b50:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b52:	f001 fad5 	bl	8004100 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b56:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <prvAddNewTaskToReadyList+0x154>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00e      	beq.n	8002b7c <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <prvAddNewTaskToReadyList+0x150>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d207      	bcs.n	8002b7c <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <prvAddNewTaskToReadyList+0x164>)
 8002b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bdb0      	pop	{r4, r5, r7, pc}
 8002b84:	200001f0 	.word	0x200001f0
 8002b88:	20000118 	.word	0x20000118
 8002b8c:	200001fc 	.word	0x200001fc
 8002b90:	2000020c 	.word	0x2000020c
 8002b94:	200001f8 	.word	0x200001f8
 8002b98:	2000011c 	.word	0x2000011c
 8002b9c:	e000ed04 	.word	0xe000ed04

08002ba0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002ba6:	4b27      	ldr	r3, [pc, #156]	@ (8002c44 <vTaskStartScheduler+0xa4>)
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	2300      	movs	r3, #0
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2282      	movs	r2, #130	@ 0x82
 8002bb2:	4925      	ldr	r1, [pc, #148]	@ (8002c48 <vTaskStartScheduler+0xa8>)
 8002bb4:	4825      	ldr	r0, [pc, #148]	@ (8002c4c <vTaskStartScheduler+0xac>)
 8002bb6:	f7ff fe69 	bl	800288c <xTaskCreate>
 8002bba:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d102      	bne.n	8002bc8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002bc2:	f000 fe29 	bl	8003818 <xTimerCreateTimerTask>
 8002bc6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d124      	bne.n	8002c18 <vTaskStartScheduler+0x78>
        __asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	60bb      	str	r3, [r7, #8]
    }
 8002be0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002be2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <vTaskStartScheduler+0xb0>)
 8002be4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002be8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002bea:	4b1a      	ldr	r3, [pc, #104]	@ (8002c54 <vTaskStartScheduler+0xb4>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <vTaskStartScheduler+0xb8>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002bf6:	4b19      	ldr	r3, [pc, #100]	@ (8002c5c <vTaskStartScheduler+0xbc>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <vTaskStartScheduler+0xa4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d102      	bne.n	8002c08 <vTaskStartScheduler+0x68>
 8002c02:	f003 f95b 	bl	8005ebc <SEGGER_SYSVIEW_OnIdle>
 8002c06:	e004      	b.n	8002c12 <vTaskStartScheduler+0x72>
 8002c08:	4b14      	ldr	r3, [pc, #80]	@ (8002c5c <vTaskStartScheduler+0xbc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 f9b3 	bl	8005f78 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002c12:	f001 f91f 	bl	8003e54 <xPortStartScheduler>
 8002c16:	e00f      	b.n	8002c38 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c1e:	d10b      	bne.n	8002c38 <vTaskStartScheduler+0x98>
        __asm volatile
 8002c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c24:	f383 8811 	msr	BASEPRI, r3
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	607b      	str	r3, [r7, #4]
    }
 8002c32:	bf00      	nop
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c38:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <vTaskStartScheduler+0xc0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000214 	.word	0x20000214
 8002c48:	08006d20 	.word	0x08006d20
 8002c4c:	08003579 	.word	0x08003579
 8002c50:	20000210 	.word	0x20000210
 8002c54:	200001fc 	.word	0x200001fc
 8002c58:	200001f4 	.word	0x200001f4
 8002c5c:	20000118 	.word	0x20000118
 8002c60:	2000000c 	.word	0x2000000c

08002c64 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002c68:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <vTaskSuspendAll+0x18>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	4a03      	ldr	r2, [pc, #12]	@ (8002c7c <vTaskSuspendAll+0x18>)
 8002c70:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c72:	bf00      	nop
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	20000218 	.word	0x20000218

08002c80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c8e:	4b73      	ldr	r3, [pc, #460]	@ (8002e5c <xTaskResumeAll+0x1dc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10b      	bne.n	8002cae <xTaskResumeAll+0x2e>
        __asm volatile
 8002c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	607b      	str	r3, [r7, #4]
    }
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	e7fd      	b.n	8002caa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002cae:	f001 f9f5 	bl	800409c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e5c <xTaskResumeAll+0x1dc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	4a68      	ldr	r2, [pc, #416]	@ (8002e5c <xTaskResumeAll+0x1dc>)
 8002cba:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cbc:	4b67      	ldr	r3, [pc, #412]	@ (8002e5c <xTaskResumeAll+0x1dc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f040 80c4 	bne.w	8002e4e <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002cc6:	4b66      	ldr	r3, [pc, #408]	@ (8002e60 <xTaskResumeAll+0x1e0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80bf 	beq.w	8002e4e <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cd0:	e08e      	b.n	8002df0 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cd2:	4b64      	ldr	r3, [pc, #400]	@ (8002e64 <xTaskResumeAll+0x1e4>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	6a12      	ldr	r2, [r2, #32]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	69d2      	ldr	r2, [r2, #28]
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	3318      	adds	r3, #24
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d103      	bne.n	8002d08 <xTaskResumeAll+0x88>
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	1e5a      	subs	r2, r3, #1
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	68d2      	ldr	r2, [r2, #12]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	6892      	ldr	r2, [r2, #8]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d103      	bne.n	8002d46 <xTaskResumeAll+0xc6>
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	615a      	str	r2, [r3, #20]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	1e5a      	subs	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f003 f94f 	bl	8005ffc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	2201      	movs	r2, #1
 8002d64:	409a      	lsls	r2, r3
 8002d66:	4b40      	ldr	r3, [pc, #256]	@ (8002e68 <xTaskResumeAll+0x1e8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	4a3e      	ldr	r2, [pc, #248]	@ (8002e68 <xTaskResumeAll+0x1e8>)
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d74:	493d      	ldr	r1, [pc, #244]	@ (8002e6c <xTaskResumeAll+0x1ec>)
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3304      	adds	r3, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	60da      	str	r2, [r3, #12]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	3204      	adds	r2, #4
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	1d1a      	adds	r2, r3, #4
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4a2e      	ldr	r2, [pc, #184]	@ (8002e6c <xTaskResumeAll+0x1ec>)
 8002db4:	441a      	add	r2, r3
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	615a      	str	r2, [r3, #20]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dbe:	492b      	ldr	r1, [pc, #172]	@ (8002e6c <xTaskResumeAll+0x1ec>)
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	1c59      	adds	r1, r3, #1
 8002dce:	4827      	ldr	r0, [pc, #156]	@ (8002e6c <xTaskResumeAll+0x1ec>)
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4403      	add	r3, r0
 8002dda:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de0:	4b23      	ldr	r3, [pc, #140]	@ (8002e70 <xTaskResumeAll+0x1f0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002dea:	4b22      	ldr	r3, [pc, #136]	@ (8002e74 <xTaskResumeAll+0x1f4>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002df0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e64 <xTaskResumeAll+0x1e4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f47f af6c 	bne.w	8002cd2 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e00:	f000 fc50 	bl	80036a4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e04:	4b1c      	ldr	r3, [pc, #112]	@ (8002e78 <xTaskResumeAll+0x1f8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d010      	beq.n	8002e32 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e10:	f000 f858 	bl	8002ec4 <xTaskIncrementTick>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002e1a:	4b16      	ldr	r3, [pc, #88]	@ (8002e74 <xTaskResumeAll+0x1f4>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f1      	bne.n	8002e10 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002e2c:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <xTaskResumeAll+0x1f8>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e32:	4b10      	ldr	r3, [pc, #64]	@ (8002e74 <xTaskResumeAll+0x1f4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e7c <xTaskResumeAll+0x1fc>)
 8002e40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e4e:	f001 f957 	bl	8004100 <vPortExitCritical>

    return xAlreadyYielded;
 8002e52:	69bb      	ldr	r3, [r7, #24]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3720      	adds	r7, #32
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000218 	.word	0x20000218
 8002e60:	200001f0 	.word	0x200001f0
 8002e64:	200001b0 	.word	0x200001b0
 8002e68:	200001f8 	.word	0x200001f8
 8002e6c:	2000011c 	.word	0x2000011c
 8002e70:	20000118 	.word	0x20000118
 8002e74:	20000204 	.word	0x20000204
 8002e78:	20000200 	.word	0x20000200
 8002e7c:	e000ed04 	.word	0xe000ed04

08002e80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002e86:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <xTaskGetTickCount+0x1c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002e8c:	687b      	ldr	r3, [r7, #4]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	200001f4 	.word	0x200001f4

08002ea0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ea6:	f001 f9e9 	bl	800427c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002eae:	4b04      	ldr	r3, [pc, #16]	@ (8002ec0 <xTaskGetTickCountFromISR+0x20>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002eb4:	683b      	ldr	r3, [r7, #0]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200001f4 	.word	0x200001f4

08002ec4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	@ 0x28
 8002ec8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ece:	4b80      	ldr	r3, [pc, #512]	@ (80030d0 <xTaskIncrementTick+0x20c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f040 80f1 	bne.w	80030ba <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ed8:	4b7e      	ldr	r3, [pc, #504]	@ (80030d4 <xTaskIncrementTick+0x210>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ee0:	4a7c      	ldr	r2, [pc, #496]	@ (80030d4 <xTaskIncrementTick+0x210>)
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d121      	bne.n	8002f30 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002eec:	4b7a      	ldr	r3, [pc, #488]	@ (80030d8 <xTaskIncrementTick+0x214>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <xTaskIncrementTick+0x4a>
        __asm volatile
 8002ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	607b      	str	r3, [r7, #4]
    }
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	e7fd      	b.n	8002f0a <xTaskIncrementTick+0x46>
 8002f0e:	4b72      	ldr	r3, [pc, #456]	@ (80030d8 <xTaskIncrementTick+0x214>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	4b71      	ldr	r3, [pc, #452]	@ (80030dc <xTaskIncrementTick+0x218>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a6f      	ldr	r2, [pc, #444]	@ (80030d8 <xTaskIncrementTick+0x214>)
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4a6f      	ldr	r2, [pc, #444]	@ (80030dc <xTaskIncrementTick+0x218>)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b6f      	ldr	r3, [pc, #444]	@ (80030e0 <xTaskIncrementTick+0x21c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	4a6d      	ldr	r2, [pc, #436]	@ (80030e0 <xTaskIncrementTick+0x21c>)
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	f000 fbba 	bl	80036a4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f30:	4b6c      	ldr	r3, [pc, #432]	@ (80030e4 <xTaskIncrementTick+0x220>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a3a      	ldr	r2, [r7, #32]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	f0c0 80aa 	bcc.w	8003090 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f3c:	4b66      	ldr	r3, [pc, #408]	@ (80030d8 <xTaskIncrementTick+0x214>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d104      	bne.n	8002f50 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f46:	4b67      	ldr	r3, [pc, #412]	@ (80030e4 <xTaskIncrementTick+0x220>)
 8002f48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f4c:	601a      	str	r2, [r3, #0]
                    break;
 8002f4e:	e09f      	b.n	8003090 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f50:	4b61      	ldr	r3, [pc, #388]	@ (80030d8 <xTaskIncrementTick+0x214>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002f60:	6a3a      	ldr	r2, [r7, #32]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d203      	bcs.n	8002f70 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f68:	4a5e      	ldr	r2, [pc, #376]	@ (80030e4 <xTaskIncrementTick+0x220>)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002f6e:	e08f      	b.n	8003090 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	68d2      	ldr	r2, [r2, #12]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	6892      	ldr	r2, [r2, #8]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	3304      	adds	r3, #4
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d103      	bne.n	8002f9e <xTaskIncrementTick+0xda>
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	615a      	str	r2, [r3, #20]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	1e5a      	subs	r2, r3, #1
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01e      	beq.n	8002ff4 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	6a12      	ldr	r2, [r2, #32]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	69d2      	ldr	r2, [r2, #28]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	3318      	adds	r3, #24
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d103      	bne.n	8002fe4 <xTaskIncrementTick+0x120>
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6a1a      	ldr	r2, [r3, #32]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	1e5a      	subs	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f003 f800 	bl	8005ffc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	2201      	movs	r2, #1
 8003002:	409a      	lsls	r2, r3
 8003004:	4b38      	ldr	r3, [pc, #224]	@ (80030e8 <xTaskIncrementTick+0x224>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4313      	orrs	r3, r2
 800300a:	4a37      	ldr	r2, [pc, #220]	@ (80030e8 <xTaskIncrementTick+0x224>)
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003012:	4936      	ldr	r1, [pc, #216]	@ (80030ec <xTaskIncrementTick+0x228>)
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3304      	adds	r3, #4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	3204      	adds	r2, #4
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	1d1a      	adds	r2, r3, #4
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4a26      	ldr	r2, [pc, #152]	@ (80030ec <xTaskIncrementTick+0x228>)
 8003052:	441a      	add	r2, r3
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	615a      	str	r2, [r3, #20]
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800305c:	4923      	ldr	r1, [pc, #140]	@ (80030ec <xTaskIncrementTick+0x228>)
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	1c59      	adds	r1, r3, #1
 800306c:	481f      	ldr	r0, [pc, #124]	@ (80030ec <xTaskIncrementTick+0x228>)
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4403      	add	r3, r0
 8003078:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800307e:	4b1c      	ldr	r3, [pc, #112]	@ (80030f0 <xTaskIncrementTick+0x22c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003084:	429a      	cmp	r2, r3
 8003086:	f67f af59 	bls.w	8002f3c <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800308a:	2301      	movs	r3, #1
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800308e:	e755      	b.n	8002f3c <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003090:	4b17      	ldr	r3, [pc, #92]	@ (80030f0 <xTaskIncrementTick+0x22c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003096:	4915      	ldr	r1, [pc, #84]	@ (80030ec <xTaskIncrementTick+0x228>)
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d901      	bls.n	80030ac <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 80030a8:	2301      	movs	r3, #1
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80030ac:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <xTaskIncrementTick+0x230>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b8:	e004      	b.n	80030c4 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80030ba:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <xTaskIncrementTick+0x234>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	4a0d      	ldr	r2, [pc, #52]	@ (80030f8 <xTaskIncrementTick+0x234>)
 80030c2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3728      	adds	r7, #40	@ 0x28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000218 	.word	0x20000218
 80030d4:	200001f4 	.word	0x200001f4
 80030d8:	200001a8 	.word	0x200001a8
 80030dc:	200001ac 	.word	0x200001ac
 80030e0:	20000208 	.word	0x20000208
 80030e4:	20000210 	.word	0x20000210
 80030e8:	200001f8 	.word	0x200001f8
 80030ec:	2000011c 	.word	0x2000011c
 80030f0:	20000118 	.word	0x20000118
 80030f4:	20000204 	.word	0x20000204
 80030f8:	20000200 	.word	0x20000200

080030fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003102:	4b2d      	ldr	r3, [pc, #180]	@ (80031b8 <vTaskSwitchContext+0xbc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800310a:	4b2c      	ldr	r3, [pc, #176]	@ (80031bc <vTaskSwitchContext+0xc0>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003110:	e04e      	b.n	80031b0 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003112:	4b2a      	ldr	r3, [pc, #168]	@ (80031bc <vTaskSwitchContext+0xc0>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003118:	4b29      	ldr	r3, [pc, #164]	@ (80031c0 <vTaskSwitchContext+0xc4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003126:	7afb      	ldrb	r3, [r7, #11]
 8003128:	f1c3 031f 	rsb	r3, r3, #31
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	4925      	ldr	r1, [pc, #148]	@ (80031c4 <vTaskSwitchContext+0xc8>)
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10b      	bne.n	800315a <vTaskSwitchContext+0x5e>
        __asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	607b      	str	r3, [r7, #4]
    }
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	e7fd      	b.n	8003156 <vTaskSwitchContext+0x5a>
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4a17      	ldr	r2, [pc, #92]	@ (80031c4 <vTaskSwitchContext+0xc8>)
 8003166:	4413      	add	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	3308      	adds	r3, #8
 800317c:	429a      	cmp	r2, r3
 800317e:	d104      	bne.n	800318a <vTaskSwitchContext+0x8e>
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a0d      	ldr	r2, [pc, #52]	@ (80031c8 <vTaskSwitchContext+0xcc>)
 8003192:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <vTaskSwitchContext+0xcc>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <vTaskSwitchContext+0xd0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d102      	bne.n	80031a6 <vTaskSwitchContext+0xaa>
 80031a0:	f002 fe8c 	bl	8005ebc <SEGGER_SYSVIEW_OnIdle>
}
 80031a4:	e004      	b.n	80031b0 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80031a6:	4b08      	ldr	r3, [pc, #32]	@ (80031c8 <vTaskSwitchContext+0xcc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f002 fee4 	bl	8005f78 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80031b0:	bf00      	nop
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000218 	.word	0x20000218
 80031bc:	20000204 	.word	0x20000204
 80031c0:	200001f8 	.word	0x200001f8
 80031c4:	2000011c 	.word	0x2000011c
 80031c8:	20000118 	.word	0x20000118
 80031cc:	20000214 	.word	0x20000214

080031d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10b      	bne.n	80031f8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	60fb      	str	r3, [r7, #12]
    }
 80031f2:	bf00      	nop
 80031f4:	bf00      	nop
 80031f6:	e7fd      	b.n	80031f4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031f8:	4b07      	ldr	r3, [pc, #28]	@ (8003218 <vTaskPlaceOnEventList+0x48>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3318      	adds	r3, #24
 80031fe:	4619      	mov	r1, r3
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fe ffa8 	bl	8002156 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003206:	2101      	movs	r1, #1
 8003208:	6838      	ldr	r0, [r7, #0]
 800320a:	f000 fa85 	bl	8003718 <prvAddCurrentTaskToDelayedList>
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000118 	.word	0x20000118

0800321c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10b      	bne.n	8003246 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800322e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	613b      	str	r3, [r7, #16]
    }
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	e7fd      	b.n	8003242 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	4b17      	ldr	r3, [pc, #92]	@ (80032ac <vTaskPlaceOnEventListRestricted+0x90>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	61da      	str	r2, [r3, #28]
 8003254:	4b15      	ldr	r3, [pc, #84]	@ (80032ac <vTaskPlaceOnEventListRestricted+0x90>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	6892      	ldr	r2, [r2, #8]
 800325c:	621a      	str	r2, [r3, #32]
 800325e:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <vTaskPlaceOnEventListRestricted+0x90>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	3218      	adds	r2, #24
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <vTaskPlaceOnEventListRestricted+0x90>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f103 0218 	add.w	r2, r3, #24
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <vTaskPlaceOnEventListRestricted+0x90>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	629a      	str	r2, [r3, #40]	@ 0x28
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003292:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003294:	2024      	movs	r0, #36	@ 0x24
 8003296:	f002 f913 	bl	80054c0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	68b8      	ldr	r0, [r7, #8]
 800329e:	f000 fa3b 	bl	8003718 <prvAddCurrentTaskToDelayedList>
    }
 80032a2:	bf00      	nop
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000118 	.word	0x20000118

080032b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	@ 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10b      	bne.n	80032de <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	60fb      	str	r3, [r7, #12]
    }
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	e7fd      	b.n	80032da <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	6a3a      	ldr	r2, [r7, #32]
 80032ea:	6a12      	ldr	r2, [r2, #32]
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	6a3a      	ldr	r2, [r7, #32]
 80032f4:	69d2      	ldr	r2, [r2, #28]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	3318      	adds	r3, #24
 8003300:	429a      	cmp	r2, r3
 8003302:	d103      	bne.n	800330c <xTaskRemoveFromEventList+0x5c>
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	6a1a      	ldr	r2, [r3, #32]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	2200      	movs	r2, #0
 8003310:	629a      	str	r2, [r3, #40]	@ 0x28
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	1e5a      	subs	r2, r3, #1
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800331c:	4b4b      	ldr	r3, [pc, #300]	@ (800344c <xTaskRemoveFromEventList+0x19c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d162      	bne.n	80033ea <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	6a3a      	ldr	r2, [r7, #32]
 8003330:	68d2      	ldr	r2, [r2, #12]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	6a3a      	ldr	r2, [r7, #32]
 800333a:	6892      	ldr	r2, [r2, #8]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	3304      	adds	r3, #4
 8003346:	429a      	cmp	r2, r3
 8003348:	d103      	bne.n	8003352 <xTaskRemoveFromEventList+0xa2>
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	2200      	movs	r2, #0
 8003356:	615a      	str	r2, [r3, #20]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	1e5a      	subs	r2, r3, #1
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	4618      	mov	r0, r3
 8003366:	f002 fe49 	bl	8005ffc <SEGGER_SYSVIEW_OnTaskStartReady>
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336e:	2201      	movs	r2, #1
 8003370:	409a      	lsls	r2, r3
 8003372:	4b37      	ldr	r3, [pc, #220]	@ (8003450 <xTaskRemoveFromEventList+0x1a0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4313      	orrs	r3, r2
 8003378:	4a35      	ldr	r2, [pc, #212]	@ (8003450 <xTaskRemoveFromEventList+0x1a0>)
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003380:	4934      	ldr	r1, [pc, #208]	@ (8003454 <xTaskRemoveFromEventList+0x1a4>)
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	3304      	adds	r3, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	6a3a      	ldr	r2, [r7, #32]
 80033a6:	3204      	adds	r2, #4
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	1d1a      	adds	r2, r3, #4
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4a25      	ldr	r2, [pc, #148]	@ (8003454 <xTaskRemoveFromEventList+0x1a4>)
 80033c0:	441a      	add	r2, r3
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	615a      	str	r2, [r3, #20]
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ca:	4922      	ldr	r1, [pc, #136]	@ (8003454 <xTaskRemoveFromEventList+0x1a4>)
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	1c59      	adds	r1, r3, #1
 80033da:	481e      	ldr	r0, [pc, #120]	@ (8003454 <xTaskRemoveFromEventList+0x1a4>)
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4403      	add	r3, r0
 80033e6:	6019      	str	r1, [r3, #0]
 80033e8:	e01b      	b.n	8003422 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80033ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <xTaskRemoveFromEventList+0x1a8>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	61da      	str	r2, [r3, #28]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	621a      	str	r2, [r3, #32]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	6a3a      	ldr	r2, [r7, #32]
 8003404:	3218      	adds	r2, #24
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	f103 0218 	add.w	r2, r3, #24
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	4a10      	ldr	r2, [pc, #64]	@ (8003458 <xTaskRemoveFromEventList+0x1a8>)
 8003416:	629a      	str	r2, [r3, #40]	@ 0x28
 8003418:	4b0f      	ldr	r3, [pc, #60]	@ (8003458 <xTaskRemoveFromEventList+0x1a8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3301      	adds	r3, #1
 800341e:	4a0e      	ldr	r2, [pc, #56]	@ (8003458 <xTaskRemoveFromEventList+0x1a8>)
 8003420:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <xTaskRemoveFromEventList+0x1ac>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342c:	429a      	cmp	r2, r3
 800342e:	d905      	bls.n	800343c <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003430:	2301      	movs	r3, #1
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003434:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <xTaskRemoveFromEventList+0x1b0>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e001      	b.n	8003440 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 800343c:	2300      	movs	r3, #0
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003442:	4618      	mov	r0, r3
 8003444:	3728      	adds	r7, #40	@ 0x28
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000218 	.word	0x20000218
 8003450:	200001f8 	.word	0x200001f8
 8003454:	2000011c 	.word	0x2000011c
 8003458:	200001b0 	.word	0x200001b0
 800345c:	20000118 	.word	0x20000118
 8003460:	20000204 	.word	0x20000204

08003464 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800346c:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <vTaskInternalSetTimeOutState+0x24>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003474:	4b05      	ldr	r3, [pc, #20]	@ (800348c <vTaskInternalSetTimeOutState+0x28>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	605a      	str	r2, [r3, #4]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	20000208 	.word	0x20000208
 800348c:	200001f4 	.word	0x200001f4

08003490 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	613b      	str	r3, [r7, #16]
    }
 80034b2:	bf00      	nop
 80034b4:	bf00      	nop
 80034b6:	e7fd      	b.n	80034b4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	60fb      	str	r3, [r7, #12]
    }
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	e7fd      	b.n	80034d2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80034d6:	f000 fde1 	bl	800409c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80034da:	4b1f      	ldr	r3, [pc, #124]	@ (8003558 <xTaskCheckForTimeOut+0xc8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034f2:	d102      	bne.n	80034fa <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	e026      	b.n	8003548 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b17      	ldr	r3, [pc, #92]	@ (800355c <xTaskCheckForTimeOut+0xcc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d00a      	beq.n	800351c <xTaskCheckForTimeOut+0x8c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	429a      	cmp	r2, r3
 800350e:	d305      	bcc.n	800351c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003510:	2301      	movs	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e015      	b.n	8003548 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	429a      	cmp	r2, r3
 8003524:	d20b      	bcs.n	800353e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	1ad2      	subs	r2, r2, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ff96 	bl	8003464 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003538:	2300      	movs	r3, #0
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	e004      	b.n	8003548 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003544:	2301      	movs	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003548:	f000 fdda 	bl	8004100 <vPortExitCritical>

    return xReturn;
 800354c:	69fb      	ldr	r3, [r7, #28]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3720      	adds	r7, #32
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	200001f4 	.word	0x200001f4
 800355c:	20000208 	.word	0x20000208

08003560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003564:	4b03      	ldr	r3, [pc, #12]	@ (8003574 <vTaskMissedYield+0x14>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]
}
 800356a:	bf00      	nop
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	20000204 	.word	0x20000204

08003578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003580:	f000 f852 	bl	8003628 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003584:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <prvIdleTask+0x28>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d9f9      	bls.n	8003580 <prvIdleTask+0x8>
            {
                taskYIELD();
 800358c:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <prvIdleTask+0x2c>)
 800358e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800359c:	e7f0      	b.n	8003580 <prvIdleTask+0x8>
 800359e:	bf00      	nop
 80035a0:	2000011c 	.word	0x2000011c
 80035a4:	e000ed04 	.word	0xe000ed04

080035a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035ae:	2300      	movs	r3, #0
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	e00c      	b.n	80035ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4a12      	ldr	r2, [pc, #72]	@ (8003608 <prvInitialiseTaskLists+0x60>)
 80035c0:	4413      	add	r3, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe fd9a 	bl	80020fc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3301      	adds	r3, #1
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d9ef      	bls.n	80035b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80035d4:	480d      	ldr	r0, [pc, #52]	@ (800360c <prvInitialiseTaskLists+0x64>)
 80035d6:	f7fe fd91 	bl	80020fc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80035da:	480d      	ldr	r0, [pc, #52]	@ (8003610 <prvInitialiseTaskLists+0x68>)
 80035dc:	f7fe fd8e 	bl	80020fc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80035e0:	480c      	ldr	r0, [pc, #48]	@ (8003614 <prvInitialiseTaskLists+0x6c>)
 80035e2:	f7fe fd8b 	bl	80020fc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80035e6:	480c      	ldr	r0, [pc, #48]	@ (8003618 <prvInitialiseTaskLists+0x70>)
 80035e8:	f7fe fd88 	bl	80020fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80035ec:	480b      	ldr	r0, [pc, #44]	@ (800361c <prvInitialiseTaskLists+0x74>)
 80035ee:	f7fe fd85 	bl	80020fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80035f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <prvInitialiseTaskLists+0x78>)
 80035f4:	4a05      	ldr	r2, [pc, #20]	@ (800360c <prvInitialiseTaskLists+0x64>)
 80035f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <prvInitialiseTaskLists+0x7c>)
 80035fa:	4a05      	ldr	r2, [pc, #20]	@ (8003610 <prvInitialiseTaskLists+0x68>)
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	2000011c 	.word	0x2000011c
 800360c:	20000180 	.word	0x20000180
 8003610:	20000194 	.word	0x20000194
 8003614:	200001b0 	.word	0x200001b0
 8003618:	200001c4 	.word	0x200001c4
 800361c:	200001dc 	.word	0x200001dc
 8003620:	200001a8 	.word	0x200001a8
 8003624:	200001ac 	.word	0x200001ac

08003628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800362e:	e019      	b.n	8003664 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003630:	f000 fd34 	bl	800409c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003634:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <prvCheckTasksWaitingTermination+0x50>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3304      	adds	r3, #4
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe fdc1 	bl	80021c8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003646:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <prvCheckTasksWaitingTermination+0x54>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3b01      	subs	r3, #1
 800364c:	4a0b      	ldr	r2, [pc, #44]	@ (800367c <prvCheckTasksWaitingTermination+0x54>)
 800364e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <prvCheckTasksWaitingTermination+0x58>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3b01      	subs	r3, #1
 8003656:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <prvCheckTasksWaitingTermination+0x58>)
 8003658:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800365a:	f000 fd51 	bl	8004100 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f810 	bl	8003684 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003664:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <prvCheckTasksWaitingTermination+0x58>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e1      	bne.n	8003630 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	200001c4 	.word	0x200001c4
 800367c:	200001f0 	.word	0x200001f0
 8003680:	200001d8 	.word	0x200001d8

08003684 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fef1 	bl	8004478 <vPortFree>
            vPortFree( pxTCB );
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 feee 	bl	8004478 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036a8:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <prvResetNextTaskUnblockTime+0x30>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d104      	bne.n	80036bc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80036b2:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <prvResetNextTaskUnblockTime+0x34>)
 80036b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036b8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80036ba:	e005      	b.n	80036c8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036bc:	4b05      	ldr	r3, [pc, #20]	@ (80036d4 <prvResetNextTaskUnblockTime+0x30>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a04      	ldr	r2, [pc, #16]	@ (80036d8 <prvResetNextTaskUnblockTime+0x34>)
 80036c6:	6013      	str	r3, [r2, #0]
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	200001a8 	.word	0x200001a8
 80036d8:	20000210 	.word	0x20000210

080036dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80036e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003710 <xTaskGetSchedulerState+0x34>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d102      	bne.n	80036f0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80036ea:	2301      	movs	r3, #1
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	e008      	b.n	8003702 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036f0:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <xTaskGetSchedulerState+0x38>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80036f8:	2302      	movs	r3, #2
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	e001      	b.n	8003702 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003702:	687b      	ldr	r3, [r7, #4]
    }
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	200001fc 	.word	0x200001fc
 8003714:	20000218 	.word	0x20000218

08003718 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003722:	4b36      	ldr	r3, [pc, #216]	@ (80037fc <prvAddCurrentTaskToDelayedList+0xe4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003728:	4b35      	ldr	r3, [pc, #212]	@ (8003800 <prvAddCurrentTaskToDelayedList+0xe8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3304      	adds	r3, #4
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fd4a 	bl	80021c8 <uxListRemove>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10b      	bne.n	8003752 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800373a:	4b31      	ldr	r3, [pc, #196]	@ (8003800 <prvAddCurrentTaskToDelayedList+0xe8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	2201      	movs	r2, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43da      	mvns	r2, r3
 8003748:	4b2e      	ldr	r3, [pc, #184]	@ (8003804 <prvAddCurrentTaskToDelayedList+0xec>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4013      	ands	r3, r2
 800374e:	4a2d      	ldr	r2, [pc, #180]	@ (8003804 <prvAddCurrentTaskToDelayedList+0xec>)
 8003750:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003758:	d124      	bne.n	80037a4 <prvAddCurrentTaskToDelayedList+0x8c>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d021      	beq.n	80037a4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003760:	4b29      	ldr	r3, [pc, #164]	@ (8003808 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	4b26      	ldr	r3, [pc, #152]	@ (8003800 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	609a      	str	r2, [r3, #8]
 800376e:	4b24      	ldr	r3, [pc, #144]	@ (8003800 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	6892      	ldr	r2, [r2, #8]
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	4b21      	ldr	r3, [pc, #132]	@ (8003800 <prvAddCurrentTaskToDelayedList+0xe8>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	3204      	adds	r2, #4
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	4b1e      	ldr	r3, [pc, #120]	@ (8003800 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	1d1a      	adds	r2, r3, #4
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	609a      	str	r2, [r3, #8]
 800378e:	4b1c      	ldr	r3, [pc, #112]	@ (8003800 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1d      	ldr	r2, [pc, #116]	@ (8003808 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003794:	615a      	str	r2, [r3, #20]
 8003796:	4b1c      	ldr	r3, [pc, #112]	@ (8003808 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3301      	adds	r3, #1
 800379c:	4a1a      	ldr	r2, [pc, #104]	@ (8003808 <prvAddCurrentTaskToDelayedList+0xf0>)
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80037a2:	e026      	b.n	80037f2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037ac:	4b14      	ldr	r3, [pc, #80]	@ (8003800 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d209      	bcs.n	80037d0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037bc:	4b13      	ldr	r3, [pc, #76]	@ (800380c <prvAddCurrentTaskToDelayedList+0xf4>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003800 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3304      	adds	r3, #4
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f7fe fcc4 	bl	8002156 <vListInsert>
}
 80037ce:	e010      	b.n	80037f2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003810 <prvAddCurrentTaskToDelayedList+0xf8>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003800 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3304      	adds	r3, #4
 80037da:	4619      	mov	r1, r3
 80037dc:	4610      	mov	r0, r2
 80037de:	f7fe fcba 	bl	8002156 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80037e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <prvAddCurrentTaskToDelayedList+0xfc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d202      	bcs.n	80037f2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80037ec:	4a09      	ldr	r2, [pc, #36]	@ (8003814 <prvAddCurrentTaskToDelayedList+0xfc>)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6013      	str	r3, [r2, #0]
}
 80037f2:	bf00      	nop
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200001f4 	.word	0x200001f4
 8003800:	20000118 	.word	0x20000118
 8003804:	200001f8 	.word	0x200001f8
 8003808:	200001dc 	.word	0x200001dc
 800380c:	200001ac 	.word	0x200001ac
 8003810:	200001a8 	.word	0x200001a8
 8003814:	20000210 	.word	0x20000210

08003818 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003822:	f000 fa4f 	bl	8003cc4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003826:	4b12      	ldr	r3, [pc, #72]	@ (8003870 <xTimerCreateTimerTask+0x58>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800382e:	4b11      	ldr	r3, [pc, #68]	@ (8003874 <xTimerCreateTimerTask+0x5c>)
 8003830:	9301      	str	r3, [sp, #4]
 8003832:	2302      	movs	r3, #2
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	2300      	movs	r3, #0
 8003838:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800383c:	490e      	ldr	r1, [pc, #56]	@ (8003878 <xTimerCreateTimerTask+0x60>)
 800383e:	480f      	ldr	r0, [pc, #60]	@ (800387c <xTimerCreateTimerTask+0x64>)
 8003840:	f7ff f824 	bl	800288c <xTaskCreate>
 8003844:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10b      	bne.n	8003864 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	603b      	str	r3, [r7, #0]
    }
 800385e:	bf00      	nop
 8003860:	bf00      	nop
 8003862:	e7fd      	b.n	8003860 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003864:	687b      	ldr	r3, [r7, #4]
    }
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	2000024c 	.word	0x2000024c
 8003874:	20000250 	.word	0x20000250
 8003878:	08006d28 	.word	0x08006d28
 800387c:	08003925 	.word	0x08003925

08003880 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800388c:	e008      	b.n	80038a0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	4413      	add	r3, r2
 8003896:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	18d1      	adds	r1, r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f8df 	bl	8003a70 <prvInsertTimerInActiveList>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1ea      	bne.n	800388e <prvReloadTimer+0xe>
        }
    }
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ce:	4b14      	ldr	r3, [pc, #80]	@ (8003920 <prvProcessExpiredTimer+0x5c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3304      	adds	r3, #4
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fc73 	bl	80021c8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f7ff ffc3 	bl	8003880 <prvReloadTimer>
 80038fa:	e008      	b.n	800390e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	4798      	blx	r3
    }
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000244 	.word	0x20000244

08003924 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800392c:	f107 0308 	add.w	r3, r7, #8
 8003930:	4618      	mov	r0, r3
 8003932:	f000 f859 	bl	80039e8 <prvGetNextExpireTime>
 8003936:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4619      	mov	r1, r3
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f805 	bl	800394c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003942:	f000 f8d7 	bl	8003af4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003946:	bf00      	nop
 8003948:	e7f0      	b.n	800392c <prvTimerTask+0x8>
	...

0800394c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003956:	f7ff f985 	bl	8002c64 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800395a:	f107 0308 	add.w	r3, r7, #8
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f866 	bl	8003a30 <prvSampleTimeNow>
 8003964:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d130      	bne.n	80039ce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10a      	bne.n	8003988 <prvProcessTimerOrBlockTask+0x3c>
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	429a      	cmp	r2, r3
 8003978:	d806      	bhi.n	8003988 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800397a:	f7ff f981 	bl	8002c80 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800397e:	68f9      	ldr	r1, [r7, #12]
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ff9f 	bl	80038c4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003986:	e024      	b.n	80039d2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d008      	beq.n	80039a0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800398e:	4b13      	ldr	r3, [pc, #76]	@ (80039dc <prvProcessTimerOrBlockTask+0x90>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <prvProcessTimerOrBlockTask+0x50>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <prvProcessTimerOrBlockTask+0x52>
 800399c:	2300      	movs	r3, #0
 800399e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80039a0:	4b0f      	ldr	r3, [pc, #60]	@ (80039e0 <prvProcessTimerOrBlockTask+0x94>)
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	4619      	mov	r1, r3
 80039ae:	f7fe ff39 	bl	8002824 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80039b2:	f7ff f965 	bl	8002c80 <xTaskResumeAll>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80039bc:	4b09      	ldr	r3, [pc, #36]	@ (80039e4 <prvProcessTimerOrBlockTask+0x98>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	f3bf 8f6f 	isb	sy
    }
 80039cc:	e001      	b.n	80039d2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80039ce:	f7ff f957 	bl	8002c80 <xTaskResumeAll>
    }
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000248 	.word	0x20000248
 80039e0:	2000024c 	.word	0x2000024c
 80039e4:	e000ed04 	.word	0xe000ed04

080039e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039f0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a2c <prvGetNextExpireTime+0x44>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <prvGetNextExpireTime+0x16>
 80039fa:	2201      	movs	r2, #1
 80039fc:	e000      	b.n	8003a00 <prvGetNextExpireTime+0x18>
 80039fe:	2200      	movs	r2, #0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d105      	bne.n	8003a18 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a0c:	4b07      	ldr	r3, [pc, #28]	@ (8003a2c <prvGetNextExpireTime+0x44>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	e001      	b.n	8003a1c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
    }
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000244 	.word	0x20000244

08003a30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a38:	f7ff fa22 	bl	8002e80 <xTaskGetTickCount>
 8003a3c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <prvSampleTimeNow+0x3c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d205      	bcs.n	8003a54 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003a48:	f000 f916 	bl	8003c78 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e002      	b.n	8003a5a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003a5a:	4a04      	ldr	r2, [pc, #16]	@ (8003a6c <prvSampleTimeNow+0x3c>)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003a60:	68fb      	ldr	r3, [r7, #12]
    }
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000254 	.word	0x20000254

08003a70 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d812      	bhi.n	8003abc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d302      	bcc.n	8003aaa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e01b      	b.n	8003ae2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003aaa:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <prvInsertTimerInActiveList+0x7c>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f7fe fb4e 	bl	8002156 <vListInsert>
 8003aba:	e012      	b.n	8003ae2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d206      	bcs.n	8003ad2 <prvInsertTimerInActiveList+0x62>
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d302      	bcc.n	8003ad2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e007      	b.n	8003ae2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ad2:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <prvInsertTimerInActiveList+0x80>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	4619      	mov	r1, r3
 8003adc:	4610      	mov	r0, r2
 8003ade:	f7fe fb3a 	bl	8002156 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003ae2:	697b      	ldr	r3, [r7, #20]
    }
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000248 	.word	0x20000248
 8003af0:	20000244 	.word	0x20000244

08003af4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003afa:	e0a9      	b.n	8003c50 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f2c0 80a6 	blt.w	8003c50 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe fb57 	bl	80021c8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ff87 	bl	8003a30 <prvSampleTimeNow>
 8003b22:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	f200 808e 	bhi.w	8003c4a <prvProcessReceivedCommands+0x156>
 8003b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b34 <prvProcessReceivedCommands+0x40>)
 8003b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003b59 	.word	0x08003b59
 8003b3c:	08003bc1 	.word	0x08003bc1
 8003b40:	08003bd5 	.word	0x08003bd5
 8003b44:	08003c21 	.word	0x08003c21
 8003b48:	08003b59 	.word	0x08003b59
 8003b4c:	08003b59 	.word	0x08003b59
 8003b50:	08003bc1 	.word	0x08003bc1
 8003b54:	08003bd5 	.word	0x08003bd5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	18d1      	adds	r1, r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	69f8      	ldr	r0, [r7, #28]
 8003b78:	f7ff ff7a 	bl	8003a70 <prvInsertTimerInActiveList>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d065      	beq.n	8003c4e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	4413      	add	r3, r2
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	69f8      	ldr	r0, [r7, #28]
 8003b9e:	f7ff fe6f 	bl	8003880 <prvReloadTimer>
 8003ba2:	e008      	b.n	8003bb6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	69f8      	ldr	r0, [r7, #28]
 8003bbc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003bbe:	e046      	b.n	8003c4e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003bd2:	e03d      	b.n	8003c50 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10b      	bne.n	8003c0c <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	617b      	str	r3, [r7, #20]
    }
 8003c06:	bf00      	nop
 8003c08:	bf00      	nop
 8003c0a:	e7fd      	b.n	8003c08 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	699a      	ldr	r2, [r3, #24]
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	18d1      	adds	r1, r2, r3
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	69f8      	ldr	r0, [r7, #28]
 8003c1a:	f7ff ff29 	bl	8003a70 <prvInsertTimerInActiveList>
                        break;
 8003c1e:	e017      	b.n	8003c50 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003c2e:	69f8      	ldr	r0, [r7, #28]
 8003c30:	f000 fc22 	bl	8004478 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003c34:	e00c      	b.n	8003c50 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003c48:	e002      	b.n	8003c50 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <prvProcessReceivedCommands+0x15c>
                        break;
 8003c4e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c50:	4b08      	ldr	r3, [pc, #32]	@ (8003c74 <prvProcessReceivedCommands+0x180>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f107 0108 	add.w	r1, r7, #8
 8003c58:	2200      	movs	r2, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fbe8 	bl	8002430 <xQueueReceive>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f47f af4a 	bne.w	8003afc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	2000024c 	.word	0x2000024c

08003c78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c7e:	e009      	b.n	8003c94 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c80:	4b0e      	ldr	r3, [pc, #56]	@ (8003cbc <prvSwitchTimerLists+0x44>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003c8a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c8e:	6838      	ldr	r0, [r7, #0]
 8003c90:	f7ff fe18 	bl	80038c4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c94:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <prvSwitchTimerLists+0x44>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003c9e:	4b07      	ldr	r3, [pc, #28]	@ (8003cbc <prvSwitchTimerLists+0x44>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003ca4:	4b06      	ldr	r3, [pc, #24]	@ (8003cc0 <prvSwitchTimerLists+0x48>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	@ (8003cbc <prvSwitchTimerLists+0x44>)
 8003caa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003cac:	4a04      	ldr	r2, [pc, #16]	@ (8003cc0 <prvSwitchTimerLists+0x48>)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6013      	str	r3, [r2, #0]
    }
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000244 	.word	0x20000244
 8003cc0:	20000248 	.word	0x20000248

08003cc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003cc8:	f000 f9e8 	bl	800409c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003ccc:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <prvCheckForValidListAndQueue+0x54>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d11d      	bne.n	8003d10 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003cd4:	4811      	ldr	r0, [pc, #68]	@ (8003d1c <prvCheckForValidListAndQueue+0x58>)
 8003cd6:	f7fe fa11 	bl	80020fc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003cda:	4811      	ldr	r0, [pc, #68]	@ (8003d20 <prvCheckForValidListAndQueue+0x5c>)
 8003cdc:	f7fe fa0e 	bl	80020fc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003ce0:	4b10      	ldr	r3, [pc, #64]	@ (8003d24 <prvCheckForValidListAndQueue+0x60>)
 8003ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8003d1c <prvCheckForValidListAndQueue+0x58>)
 8003ce4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003ce6:	4b10      	ldr	r3, [pc, #64]	@ (8003d28 <prvCheckForValidListAndQueue+0x64>)
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d20 <prvCheckForValidListAndQueue+0x5c>)
 8003cea:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003cec:	2200      	movs	r2, #0
 8003cee:	210c      	movs	r1, #12
 8003cf0:	200a      	movs	r0, #10
 8003cf2:	f7fe fb25 	bl	8002340 <xQueueGenericCreate>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4a07      	ldr	r2, [pc, #28]	@ (8003d18 <prvCheckForValidListAndQueue+0x54>)
 8003cfa:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003cfc:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <prvCheckForValidListAndQueue+0x54>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d04:	4b04      	ldr	r3, [pc, #16]	@ (8003d18 <prvCheckForValidListAndQueue+0x54>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4908      	ldr	r1, [pc, #32]	@ (8003d2c <prvCheckForValidListAndQueue+0x68>)
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fd32 	bl	8002774 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d10:	f000 f9f6 	bl	8004100 <vPortExitCritical>
    }
 8003d14:	bf00      	nop
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	2000024c 	.word	0x2000024c
 8003d1c:	2000021c 	.word	0x2000021c
 8003d20:	20000230 	.word	0x20000230
 8003d24:	20000244 	.word	0x20000244
 8003d28:	20000248 	.word	0x20000248
 8003d2c:	08006d30 	.word	0x08006d30

08003d30 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3b04      	subs	r3, #4
 8003d40:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d48:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3b04      	subs	r3, #4
 8003d4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f023 0201 	bic.w	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3b04      	subs	r3, #4
 8003d5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d60:	4a0c      	ldr	r2, [pc, #48]	@ (8003d94 <pxPortInitialiseStack+0x64>)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3b14      	subs	r3, #20
 8003d6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3b04      	subs	r3, #4
 8003d76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f06f 0202 	mvn.w	r2, #2
 8003d7e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3b20      	subs	r3, #32
 8003d84:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d86:	68fb      	ldr	r3, [r7, #12]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	08003d99 	.word	0x08003d99

08003d98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003da2:	4b13      	ldr	r3, [pc, #76]	@ (8003df0 <prvTaskExitError+0x58>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003daa:	d00b      	beq.n	8003dc4 <prvTaskExitError+0x2c>
        __asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	60fb      	str	r3, [r7, #12]
    }
 8003dbe:	bf00      	nop
 8003dc0:	bf00      	nop
 8003dc2:	e7fd      	b.n	8003dc0 <prvTaskExitError+0x28>
        __asm volatile
 8003dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	60bb      	str	r3, [r7, #8]
    }
 8003dd6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003dd8:	bf00      	nop
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0fc      	beq.n	8003dda <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000010 	.word	0x20000010
	...

08003e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e00:	4b07      	ldr	r3, [pc, #28]	@ (8003e20 <pxCurrentTCBConst2>)
 8003e02:	6819      	ldr	r1, [r3, #0]
 8003e04:	6808      	ldr	r0, [r1, #0]
 8003e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0a:	f380 8809 	msr	PSP, r0
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f380 8811 	msr	BASEPRI, r0
 8003e1a:	4770      	bx	lr
 8003e1c:	f3af 8000 	nop.w

08003e20 <pxCurrentTCBConst2>:
 8003e20:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop

08003e28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e28:	4808      	ldr	r0, [pc, #32]	@ (8003e4c <prvPortStartFirstTask+0x24>)
 8003e2a:	6800      	ldr	r0, [r0, #0]
 8003e2c:	6800      	ldr	r0, [r0, #0]
 8003e2e:	f380 8808 	msr	MSP, r0
 8003e32:	f04f 0000 	mov.w	r0, #0
 8003e36:	f380 8814 	msr	CONTROL, r0
 8003e3a:	b662      	cpsie	i
 8003e3c:	b661      	cpsie	f
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	df00      	svc	0
 8003e48:	bf00      	nop
 8003e4a:	0000      	.short	0x0000
 8003e4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop

08003e54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e5a:	4b47      	ldr	r3, [pc, #284]	@ (8003f78 <xPortStartScheduler+0x124>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a47      	ldr	r2, [pc, #284]	@ (8003f7c <xPortStartScheduler+0x128>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d10b      	bne.n	8003e7c <xPortStartScheduler+0x28>
        __asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	613b      	str	r3, [r7, #16]
    }
 8003e76:	bf00      	nop
 8003e78:	bf00      	nop
 8003e7a:	e7fd      	b.n	8003e78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8003f78 <xPortStartScheduler+0x124>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a3f      	ldr	r2, [pc, #252]	@ (8003f80 <xPortStartScheduler+0x12c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d10b      	bne.n	8003e9e <xPortStartScheduler+0x4a>
        __asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	60fb      	str	r3, [r7, #12]
    }
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	e7fd      	b.n	8003e9a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e9e:	4b39      	ldr	r3, [pc, #228]	@ (8003f84 <xPortStartScheduler+0x130>)
 8003ea0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	22ff      	movs	r2, #255	@ 0xff
 8003eae:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	4b31      	ldr	r3, [pc, #196]	@ (8003f88 <xPortStartScheduler+0x134>)
 8003ec4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ec6:	4b31      	ldr	r3, [pc, #196]	@ (8003f8c <xPortStartScheduler+0x138>)
 8003ec8:	2207      	movs	r2, #7
 8003eca:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ecc:	e009      	b.n	8003ee2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003ece:	4b2f      	ldr	r3, [pc, #188]	@ (8003f8c <xPortStartScheduler+0x138>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f8c <xPortStartScheduler+0x138>)
 8003ed6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eea:	2b80      	cmp	r3, #128	@ 0x80
 8003eec:	d0ef      	beq.n	8003ece <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003eee:	4b27      	ldr	r3, [pc, #156]	@ (8003f8c <xPortStartScheduler+0x138>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f1c3 0307 	rsb	r3, r3, #7
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d00b      	beq.n	8003f12 <xPortStartScheduler+0xbe>
        __asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	60bb      	str	r3, [r7, #8]
    }
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	e7fd      	b.n	8003f0e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f12:	4b1e      	ldr	r3, [pc, #120]	@ (8003f8c <xPortStartScheduler+0x138>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	4a1c      	ldr	r2, [pc, #112]	@ (8003f8c <xPortStartScheduler+0x138>)
 8003f1a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f8c <xPortStartScheduler+0x138>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f24:	4a19      	ldr	r2, [pc, #100]	@ (8003f8c <xPortStartScheduler+0x138>)
 8003f26:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f30:	4b17      	ldr	r3, [pc, #92]	@ (8003f90 <xPortStartScheduler+0x13c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a16      	ldr	r2, [pc, #88]	@ (8003f90 <xPortStartScheduler+0x13c>)
 8003f36:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f3a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f3c:	4b14      	ldr	r3, [pc, #80]	@ (8003f90 <xPortStartScheduler+0x13c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a13      	ldr	r2, [pc, #76]	@ (8003f90 <xPortStartScheduler+0x13c>)
 8003f42:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003f46:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f48:	f000 f968 	bl	800421c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f4c:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <xPortStartScheduler+0x140>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f52:	f000 f987 	bl	8004264 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f56:	4b10      	ldr	r3, [pc, #64]	@ (8003f98 <xPortStartScheduler+0x144>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8003f98 <xPortStartScheduler+0x144>)
 8003f5c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003f60:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f62:	f7ff ff61 	bl	8003e28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f66:	f7ff f8c9 	bl	80030fc <vTaskSwitchContext>
    prvTaskExitError();
 8003f6a:	f7ff ff15 	bl	8003d98 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	e000ed00 	.word	0xe000ed00
 8003f7c:	410fc271 	.word	0x410fc271
 8003f80:	410fc270 	.word	0x410fc270
 8003f84:	e000e400 	.word	0xe000e400
 8003f88:	20000258 	.word	0x20000258
 8003f8c:	2000025c 	.word	0x2000025c
 8003f90:	e000ed20 	.word	0xe000ed20
 8003f94:	20000010 	.word	0x20000010
 8003f98:	e000ef34 	.word	0xe000ef34

08003f9c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fa2:	4b38      	ldr	r3, [pc, #224]	@ (8004084 <vInitPrioGroupValue+0xe8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a38      	ldr	r2, [pc, #224]	@ (8004088 <vInitPrioGroupValue+0xec>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d10b      	bne.n	8003fc4 <vInitPrioGroupValue+0x28>
        __asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	613b      	str	r3, [r7, #16]
    }
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	e7fd      	b.n	8003fc0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8004084 <vInitPrioGroupValue+0xe8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a30      	ldr	r2, [pc, #192]	@ (800408c <vInitPrioGroupValue+0xf0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d10b      	bne.n	8003fe6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	60fb      	str	r3, [r7, #12]
    }
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	e7fd      	b.n	8003fe2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8004090 <vInitPrioGroupValue+0xf4>)
 8003fe8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	22ff      	movs	r2, #255	@ 0xff
 8003ff6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004008:	b2da      	uxtb	r2, r3
 800400a:	4b22      	ldr	r3, [pc, #136]	@ (8004094 <vInitPrioGroupValue+0xf8>)
 800400c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800400e:	4b22      	ldr	r3, [pc, #136]	@ (8004098 <vInitPrioGroupValue+0xfc>)
 8004010:	2207      	movs	r2, #7
 8004012:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004014:	e009      	b.n	800402a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004016:	4b20      	ldr	r3, [pc, #128]	@ (8004098 <vInitPrioGroupValue+0xfc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3b01      	subs	r3, #1
 800401c:	4a1e      	ldr	r2, [pc, #120]	@ (8004098 <vInitPrioGroupValue+0xfc>)
 800401e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	b2db      	uxtb	r3, r3
 8004028:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004032:	2b80      	cmp	r3, #128	@ 0x80
 8004034:	d0ef      	beq.n	8004016 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004036:	4b18      	ldr	r3, [pc, #96]	@ (8004098 <vInitPrioGroupValue+0xfc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1c3 0307 	rsb	r3, r3, #7
 800403e:	2b04      	cmp	r3, #4
 8004040:	d00b      	beq.n	800405a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	60bb      	str	r3, [r7, #8]
    }
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	e7fd      	b.n	8004056 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800405a:	4b0f      	ldr	r3, [pc, #60]	@ (8004098 <vInitPrioGroupValue+0xfc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	4a0d      	ldr	r2, [pc, #52]	@ (8004098 <vInitPrioGroupValue+0xfc>)
 8004062:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004064:	4b0c      	ldr	r3, [pc, #48]	@ (8004098 <vInitPrioGroupValue+0xfc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800406c:	4a0a      	ldr	r2, [pc, #40]	@ (8004098 <vInitPrioGroupValue+0xfc>)
 800406e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	e000ed00 	.word	0xe000ed00
 8004088:	410fc271 	.word	0x410fc271
 800408c:	410fc270 	.word	0x410fc270
 8004090:	e000e400 	.word	0xe000e400
 8004094:	20000258 	.word	0x20000258
 8004098:	2000025c 	.word	0x2000025c

0800409c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
        __asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	607b      	str	r3, [r7, #4]
    }
 80040b4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80040b6:	4b10      	ldr	r3, [pc, #64]	@ (80040f8 <vPortEnterCritical+0x5c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3301      	adds	r3, #1
 80040bc:	4a0e      	ldr	r2, [pc, #56]	@ (80040f8 <vPortEnterCritical+0x5c>)
 80040be:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80040c0:	4b0d      	ldr	r3, [pc, #52]	@ (80040f8 <vPortEnterCritical+0x5c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d110      	bne.n	80040ea <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040c8:	4b0c      	ldr	r3, [pc, #48]	@ (80040fc <vPortEnterCritical+0x60>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <vPortEnterCritical+0x4e>
        __asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	603b      	str	r3, [r7, #0]
    }
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	e7fd      	b.n	80040e6 <vPortEnterCritical+0x4a>
    }
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000010 	.word	0x20000010
 80040fc:	e000ed04 	.word	0xe000ed04

08004100 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004106:	4b12      	ldr	r3, [pc, #72]	@ (8004150 <vPortExitCritical+0x50>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10b      	bne.n	8004126 <vPortExitCritical+0x26>
        __asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	607b      	str	r3, [r7, #4]
    }
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	e7fd      	b.n	8004122 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004126:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <vPortExitCritical+0x50>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3b01      	subs	r3, #1
 800412c:	4a08      	ldr	r2, [pc, #32]	@ (8004150 <vPortExitCritical+0x50>)
 800412e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004130:	4b07      	ldr	r3, [pc, #28]	@ (8004150 <vPortExitCritical+0x50>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d105      	bne.n	8004144 <vPortExitCritical+0x44>
 8004138:	2300      	movs	r3, #0
 800413a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004142:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	20000010 	.word	0x20000010
	...

08004160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004160:	f3ef 8009 	mrs	r0, PSP
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	4b15      	ldr	r3, [pc, #84]	@ (80041c0 <pxCurrentTCBConst>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	f01e 0f10 	tst.w	lr, #16
 8004170:	bf08      	it	eq
 8004172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417a:	6010      	str	r0, [r2, #0]
 800417c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004184:	f380 8811 	msr	BASEPRI, r0
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f7fe ffb4 	bl	80030fc <vTaskSwitchContext>
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	f380 8811 	msr	BASEPRI, r0
 800419c:	bc09      	pop	{r0, r3}
 800419e:	6819      	ldr	r1, [r3, #0]
 80041a0:	6808      	ldr	r0, [r1, #0]
 80041a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a6:	f01e 0f10 	tst.w	lr, #16
 80041aa:	bf08      	it	eq
 80041ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041b0:	f380 8809 	msr	PSP, r0
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	f3af 8000 	nop.w

080041c0 <pxCurrentTCBConst>:
 80041c0:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop

080041c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
        __asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	607b      	str	r3, [r7, #4]
    }
 80041e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80041e2:	f001 fdf1 	bl	8005dc8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80041e6:	f7fe fe6d 	bl	8002ec4 <xTaskIncrementTick>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d006      	beq.n	80041fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80041f0:	f001 fe48 	bl	8005e84 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041f4:	4b08      	ldr	r3, [pc, #32]	@ (8004218 <SysTick_Handler+0x50>)
 80041f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	e001      	b.n	8004202 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80041fe:	f001 fe25 	bl	8005e4c <SEGGER_SYSVIEW_RecordExitISR>
 8004202:	2300      	movs	r3, #0
 8004204:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f383 8811 	msr	BASEPRI, r3
    }
 800420c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004220:	4b0b      	ldr	r3, [pc, #44]	@ (8004250 <vPortSetupTimerInterrupt+0x34>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004226:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <vPortSetupTimerInterrupt+0x38>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800422c:	4b0a      	ldr	r3, [pc, #40]	@ (8004258 <vPortSetupTimerInterrupt+0x3c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a0a      	ldr	r2, [pc, #40]	@ (800425c <vPortSetupTimerInterrupt+0x40>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	4a09      	ldr	r2, [pc, #36]	@ (8004260 <vPortSetupTimerInterrupt+0x44>)
 800423a:	3b01      	subs	r3, #1
 800423c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800423e:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <vPortSetupTimerInterrupt+0x34>)
 8004240:	2207      	movs	r2, #7
 8004242:	601a      	str	r2, [r3, #0]
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	e000e010 	.word	0xe000e010
 8004254:	e000e018 	.word	0xe000e018
 8004258:	20000000 	.word	0x20000000
 800425c:	10624dd3 	.word	0x10624dd3
 8004260:	e000e014 	.word	0xe000e014

08004264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004264:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004274 <vPortEnableVFP+0x10>
 8004268:	6801      	ldr	r1, [r0, #0]
 800426a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800426e:	6001      	str	r1, [r0, #0]
 8004270:	4770      	bx	lr
 8004272:	0000      	.short	0x0000
 8004274:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop

0800427c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004282:	f3ef 8305 	mrs	r3, IPSR
 8004286:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b0f      	cmp	r3, #15
 800428c:	d915      	bls.n	80042ba <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800428e:	4a18      	ldr	r2, [pc, #96]	@ (80042f0 <vPortValidateInterruptPriority+0x74>)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004298:	4b16      	ldr	r3, [pc, #88]	@ (80042f4 <vPortValidateInterruptPriority+0x78>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	7afa      	ldrb	r2, [r7, #11]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d20b      	bcs.n	80042ba <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	607b      	str	r3, [r7, #4]
    }
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	e7fd      	b.n	80042b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042ba:	4b0f      	ldr	r3, [pc, #60]	@ (80042f8 <vPortValidateInterruptPriority+0x7c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042c2:	4b0e      	ldr	r3, [pc, #56]	@ (80042fc <vPortValidateInterruptPriority+0x80>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d90b      	bls.n	80042e2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	603b      	str	r3, [r7, #0]
    }
 80042dc:	bf00      	nop
 80042de:	bf00      	nop
 80042e0:	e7fd      	b.n	80042de <vPortValidateInterruptPriority+0x62>
    }
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	e000e3f0 	.word	0xe000e3f0
 80042f4:	20000258 	.word	0x20000258
 80042f8:	e000ed0c 	.word	0xe000ed0c
 80042fc:	2000025c 	.word	0x2000025c

08004300 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08a      	sub	sp, #40	@ 0x28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800430c:	f7fe fcaa 	bl	8002c64 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004310:	4b54      	ldr	r3, [pc, #336]	@ (8004464 <pvPortMalloc+0x164>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004318:	f000 f90c 	bl	8004534 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d012      	beq.n	8004348 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004322:	2208      	movs	r2, #8
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	3308      	adds	r3, #8
 800432e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	43db      	mvns	r3, r3
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	429a      	cmp	r2, r3
 8004338:	d804      	bhi.n	8004344 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	4413      	add	r3, r2
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	e001      	b.n	8004348 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	db71      	blt.n	8004432 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d06e      	beq.n	8004432 <pvPortMalloc+0x132>
 8004354:	4b44      	ldr	r3, [pc, #272]	@ (8004468 <pvPortMalloc+0x168>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	429a      	cmp	r2, r3
 800435c:	d869      	bhi.n	8004432 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800435e:	4b43      	ldr	r3, [pc, #268]	@ (800446c <pvPortMalloc+0x16c>)
 8004360:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004362:	4b42      	ldr	r3, [pc, #264]	@ (800446c <pvPortMalloc+0x16c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004368:	e004      	b.n	8004374 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	d903      	bls.n	8004386 <pvPortMalloc+0x86>
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f1      	bne.n	800436a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004386:	4b37      	ldr	r3, [pc, #220]	@ (8004464 <pvPortMalloc+0x164>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438c:	429a      	cmp	r2, r3
 800438e:	d050      	beq.n	8004432 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2208      	movs	r2, #8
 8004396:	4413      	add	r3, r2
 8004398:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	1ad2      	subs	r2, r2, r3
 80043aa:	2308      	movs	r3, #8
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d920      	bls.n	80043f4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00b      	beq.n	80043dc <pvPortMalloc+0xdc>
        __asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	613b      	str	r3, [r7, #16]
    }
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	e7fd      	b.n	80043d8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	1ad2      	subs	r2, r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043ee:	6978      	ldr	r0, [r7, #20]
 80043f0:	f000 f8fc 	bl	80045ec <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004468 <pvPortMalloc+0x168>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004468 <pvPortMalloc+0x168>)
 8004400:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004402:	4b19      	ldr	r3, [pc, #100]	@ (8004468 <pvPortMalloc+0x168>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b1a      	ldr	r3, [pc, #104]	@ (8004470 <pvPortMalloc+0x170>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d203      	bcs.n	8004416 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800440e:	4b16      	ldr	r3, [pc, #88]	@ (8004468 <pvPortMalloc+0x168>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a17      	ldr	r2, [pc, #92]	@ (8004470 <pvPortMalloc+0x170>)
 8004414:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004428:	4b12      	ldr	r3, [pc, #72]	@ (8004474 <pvPortMalloc+0x174>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3301      	adds	r3, #1
 800442e:	4a11      	ldr	r2, [pc, #68]	@ (8004474 <pvPortMalloc+0x174>)
 8004430:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004432:	f7fe fc25 	bl	8002c80 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00b      	beq.n	8004458 <pvPortMalloc+0x158>
        __asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	60fb      	str	r3, [r7, #12]
    }
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <pvPortMalloc+0x154>
    return pvReturn;
 8004458:	69fb      	ldr	r3, [r7, #28]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3728      	adds	r7, #40	@ 0x28
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20012e68 	.word	0x20012e68
 8004468:	20012e6c 	.word	0x20012e6c
 800446c:	20012e60 	.word	0x20012e60
 8004470:	20012e70 	.word	0x20012e70
 8004474:	20012e74 	.word	0x20012e74

08004478 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d04b      	beq.n	8004522 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800448a:	2308      	movs	r3, #8
 800448c:	425b      	negs	r3, r3
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4413      	add	r3, r2
 8004492:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	db0b      	blt.n	80044b8 <vPortFree+0x40>
        __asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	60fb      	str	r3, [r7, #12]
    }
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	e7fd      	b.n	80044b4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00b      	beq.n	80044d8 <vPortFree+0x60>
        __asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	60bb      	str	r3, [r7, #8]
    }
 80044d2:	bf00      	nop
 80044d4:	bf00      	nop
 80044d6:	e7fd      	b.n	80044d4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	0fdb      	lsrs	r3, r3, #31
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01c      	beq.n	8004522 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d118      	bne.n	8004522 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80044fc:	f7fe fbb2 	bl	8002c64 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	4b09      	ldr	r3, [pc, #36]	@ (800452c <vPortFree+0xb4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4413      	add	r3, r2
 800450a:	4a08      	ldr	r2, [pc, #32]	@ (800452c <vPortFree+0xb4>)
 800450c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800450e:	6938      	ldr	r0, [r7, #16]
 8004510:	f000 f86c 	bl	80045ec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004514:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <vPortFree+0xb8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3301      	adds	r3, #1
 800451a:	4a05      	ldr	r2, [pc, #20]	@ (8004530 <vPortFree+0xb8>)
 800451c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800451e:	f7fe fbaf 	bl	8002c80 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004522:	bf00      	nop
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20012e6c 	.word	0x20012e6c
 8004530:	20012e78 	.word	0x20012e78

08004534 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800453a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800453e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004540:	4b25      	ldr	r3, [pc, #148]	@ (80045d8 <prvHeapInit+0xa4>)
 8004542:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00c      	beq.n	8004568 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3307      	adds	r3, #7
 8004552:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0307 	bic.w	r3, r3, #7
 800455a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	4a1d      	ldr	r2, [pc, #116]	@ (80045d8 <prvHeapInit+0xa4>)
 8004564:	4413      	add	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800456c:	4a1b      	ldr	r2, [pc, #108]	@ (80045dc <prvHeapInit+0xa8>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004572:	4b1a      	ldr	r3, [pc, #104]	@ (80045dc <prvHeapInit+0xa8>)
 8004574:	2200      	movs	r2, #0
 8004576:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4413      	add	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004580:	2208      	movs	r2, #8
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0307 	bic.w	r3, r3, #7
 800458e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a13      	ldr	r2, [pc, #76]	@ (80045e0 <prvHeapInit+0xac>)
 8004594:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004596:	4b12      	ldr	r3, [pc, #72]	@ (80045e0 <prvHeapInit+0xac>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2200      	movs	r2, #0
 800459c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800459e:	4b10      	ldr	r3, [pc, #64]	@ (80045e0 <prvHeapInit+0xac>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	1ad2      	subs	r2, r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045b4:	4b0a      	ldr	r3, [pc, #40]	@ (80045e0 <prvHeapInit+0xac>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a08      	ldr	r2, [pc, #32]	@ (80045e4 <prvHeapInit+0xb0>)
 80045c2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a07      	ldr	r2, [pc, #28]	@ (80045e8 <prvHeapInit+0xb4>)
 80045ca:	6013      	str	r3, [r2, #0]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	20000260 	.word	0x20000260
 80045dc:	20012e60 	.word	0x20012e60
 80045e0:	20012e68 	.word	0x20012e68
 80045e4:	20012e70 	.word	0x20012e70
 80045e8:	20012e6c 	.word	0x20012e6c

080045ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045f4:	4b28      	ldr	r3, [pc, #160]	@ (8004698 <prvInsertBlockIntoFreeList+0xac>)
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e002      	b.n	8004600 <prvInsertBlockIntoFreeList+0x14>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	429a      	cmp	r2, r3
 8004608:	d8f7      	bhi.n	80045fa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	4413      	add	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	429a      	cmp	r2, r3
 800461a:	d108      	bne.n	800462e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	441a      	add	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	441a      	add	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d118      	bne.n	8004674 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4b15      	ldr	r3, [pc, #84]	@ (800469c <prvInsertBlockIntoFreeList+0xb0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d00d      	beq.n	800466a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	441a      	add	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e008      	b.n	800467c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800466a:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <prvInsertBlockIntoFreeList+0xb0>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e003      	b.n	800467c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d002      	beq.n	800468a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20012e60 	.word	0x20012e60
 800469c:	20012e68 	.word	0x20012e68

080046a0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80046a4:	4803      	ldr	r0, [pc, #12]	@ (80046b4 <_cbSendSystemDesc+0x14>)
 80046a6:	f001 fb39 	bl	8005d1c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80046aa:	4803      	ldr	r0, [pc, #12]	@ (80046b8 <_cbSendSystemDesc+0x18>)
 80046ac:	f001 fb36 	bl	8005d1c <SEGGER_SYSVIEW_SendSysDesc>
}
 80046b0:	bf00      	nop
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	08006d38 	.word	0x08006d38
 80046b8:	08006d7c 	.word	0x08006d7c

080046bc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80046c0:	4b06      	ldr	r3, [pc, #24]	@ (80046dc <SEGGER_SYSVIEW_Conf+0x20>)
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	4b05      	ldr	r3, [pc, #20]	@ (80046dc <SEGGER_SYSVIEW_Conf+0x20>)
 80046c6:	6819      	ldr	r1, [r3, #0]
 80046c8:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <SEGGER_SYSVIEW_Conf+0x24>)
 80046ca:	4a06      	ldr	r2, [pc, #24]	@ (80046e4 <SEGGER_SYSVIEW_Conf+0x28>)
 80046cc:	f000 fea4 	bl	8005418 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80046d0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80046d4:	f000 fee4 	bl	80054a0 <SEGGER_SYSVIEW_SetRAMBase>
}
 80046d8:	bf00      	nop
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20000000 	.word	0x20000000
 80046e0:	080046a1 	.word	0x080046a1
 80046e4:	08006e18 	.word	0x08006e18

080046e8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80046e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80046ee:	2300      	movs	r3, #0
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	e033      	b.n	800475c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80046f4:	491e      	ldr	r1, [pc, #120]	@ (8004770 <_cbSendTaskList+0x88>)
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	491a      	ldr	r1, [pc, #104]	@ (8004770 <_cbSendTaskList+0x88>)
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	3304      	adds	r3, #4
 8004714:	6819      	ldr	r1, [r3, #0]
 8004716:	4c16      	ldr	r4, [pc, #88]	@ (8004770 <_cbSendTaskList+0x88>)
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4423      	add	r3, r4
 8004724:	3308      	adds	r3, #8
 8004726:	681c      	ldr	r4, [r3, #0]
 8004728:	4d11      	ldr	r5, [pc, #68]	@ (8004770 <_cbSendTaskList+0x88>)
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	442b      	add	r3, r5
 8004736:	330c      	adds	r3, #12
 8004738:	681d      	ldr	r5, [r3, #0]
 800473a:	4e0d      	ldr	r6, [pc, #52]	@ (8004770 <_cbSendTaskList+0x88>)
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4433      	add	r3, r6
 8004748:	3310      	adds	r3, #16
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	462b      	mov	r3, r5
 8004750:	4622      	mov	r2, r4
 8004752:	f000 f8bd 	bl	80048d0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3301      	adds	r3, #1
 800475a:	607b      	str	r3, [r7, #4]
 800475c:	4b05      	ldr	r3, [pc, #20]	@ (8004774 <_cbSendTaskList+0x8c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	429a      	cmp	r2, r3
 8004764:	d3c6      	bcc.n	80046f4 <_cbSendTaskList+0xc>
  }
}
 8004766:	bf00      	nop
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004770:	20012e7c 	.word	0x20012e7c
 8004774:	20012f1c 	.word	0x20012f1c

08004778 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004780:	f7fe fb8e 	bl	8002ea0 <xTaskGetTickCountFromISR>
 8004784:	4603      	mov	r3, r0
 8004786:	2200      	movs	r2, #0
 8004788:	469a      	mov	sl, r3
 800478a:	4693      	mov	fp, r2
 800478c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	f04f 0a00 	mov.w	sl, #0
 800479c:	f04f 0b00 	mov.w	fp, #0
 80047a0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80047a4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80047a8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80047ac:	4652      	mov	r2, sl
 80047ae:	465b      	mov	r3, fp
 80047b0:	1a14      	subs	r4, r2, r0
 80047b2:	eb63 0501 	sbc.w	r5, r3, r1
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	00ab      	lsls	r3, r5, #2
 80047c0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80047c4:	00a2      	lsls	r2, r4, #2
 80047c6:	4614      	mov	r4, r2
 80047c8:	461d      	mov	r5, r3
 80047ca:	eb14 0800 	adds.w	r8, r4, r0
 80047ce:	eb45 0901 	adc.w	r9, r5, r1
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047e6:	4690      	mov	r8, r2
 80047e8:	4699      	mov	r9, r3
 80047ea:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80047ee:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80047f2:	4610      	mov	r0, r2
 80047f4:	4619      	mov	r1, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004800 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800480e:	2205      	movs	r2, #5
 8004810:	492b      	ldr	r1, [pc, #172]	@ (80048c0 <SYSVIEW_AddTask+0xc0>)
 8004812:	68b8      	ldr	r0, [r7, #8]
 8004814:	f001 ff90 	bl	8006738 <memcmp>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d04b      	beq.n	80048b6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800481e:	4b29      	ldr	r3, [pc, #164]	@ (80048c4 <SYSVIEW_AddTask+0xc4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b07      	cmp	r3, #7
 8004824:	d903      	bls.n	800482e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004826:	4828      	ldr	r0, [pc, #160]	@ (80048c8 <SYSVIEW_AddTask+0xc8>)
 8004828:	f001 fd20 	bl	800626c <SEGGER_SYSVIEW_Warn>
    return;
 800482c:	e044      	b.n	80048b8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800482e:	4b25      	ldr	r3, [pc, #148]	@ (80048c4 <SYSVIEW_AddTask+0xc4>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4926      	ldr	r1, [pc, #152]	@ (80048cc <SYSVIEW_AddTask+0xcc>)
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004842:	4b20      	ldr	r3, [pc, #128]	@ (80048c4 <SYSVIEW_AddTask+0xc4>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4921      	ldr	r1, [pc, #132]	@ (80048cc <SYSVIEW_AddTask+0xcc>)
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	3304      	adds	r3, #4
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004858:	4b1a      	ldr	r3, [pc, #104]	@ (80048c4 <SYSVIEW_AddTask+0xc4>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	491b      	ldr	r1, [pc, #108]	@ (80048cc <SYSVIEW_AddTask+0xcc>)
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	3308      	adds	r3, #8
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800486e:	4b15      	ldr	r3, [pc, #84]	@ (80048c4 <SYSVIEW_AddTask+0xc4>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4916      	ldr	r1, [pc, #88]	@ (80048cc <SYSVIEW_AddTask+0xcc>)
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	330c      	adds	r3, #12
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004884:	4b0f      	ldr	r3, [pc, #60]	@ (80048c4 <SYSVIEW_AddTask+0xc4>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4910      	ldr	r1, [pc, #64]	@ (80048cc <SYSVIEW_AddTask+0xcc>)
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	3310      	adds	r3, #16
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800489a:	4b0a      	ldr	r3, [pc, #40]	@ (80048c4 <SYSVIEW_AddTask+0xc4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3301      	adds	r3, #1
 80048a0:	4a08      	ldr	r2, [pc, #32]	@ (80048c4 <SYSVIEW_AddTask+0xc4>)
 80048a2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f80e 	bl	80048d0 <SYSVIEW_SendTaskInfo>
 80048b4:	e000      	b.n	80048b8 <SYSVIEW_AddTask+0xb8>
    return;
 80048b6:	bf00      	nop

}
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	08006d8c 	.word	0x08006d8c
 80048c4:	20012f1c 	.word	0x20012f1c
 80048c8:	08006d94 	.word	0x08006d94
 80048cc:	20012e7c 	.word	0x20012e7c

080048d0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	@ 0x28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80048de:	f107 0310 	add.w	r3, r7, #16
 80048e2:	2218      	movs	r2, #24
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 ff36 	bl	8006758 <memset>
  TaskInfo.TaskID     = TaskID;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004900:	f107 0310 	add.w	r3, r7, #16
 8004904:	4618      	mov	r0, r3
 8004906:	f001 f911 	bl	8005b2c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800490a:	bf00      	nop
 800490c:	3728      	adds	r7, #40	@ 0x28
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800491a:	4b26      	ldr	r3, [pc, #152]	@ (80049b4 <_DoInit+0xa0>)
 800491c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800491e:	22a8      	movs	r2, #168	@ 0xa8
 8004920:	2100      	movs	r1, #0
 8004922:	6838      	ldr	r0, [r7, #0]
 8004924:	f001 ff18 	bl	8006758 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2203      	movs	r2, #3
 800492c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2203      	movs	r2, #3
 8004932:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	4a20      	ldr	r2, [pc, #128]	@ (80049b8 <_DoInit+0xa4>)
 8004938:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	4a1f      	ldr	r2, [pc, #124]	@ (80049bc <_DoInit+0xa8>)
 800493e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004946:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2200      	movs	r2, #0
 8004952:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	4a16      	ldr	r2, [pc, #88]	@ (80049b8 <_DoInit+0xa4>)
 800495e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	4a17      	ldr	r2, [pc, #92]	@ (80049c0 <_DoInit+0xac>)
 8004964:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2210      	movs	r2, #16
 800496a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2200      	movs	r2, #0
 8004970:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2200      	movs	r2, #0
 800497c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800497e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
 8004986:	e00c      	b.n	80049a2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f1c3 030f 	rsb	r3, r3, #15
 800498e:	4a0d      	ldr	r2, [pc, #52]	@ (80049c4 <_DoInit+0xb0>)
 8004990:	5cd1      	ldrb	r1, [r2, r3]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4413      	add	r3, r2
 8004998:	460a      	mov	r2, r1
 800499a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3301      	adds	r3, #1
 80049a0:	607b      	str	r3, [r7, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b0f      	cmp	r3, #15
 80049a6:	d9ef      	bls.n	8004988 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80049a8:	f3bf 8f5f 	dmb	sy
}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20012f20 	.word	0x20012f20
 80049b8:	08006de4 	.word	0x08006de4
 80049bc:	20012fc8 	.word	0x20012fc8
 80049c0:	200133c8 	.word	0x200133c8
 80049c4:	08006e20 	.word	0x08006e20

080049c8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	@ 0x28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80049d4:	2300      	movs	r3, #0
 80049d6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d905      	bls.n	80049f8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f6:	e007      	b.n	8004a08 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	69b9      	ldr	r1, [r7, #24]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	1acb      	subs	r3, r1, r3
 8004a02:	4413      	add	r3, r2
 8004a04:	3b01      	subs	r3, #1
 8004a06:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a12:	4293      	cmp	r3, r2
 8004a14:	bf28      	it	cs
 8004a16:	4613      	movcs	r3, r2
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	bf28      	it	cs
 8004a22:	4613      	movcs	r3, r2
 8004a24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	6978      	ldr	r0, [r7, #20]
 8004a36:	f001 fef2 	bl	800681e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004a3a:	6a3a      	ldr	r2, [r7, #32]
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	4413      	add	r3, r2
 8004a40:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a46:	4413      	add	r3, r2
 8004a48:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	4413      	add	r3, r2
 8004a58:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d101      	bne.n	8004a68 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004a68:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1b2      	bne.n	80049de <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004a78:	6a3b      	ldr	r3, [r7, #32]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3728      	adds	r7, #40	@ 0x28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b088      	sub	sp, #32
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d911      	bls.n	8004aca <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	6938      	ldr	r0, [r7, #16]
 8004ab6:	f001 feb2 	bl	800681e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004aba:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	441a      	add	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004ac8:	e01f      	b.n	8004b0a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	6938      	ldr	r0, [r7, #16]
 8004ade:	f001 fe9e 	bl	800681e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	4413      	add	r3, r2
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4619      	mov	r1, r3
 8004afa:	6938      	ldr	r0, [r7, #16]
 8004afc:	f001 fe8f 	bl	800681e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b00:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	60da      	str	r2, [r3, #12]
}
 8004b0a:	bf00      	nop
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004b12:	b480      	push	{r7}
 8004b14:	b087      	sub	sp, #28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d808      	bhi.n	8004b40 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad2      	subs	r2, r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4413      	add	r3, r2
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	e004      	b.n	8004b4a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004b4a:	697b      	ldr	r3, [r7, #20]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08c      	sub	sp, #48	@ 0x30
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004b64:	4b3e      	ldr	r3, [pc, #248]	@ (8004c60 <SEGGER_RTT_ReadNoLock+0x108>)
 8004b66:	623b      	str	r3, [r7, #32]
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b53      	cmp	r3, #83	@ 0x53
 8004b70:	d001      	beq.n	8004b76 <SEGGER_RTT_ReadNoLock+0x1e>
 8004b72:	f7ff fecf 	bl	8004914 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4413      	add	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	3360      	adds	r3, #96	@ 0x60
 8004b82:	4a37      	ldr	r2, [pc, #220]	@ (8004c60 <SEGGER_RTT_ReadNoLock+0x108>)
 8004b84:	4413      	add	r3, r2
 8004b86:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d92b      	bls.n	8004bfc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	bf28      	it	cs
 8004bb6:	4613      	movcs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc0:	4413      	add	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	6939      	ldr	r1, [r7, #16]
 8004bc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bca:	f001 fe28 	bl	800681e <memcpy>
    NumBytesRead += NumBytesRem;
 8004bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	4413      	add	r3, r2
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004be6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	4413      	add	r3, r2
 8004bec:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d101      	bne.n	8004bfc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	bf28      	it	cs
 8004c0c:	4613      	movcs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d019      	beq.n	8004c4a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1c:	4413      	add	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	6939      	ldr	r1, [r7, #16]
 8004c24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c26:	f001 fdfa 	bl	800681e <memcpy>
    NumBytesRead += NumBytesRem;
 8004c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4413      	add	r3, r2
 8004c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	4413      	add	r3, r2
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	4413      	add	r3, r2
 8004c48:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c54:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3730      	adds	r7, #48	@ 0x30
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20012f20 	.word	0x20012f20

08004c64 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	4613      	mov	r3, r2
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	4413      	add	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	4a1f      	ldr	r2, [pc, #124]	@ (8004d00 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004c82:	4413      	add	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d029      	beq.n	8004ce2 <SEGGER_RTT_WriteNoLock+0x7e>
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d82e      	bhi.n	8004cf0 <SEGGER_RTT_WriteNoLock+0x8c>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <SEGGER_RTT_WriteNoLock+0x38>
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d013      	beq.n	8004cc2 <SEGGER_RTT_WriteNoLock+0x5e>
 8004c9a:	e029      	b.n	8004cf0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004c9c:	6978      	ldr	r0, [r7, #20]
 8004c9e:	f7ff ff38 	bl	8004b12 <_GetAvailWriteSpace>
 8004ca2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d202      	bcs.n	8004cb2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004cb0:	e021      	b.n	8004cf6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	69b9      	ldr	r1, [r7, #24]
 8004cba:	6978      	ldr	r0, [r7, #20]
 8004cbc:	f7ff fee1 	bl	8004a82 <_WriteNoCheck>
    break;
 8004cc0:	e019      	b.n	8004cf6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004cc2:	6978      	ldr	r0, [r7, #20]
 8004cc4:	f7ff ff25 	bl	8004b12 <_GetAvailWriteSpace>
 8004cc8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	bf28      	it	cs
 8004cd2:	4613      	movcs	r3, r2
 8004cd4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	69b9      	ldr	r1, [r7, #24]
 8004cda:	6978      	ldr	r0, [r7, #20]
 8004cdc:	f7ff fed1 	bl	8004a82 <_WriteNoCheck>
    break;
 8004ce0:	e009      	b.n	8004cf6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	69b9      	ldr	r1, [r7, #24]
 8004ce6:	6978      	ldr	r0, [r7, #20]
 8004ce8:	f7ff fe6e 	bl	80049c8 <_WriteBlocking>
 8004cec:	61f8      	str	r0, [r7, #28]
    break;
 8004cee:	e002      	b.n	8004cf6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61fb      	str	r3, [r7, #28]
    break;
 8004cf4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20012f20 	.word	0x20012f20

08004d04 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004d10:	4b0e      	ldr	r3, [pc, #56]	@ (8004d4c <SEGGER_RTT_Write+0x48>)
 8004d12:	61fb      	str	r3, [r7, #28]
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b53      	cmp	r3, #83	@ 0x53
 8004d1c:	d001      	beq.n	8004d22 <SEGGER_RTT_Write+0x1e>
 8004d1e:	f7ff fdf9 	bl	8004914 <_DoInit>
  SEGGER_RTT_LOCK();
 8004d22:	f3ef 8311 	mrs	r3, BASEPRI
 8004d26:	f04f 0120 	mov.w	r1, #32
 8004d2a:	f381 8811 	msr	BASEPRI, r1
 8004d2e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff ff95 	bl	8004c64 <SEGGER_RTT_WriteNoLock>
 8004d3a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004d42:	697b      	ldr	r3, [r7, #20]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3720      	adds	r7, #32
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20012f20 	.word	0x20012f20

08004d50 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e54 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b53      	cmp	r3, #83	@ 0x53
 8004d6a:	d001      	beq.n	8004d70 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004d6c:	f7ff fdd2 	bl	8004914 <_DoInit>
  SEGGER_RTT_LOCK();
 8004d70:	f3ef 8311 	mrs	r3, BASEPRI
 8004d74:	f04f 0120 	mov.w	r1, #32
 8004d78:	f381 8811 	msr	BASEPRI, r1
 8004d7c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d7e:	4b35      	ldr	r3, [pc, #212]	@ (8004e54 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004d80:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004d86:	6939      	ldr	r1, [r7, #16]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4413      	add	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	440b      	add	r3, r1
 8004d96:	3304      	adds	r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3301      	adds	r3, #1
 8004da2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	dbeb      	blt.n	8004d86 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004dae:	e000      	b.n	8004db2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004db0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	da3f      	bge.n	8004e3c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004dbc:	6939      	ldr	r1, [r7, #16]
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	4413      	add	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	440b      	add	r3, r1
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004dd0:	6939      	ldr	r1, [r7, #16]
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	4413      	add	r3, r2
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	440b      	add	r3, r1
 8004de0:	3304      	adds	r3, #4
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004de6:	6939      	ldr	r1, [r7, #16]
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	440b      	add	r3, r1
 8004df4:	3320      	adds	r3, #32
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004dfa:	6939      	ldr	r1, [r7, #16]
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	4413      	add	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	440b      	add	r3, r1
 8004e08:	3328      	adds	r3, #40	@ 0x28
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004e0e:	6939      	ldr	r1, [r7, #16]
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3324      	adds	r3, #36	@ 0x24
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004e22:	6939      	ldr	r1, [r7, #16]
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	440b      	add	r3, r1
 8004e30:	332c      	adds	r3, #44	@ 0x2c
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e36:	f3bf 8f5f 	dmb	sy
 8004e3a:	e002      	b.n	8004e42 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004e3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e40:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004e48:	69fb      	ldr	r3, [r7, #28]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20012f20 	.word	0x20012f20

08004e58 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	@ 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004e66:	4b21      	ldr	r3, [pc, #132]	@ (8004eec <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004e68:	623b      	str	r3, [r7, #32]
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b53      	cmp	r3, #83	@ 0x53
 8004e72:	d001      	beq.n	8004e78 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004e74:	f7ff fd4e 	bl	8004914 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e78:	4b1c      	ldr	r3, [pc, #112]	@ (8004eec <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004e7a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d82c      	bhi.n	8004edc <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004e82:	f3ef 8311 	mrs	r3, BASEPRI
 8004e86:	f04f 0120 	mov.w	r1, #32
 8004e8a:	f381 8811 	msr	BASEPRI, r1
 8004e8e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4613      	mov	r3, r2
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	3360      	adds	r3, #96	@ 0x60
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00e      	beq.n	8004ec6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eca:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ecc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eda:	e002      	b.n	8004ee2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004edc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3728      	adds	r7, #40	@ 0x28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	20012f20 	.word	0x20012f20

08004ef0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d105      	bne.n	8004f0e <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	60fa      	str	r2, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	e022      	b.n	8004f54 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	60fa      	str	r2, [r7, #12]
 8004f18:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b80      	cmp	r3, #128	@ 0x80
 8004f1e:	d90a      	bls.n	8004f36 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004f20:	2380      	movs	r3, #128	@ 0x80
 8004f22:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004f24:	e007      	b.n	8004f36 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	1c53      	adds	r3, r2, #1
 8004f2a:	60bb      	str	r3, [r7, #8]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1c59      	adds	r1, r3, #1
 8004f30:	60f9      	str	r1, [r7, #12]
 8004f32:	7812      	ldrb	r2, [r2, #0]
 8004f34:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	1e5a      	subs	r2, r3, #1
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <_EncodeStr+0x58>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1ee      	bne.n	8004f26 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004f54:	68fb      	ldr	r3, [r7, #12]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3307      	adds	r3, #7
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004f82:	4b34      	ldr	r3, [pc, #208]	@ (8005054 <_HandleIncomingPacket+0xd8>)
 8004f84:	7e1b      	ldrb	r3, [r3, #24]
 8004f86:	4618      	mov	r0, r3
 8004f88:	1cfb      	adds	r3, r7, #3
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	f7ff fde3 	bl	8004b58 <SEGGER_RTT_ReadNoLock>
 8004f92:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d057      	beq.n	800504a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	2b80      	cmp	r3, #128	@ 0x80
 8004f9e:	d031      	beq.n	8005004 <_HandleIncomingPacket+0x88>
 8004fa0:	2b80      	cmp	r3, #128	@ 0x80
 8004fa2:	dc40      	bgt.n	8005026 <_HandleIncomingPacket+0xaa>
 8004fa4:	2b07      	cmp	r3, #7
 8004fa6:	dc15      	bgt.n	8004fd4 <_HandleIncomingPacket+0x58>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	dd3c      	ble.n	8005026 <_HandleIncomingPacket+0xaa>
 8004fac:	3b01      	subs	r3, #1
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d839      	bhi.n	8005026 <_HandleIncomingPacket+0xaa>
 8004fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb8 <_HandleIncomingPacket+0x3c>)
 8004fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb8:	08004fdb 	.word	0x08004fdb
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	08004fe7 	.word	0x08004fe7
 8004fc4:	08004fed 	.word	0x08004fed
 8004fc8:	08004ff3 	.word	0x08004ff3
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	08004fff 	.word	0x08004fff
 8004fd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fd6:	d033      	beq.n	8005040 <_HandleIncomingPacket+0xc4>
 8004fd8:	e025      	b.n	8005026 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004fda:	f000 fc2d 	bl	8005838 <SEGGER_SYSVIEW_Start>
      break;
 8004fde:	e034      	b.n	800504a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004fe0:	f000 fce4 	bl	80059ac <SEGGER_SYSVIEW_Stop>
      break;
 8004fe4:	e031      	b.n	800504a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004fe6:	f000 febd 	bl	8005d64 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004fea:	e02e      	b.n	800504a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004fec:	f000 fe82 	bl	8005cf4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004ff0:	e02b      	b.n	800504a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004ff2:	f000 fd01 	bl	80059f8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004ff6:	e028      	b.n	800504a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004ff8:	f001 f8fa 	bl	80061f0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004ffc:	e025      	b.n	800504a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004ffe:	f001 f8d9 	bl	80061b4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005002:	e022      	b.n	800504a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005004:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <_HandleIncomingPacket+0xd8>)
 8005006:	7e1b      	ldrb	r3, [r3, #24]
 8005008:	4618      	mov	r0, r3
 800500a:	1cfb      	adds	r3, r7, #3
 800500c:	2201      	movs	r2, #1
 800500e:	4619      	mov	r1, r3
 8005010:	f7ff fda2 	bl	8004b58 <SEGGER_RTT_ReadNoLock>
 8005014:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d013      	beq.n	8005044 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	4618      	mov	r0, r3
 8005020:	f001 f83e 	bl	80060a0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005024:	e00e      	b.n	8005044 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	b25b      	sxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	da0c      	bge.n	8005048 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800502e:	4b09      	ldr	r3, [pc, #36]	@ (8005054 <_HandleIncomingPacket+0xd8>)
 8005030:	7e1b      	ldrb	r3, [r3, #24]
 8005032:	4618      	mov	r0, r3
 8005034:	1cfb      	adds	r3, r7, #3
 8005036:	2201      	movs	r2, #1
 8005038:	4619      	mov	r1, r3
 800503a:	f7ff fd8d 	bl	8004b58 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800503e:	e003      	b.n	8005048 <_HandleIncomingPacket+0xcc>
      break;
 8005040:	bf00      	nop
 8005042:	e002      	b.n	800504a <_HandleIncomingPacket+0xce>
      break;
 8005044:	bf00      	nop
 8005046:	e000      	b.n	800504a <_HandleIncomingPacket+0xce>
      break;
 8005048:	bf00      	nop
    }
  }
}
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	200143e0 	.word	0x200143e0

08005058 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b08c      	sub	sp, #48	@ 0x30
 800505c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800505e:	2301      	movs	r3, #1
 8005060:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005062:	1d3b      	adds	r3, r7, #4
 8005064:	3301      	adds	r3, #1
 8005066:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800506c:	4b31      	ldr	r3, [pc, #196]	@ (8005134 <_TrySendOverflowPacket+0xdc>)
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005072:	e00b      	b.n	800508c <_TrySendOverflowPacket+0x34>
 8005074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005076:	b2da      	uxtb	r2, r3
 8005078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507a:	1c59      	adds	r1, r3, #1
 800507c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800507e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005088:	09db      	lsrs	r3, r3, #7
 800508a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800508c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005090:	d8f0      	bhi.n	8005074 <_TrySendOverflowPacket+0x1c>
 8005092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005098:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80050a2:	4b25      	ldr	r3, [pc, #148]	@ (8005138 <_TrySendOverflowPacket+0xe0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80050a8:	4b22      	ldr	r3, [pc, #136]	@ (8005134 <_TrySendOverflowPacket+0xdc>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	623b      	str	r3, [r7, #32]
 80050ba:	e00b      	b.n	80050d4 <_TrySendOverflowPacket+0x7c>
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	1c59      	adds	r1, r3, #1
 80050c4:	6279      	str	r1, [r7, #36]	@ 0x24
 80050c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	09db      	lsrs	r3, r3, #7
 80050d2:	623b      	str	r3, [r7, #32]
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80050d8:	d8f0      	bhi.n	80050bc <_TrySendOverflowPacket+0x64>
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	627a      	str	r2, [r7, #36]	@ 0x24
 80050e0:	6a3a      	ldr	r2, [r7, #32]
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80050ea:	4b12      	ldr	r3, [pc, #72]	@ (8005134 <_TrySendOverflowPacket+0xdc>)
 80050ec:	785b      	ldrb	r3, [r3, #1]
 80050ee:	4618      	mov	r0, r3
 80050f0:	1d3b      	adds	r3, r7, #4
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	1d3b      	adds	r3, r7, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	f7fb f868 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005100:	4603      	mov	r3, r0
 8005102:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d009      	beq.n	800511e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800510a:	4a0a      	ldr	r2, [pc, #40]	@ (8005134 <_TrySendOverflowPacket+0xdc>)
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005110:	4b08      	ldr	r3, [pc, #32]	@ (8005134 <_TrySendOverflowPacket+0xdc>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	3b01      	subs	r3, #1
 8005116:	b2da      	uxtb	r2, r3
 8005118:	4b06      	ldr	r3, [pc, #24]	@ (8005134 <_TrySendOverflowPacket+0xdc>)
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	e004      	b.n	8005128 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800511e:	4b05      	ldr	r3, [pc, #20]	@ (8005134 <_TrySendOverflowPacket+0xdc>)
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	3301      	adds	r3, #1
 8005124:	4a03      	ldr	r2, [pc, #12]	@ (8005134 <_TrySendOverflowPacket+0xdc>)
 8005126:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005128:	693b      	ldr	r3, [r7, #16]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3730      	adds	r7, #48	@ 0x30
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	200143e0 	.word	0x200143e0
 8005138:	e0001004 	.word	0xe0001004

0800513c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	@ 0x28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005148:	4b98      	ldr	r3, [pc, #608]	@ (80053ac <_SendPacket+0x270>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d010      	beq.n	8005172 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005150:	4b96      	ldr	r3, [pc, #600]	@ (80053ac <_SendPacket+0x270>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 812d 	beq.w	80053b4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800515a:	4b94      	ldr	r3, [pc, #592]	@ (80053ac <_SendPacket+0x270>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d109      	bne.n	8005176 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005162:	f7ff ff79 	bl	8005058 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005166:	4b91      	ldr	r3, [pc, #580]	@ (80053ac <_SendPacket+0x270>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b01      	cmp	r3, #1
 800516c:	f040 8124 	bne.w	80053b8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005170:	e001      	b.n	8005176 <_SendPacket+0x3a>
    goto Send;
 8005172:	bf00      	nop
 8005174:	e000      	b.n	8005178 <_SendPacket+0x3c>
Send:
 8005176:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b1f      	cmp	r3, #31
 800517c:	d809      	bhi.n	8005192 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800517e:	4b8b      	ldr	r3, [pc, #556]	@ (80053ac <_SendPacket+0x270>)
 8005180:	69da      	ldr	r2, [r3, #28]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	f040 8115 	bne.w	80053bc <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b17      	cmp	r3, #23
 8005196:	d807      	bhi.n	80051a8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3b01      	subs	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	e0c4      	b.n	8005332 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80051b4:	d912      	bls.n	80051dc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	09da      	lsrs	r2, r3, #7
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3b01      	subs	r3, #1
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	3a01      	subs	r2, #1
 80051ce:	60fa      	str	r2, [r7, #12]
 80051d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	e006      	b.n	80051ea <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3b01      	subs	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b7e      	cmp	r3, #126	@ 0x7e
 80051ee:	d807      	bhi.n	8005200 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	e098      	b.n	8005332 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005206:	d212      	bcs.n	800522e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	09da      	lsrs	r2, r3, #7
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3b01      	subs	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	3a01      	subs	r2, #1
 8005220:	60fa      	str	r2, [r7, #12]
 8005222:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005226:	b2da      	uxtb	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	e081      	b.n	8005332 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005234:	d21d      	bcs.n	8005272 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	0b9a      	lsrs	r2, r3, #14
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3b01      	subs	r3, #1
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	09db      	lsrs	r3, r3, #7
 800524a:	b2db      	uxtb	r3, r3
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	3a01      	subs	r2, #1
 8005250:	60fa      	str	r2, [r7, #12]
 8005252:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005256:	b2da      	uxtb	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	b2db      	uxtb	r3, r3
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	3a01      	subs	r2, #1
 8005264:	60fa      	str	r2, [r7, #12]
 8005266:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800526a:	b2da      	uxtb	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e05f      	b.n	8005332 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005278:	d228      	bcs.n	80052cc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	0d5a      	lsrs	r2, r3, #21
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3b01      	subs	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	0b9b      	lsrs	r3, r3, #14
 800528e:	b2db      	uxtb	r3, r3
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	3a01      	subs	r2, #1
 8005294:	60fa      	str	r2, [r7, #12]
 8005296:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800529a:	b2da      	uxtb	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	09db      	lsrs	r3, r3, #7
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	3a01      	subs	r2, #1
 80052aa:	60fa      	str	r2, [r7, #12]
 80052ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	3a01      	subs	r2, #1
 80052be:	60fa      	str	r2, [r7, #12]
 80052c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	e032      	b.n	8005332 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	0f1a      	lsrs	r2, r3, #28
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	0d5b      	lsrs	r3, r3, #21
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	3a01      	subs	r2, #1
 80052e6:	60fa      	str	r2, [r7, #12]
 80052e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	0b9b      	lsrs	r3, r3, #14
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	3a01      	subs	r2, #1
 80052fc:	60fa      	str	r2, [r7, #12]
 80052fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005302:	b2da      	uxtb	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	09db      	lsrs	r3, r3, #7
 800530c:	b2db      	uxtb	r3, r3
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	3a01      	subs	r2, #1
 8005312:	60fa      	str	r2, [r7, #12]
 8005314:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005318:	b2da      	uxtb	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	3a01      	subs	r2, #1
 8005326:	60fa      	str	r2, [r7, #12]
 8005328:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800532c:	b2da      	uxtb	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005332:	4b1f      	ldr	r3, [pc, #124]	@ (80053b0 <_SendPacket+0x274>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005338:	4b1c      	ldr	r3, [pc, #112]	@ (80053ac <_SendPacket+0x270>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	627b      	str	r3, [r7, #36]	@ 0x24
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	623b      	str	r3, [r7, #32]
 800534a:	e00b      	b.n	8005364 <_SendPacket+0x228>
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	b2da      	uxtb	r2, r3
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	1c59      	adds	r1, r3, #1
 8005354:	6279      	str	r1, [r7, #36]	@ 0x24
 8005356:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	09db      	lsrs	r3, r3, #7
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	2b7f      	cmp	r3, #127	@ 0x7f
 8005368:	d8f0      	bhi.n	800534c <_SendPacket+0x210>
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005370:	6a3a      	ldr	r2, [r7, #32]
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800537a:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <_SendPacket+0x270>)
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	4618      	mov	r0, r3
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	461a      	mov	r2, r3
 8005388:	68f9      	ldr	r1, [r7, #12]
 800538a:	f7fa ff21 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800538e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005396:	4a05      	ldr	r2, [pc, #20]	@ (80053ac <_SendPacket+0x270>)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	60d3      	str	r3, [r2, #12]
 800539c:	e00f      	b.n	80053be <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800539e:	4b03      	ldr	r3, [pc, #12]	@ (80053ac <_SendPacket+0x270>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	3301      	adds	r3, #1
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	4b01      	ldr	r3, [pc, #4]	@ (80053ac <_SendPacket+0x270>)
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	e008      	b.n	80053be <_SendPacket+0x282>
 80053ac:	200143e0 	.word	0x200143e0
 80053b0:	e0001004 	.word	0xe0001004
    goto SendDone;
 80053b4:	bf00      	nop
 80053b6:	e002      	b.n	80053be <_SendPacket+0x282>
      goto SendDone;
 80053b8:	bf00      	nop
 80053ba:	e000      	b.n	80053be <_SendPacket+0x282>
      goto SendDone;
 80053bc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80053be:	4b14      	ldr	r3, [pc, #80]	@ (8005410 <_SendPacket+0x2d4>)
 80053c0:	7e1b      	ldrb	r3, [r3, #24]
 80053c2:	4619      	mov	r1, r3
 80053c4:	4a13      	ldr	r2, [pc, #76]	@ (8005414 <_SendPacket+0x2d8>)
 80053c6:	460b      	mov	r3, r1
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	440b      	add	r3, r1
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	4413      	add	r3, r2
 80053d0:	336c      	adds	r3, #108	@ 0x6c
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005410 <_SendPacket+0x2d4>)
 80053d6:	7e1b      	ldrb	r3, [r3, #24]
 80053d8:	4618      	mov	r0, r3
 80053da:	490e      	ldr	r1, [pc, #56]	@ (8005414 <_SendPacket+0x2d8>)
 80053dc:	4603      	mov	r3, r0
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	4403      	add	r3, r0
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	440b      	add	r3, r1
 80053e6:	3370      	adds	r3, #112	@ 0x70
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d00b      	beq.n	8005406 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80053ee:	4b08      	ldr	r3, [pc, #32]	@ (8005410 <_SendPacket+0x2d4>)
 80053f0:	789b      	ldrb	r3, [r3, #2]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d107      	bne.n	8005406 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80053f6:	4b06      	ldr	r3, [pc, #24]	@ (8005410 <_SendPacket+0x2d4>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80053fc:	f7ff fdbe 	bl	8004f7c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005400:	4b03      	ldr	r3, [pc, #12]	@ (8005410 <_SendPacket+0x2d4>)
 8005402:	2200      	movs	r2, #0
 8005404:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005406:	bf00      	nop
 8005408:	3728      	adds	r7, #40	@ 0x28
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	200143e0 	.word	0x200143e0
 8005414:	20012f20 	.word	0x20012f20

08005418 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005426:	2300      	movs	r3, #0
 8005428:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800542c:	4917      	ldr	r1, [pc, #92]	@ (800548c <SEGGER_SYSVIEW_Init+0x74>)
 800542e:	4818      	ldr	r0, [pc, #96]	@ (8005490 <SEGGER_SYSVIEW_Init+0x78>)
 8005430:	f7ff fc8e 	bl	8004d50 <SEGGER_RTT_AllocUpBuffer>
 8005434:	4603      	mov	r3, r0
 8005436:	b2da      	uxtb	r2, r3
 8005438:	4b16      	ldr	r3, [pc, #88]	@ (8005494 <SEGGER_SYSVIEW_Init+0x7c>)
 800543a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800543c:	4b15      	ldr	r3, [pc, #84]	@ (8005494 <SEGGER_SYSVIEW_Init+0x7c>)
 800543e:	785a      	ldrb	r2, [r3, #1]
 8005440:	4b14      	ldr	r3, [pc, #80]	@ (8005494 <SEGGER_SYSVIEW_Init+0x7c>)
 8005442:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005444:	4b13      	ldr	r3, [pc, #76]	@ (8005494 <SEGGER_SYSVIEW_Init+0x7c>)
 8005446:	7e1b      	ldrb	r3, [r3, #24]
 8005448:	4618      	mov	r0, r3
 800544a:	2300      	movs	r3, #0
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	2308      	movs	r3, #8
 8005450:	4a11      	ldr	r2, [pc, #68]	@ (8005498 <SEGGER_SYSVIEW_Init+0x80>)
 8005452:	490f      	ldr	r1, [pc, #60]	@ (8005490 <SEGGER_SYSVIEW_Init+0x78>)
 8005454:	f7ff fd00 	bl	8004e58 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005458:	4b0e      	ldr	r3, [pc, #56]	@ (8005494 <SEGGER_SYSVIEW_Init+0x7c>)
 800545a:	2200      	movs	r2, #0
 800545c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800545e:	4b0f      	ldr	r3, [pc, #60]	@ (800549c <SEGGER_SYSVIEW_Init+0x84>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a0c      	ldr	r2, [pc, #48]	@ (8005494 <SEGGER_SYSVIEW_Init+0x7c>)
 8005464:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005466:	4a0b      	ldr	r2, [pc, #44]	@ (8005494 <SEGGER_SYSVIEW_Init+0x7c>)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800546c:	4a09      	ldr	r2, [pc, #36]	@ (8005494 <SEGGER_SYSVIEW_Init+0x7c>)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005472:	4a08      	ldr	r2, [pc, #32]	@ (8005494 <SEGGER_SYSVIEW_Init+0x7c>)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005478:	4a06      	ldr	r2, [pc, #24]	@ (8005494 <SEGGER_SYSVIEW_Init+0x7c>)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800547e:	4b05      	ldr	r3, [pc, #20]	@ (8005494 <SEGGER_SYSVIEW_Init+0x7c>)
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	200133d8 	.word	0x200133d8
 8005490:	08006df8 	.word	0x08006df8
 8005494:	200143e0 	.word	0x200143e0
 8005498:	200143d8 	.word	0x200143d8
 800549c:	e0001004 	.word	0xe0001004

080054a0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80054a8:	4a04      	ldr	r2, [pc, #16]	@ (80054bc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6113      	str	r3, [r2, #16]
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	200143e0 	.word	0x200143e0

080054c0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054c8:	f3ef 8311 	mrs	r3, BASEPRI
 80054cc:	f04f 0120 	mov.w	r1, #32
 80054d0:	f381 8811 	msr	BASEPRI, r1
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	4808      	ldr	r0, [pc, #32]	@ (80054f8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80054d8:	f7ff fd43 	bl	8004f62 <_PreparePacket>
 80054dc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	68b8      	ldr	r0, [r7, #8]
 80054e4:	f7ff fe2a 	bl	800513c <_SendPacket>
  RECORD_END();
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f383 8811 	msr	BASEPRI, r3
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20014410 	.word	0x20014410

080054fc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005506:	f3ef 8311 	mrs	r3, BASEPRI
 800550a:	f04f 0120 	mov.w	r1, #32
 800550e:	f381 8811 	msr	BASEPRI, r1
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	4816      	ldr	r0, [pc, #88]	@ (8005570 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005516:	f7ff fd24 	bl	8004f62 <_PreparePacket>
 800551a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	e00b      	b.n	8005542 <SEGGER_SYSVIEW_RecordU32+0x46>
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	1c59      	adds	r1, r3, #1
 8005532:	61f9      	str	r1, [r7, #28]
 8005534:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005538:	b2d2      	uxtb	r2, r2
 800553a:	701a      	strb	r2, [r3, #0]
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	09db      	lsrs	r3, r3, #7
 8005540:	61bb      	str	r3, [r7, #24]
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	2b7f      	cmp	r3, #127	@ 0x7f
 8005546:	d8f0      	bhi.n	800552a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	61fa      	str	r2, [r7, #28]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68f9      	ldr	r1, [r7, #12]
 800555c:	6938      	ldr	r0, [r7, #16]
 800555e:	f7ff fded 	bl	800513c <_SendPacket>
  RECORD_END();
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f383 8811 	msr	BASEPRI, r3
}
 8005568:	bf00      	nop
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20014410 	.word	0x20014410

08005574 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b08c      	sub	sp, #48	@ 0x30
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005580:	f3ef 8311 	mrs	r3, BASEPRI
 8005584:	f04f 0120 	mov.w	r1, #32
 8005588:	f381 8811 	msr	BASEPRI, r1
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	4825      	ldr	r0, [pc, #148]	@ (8005624 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005590:	f7ff fce7 	bl	8004f62 <_PreparePacket>
 8005594:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055a2:	e00b      	b.n	80055bc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	1c59      	adds	r1, r3, #1
 80055ac:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80055ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	09db      	lsrs	r3, r3, #7
 80055ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055be:	2b7f      	cmp	r3, #127	@ 0x7f
 80055c0:	d8f0      	bhi.n	80055a4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80055c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	623b      	str	r3, [r7, #32]
 80055da:	e00b      	b.n	80055f4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e2:	1c59      	adds	r1, r3, #1
 80055e4:	6279      	str	r1, [r7, #36]	@ 0x24
 80055e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	09db      	lsrs	r3, r3, #7
 80055f2:	623b      	str	r3, [r7, #32]
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80055f8:	d8f0      	bhi.n	80055dc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8005600:	6a3a      	ldr	r2, [r7, #32]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	6979      	ldr	r1, [r7, #20]
 800560e:	69b8      	ldr	r0, [r7, #24]
 8005610:	f7ff fd94 	bl	800513c <_SendPacket>
  RECORD_END();
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f383 8811 	msr	BASEPRI, r3
}
 800561a:	bf00      	nop
 800561c:	3730      	adds	r7, #48	@ 0x30
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20014410 	.word	0x20014410

08005628 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b08e      	sub	sp, #56	@ 0x38
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005636:	f3ef 8311 	mrs	r3, BASEPRI
 800563a:	f04f 0120 	mov.w	r1, #32
 800563e:	f381 8811 	msr	BASEPRI, r1
 8005642:	61fb      	str	r3, [r7, #28]
 8005644:	4832      	ldr	r0, [pc, #200]	@ (8005710 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005646:	f7ff fc8c 	bl	8004f62 <_PreparePacket>
 800564a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	637b      	str	r3, [r7, #52]	@ 0x34
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	633b      	str	r3, [r7, #48]	@ 0x30
 8005658:	e00b      	b.n	8005672 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	b2da      	uxtb	r2, r3
 800565e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005660:	1c59      	adds	r1, r3, #1
 8005662:	6379      	str	r1, [r7, #52]	@ 0x34
 8005664:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	09db      	lsrs	r3, r3, #7
 8005670:	633b      	str	r3, [r7, #48]	@ 0x30
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	2b7f      	cmp	r3, #127	@ 0x7f
 8005676:	d8f0      	bhi.n	800565a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	637a      	str	r2, [r7, #52]	@ 0x34
 800567e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005686:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005690:	e00b      	b.n	80056aa <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005694:	b2da      	uxtb	r2, r3
 8005696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005698:	1c59      	adds	r1, r3, #1
 800569a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800569c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a6:	09db      	lsrs	r3, r3, #7
 80056a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80056ae:	d8f0      	bhi.n	8005692 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80056b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	623b      	str	r3, [r7, #32]
 80056c8:	e00b      	b.n	80056e2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	1c59      	adds	r1, r3, #1
 80056d2:	6279      	str	r1, [r7, #36]	@ 0x24
 80056d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	09db      	lsrs	r3, r3, #7
 80056e0:	623b      	str	r3, [r7, #32]
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80056e6:	d8f0      	bhi.n	80056ca <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80056ee:	6a3a      	ldr	r2, [r7, #32]
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	701a      	strb	r2, [r3, #0]
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	6979      	ldr	r1, [r7, #20]
 80056fc:	69b8      	ldr	r0, [r7, #24]
 80056fe:	f7ff fd1d 	bl	800513c <_SendPacket>
  RECORD_END();
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	f383 8811 	msr	BASEPRI, r3
}
 8005708:	bf00      	nop
 800570a:	3738      	adds	r7, #56	@ 0x38
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20014410 	.word	0x20014410

08005714 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b090      	sub	sp, #64	@ 0x40
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005722:	f3ef 8311 	mrs	r3, BASEPRI
 8005726:	f04f 0120 	mov.w	r1, #32
 800572a:	f381 8811 	msr	BASEPRI, r1
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	4840      	ldr	r0, [pc, #256]	@ (8005834 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005732:	f7ff fc16 	bl	8004f62 <_PreparePacket>
 8005736:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005744:	e00b      	b.n	800575e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005748:	b2da      	uxtb	r2, r3
 800574a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574c:	1c59      	adds	r1, r3, #1
 800574e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005750:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575a:	09db      	lsrs	r3, r3, #7
 800575c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800575e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005760:	2b7f      	cmp	r3, #127	@ 0x7f
 8005762:	d8f0      	bhi.n	8005746 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800576a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005772:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	637b      	str	r3, [r7, #52]	@ 0x34
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	633b      	str	r3, [r7, #48]	@ 0x30
 800577c:	e00b      	b.n	8005796 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005780:	b2da      	uxtb	r2, r3
 8005782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005784:	1c59      	adds	r1, r3, #1
 8005786:	6379      	str	r1, [r7, #52]	@ 0x34
 8005788:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	09db      	lsrs	r3, r3, #7
 8005794:	633b      	str	r3, [r7, #48]	@ 0x30
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	2b7f      	cmp	r3, #127	@ 0x7f
 800579a:	d8f0      	bhi.n	800577e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800579c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	637a      	str	r2, [r7, #52]	@ 0x34
 80057a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057b4:	e00b      	b.n	80057ce <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80057b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057bc:	1c59      	adds	r1, r3, #1
 80057be:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80057c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ca:	09db      	lsrs	r3, r3, #7
 80057cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80057d2:	d8f0      	bhi.n	80057b6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80057d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	e00b      	b.n	8005806 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	1c59      	adds	r1, r3, #1
 80057f6:	6279      	str	r1, [r7, #36]	@ 0x24
 80057f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	09db      	lsrs	r3, r3, #7
 8005804:	623b      	str	r3, [r7, #32]
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	2b7f      	cmp	r3, #127	@ 0x7f
 800580a:	d8f0      	bhi.n	80057ee <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	627a      	str	r2, [r7, #36]	@ 0x24
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	6979      	ldr	r1, [r7, #20]
 8005820:	69b8      	ldr	r0, [r7, #24]
 8005822:	f7ff fc8b 	bl	800513c <_SendPacket>
  RECORD_END();
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f383 8811 	msr	BASEPRI, r3
}
 800582c:	bf00      	nop
 800582e:	3740      	adds	r7, #64	@ 0x40
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20014410 	.word	0x20014410

08005838 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b08c      	sub	sp, #48	@ 0x30
 800583c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800583e:	4b58      	ldr	r3, [pc, #352]	@ (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005844:	f3ef 8311 	mrs	r3, BASEPRI
 8005848:	f04f 0120 	mov.w	r1, #32
 800584c:	f381 8811 	msr	BASEPRI, r1
 8005850:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005852:	4b53      	ldr	r3, [pc, #332]	@ (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	220a      	movs	r2, #10
 8005858:	4952      	ldr	r1, [pc, #328]	@ (80059a4 <SEGGER_SYSVIEW_Start+0x16c>)
 800585a:	4618      	mov	r0, r3
 800585c:	f7fa fcb8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005866:	200a      	movs	r0, #10
 8005868:	f7ff fe2a 	bl	80054c0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800586c:	f3ef 8311 	mrs	r3, BASEPRI
 8005870:	f04f 0120 	mov.w	r1, #32
 8005874:	f381 8811 	msr	BASEPRI, r1
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	484b      	ldr	r0, [pc, #300]	@ (80059a8 <SEGGER_SYSVIEW_Start+0x170>)
 800587c:	f7ff fb71 	bl	8004f62 <_PreparePacket>
 8005880:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800588a:	4b45      	ldr	r3, [pc, #276]	@ (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005890:	e00b      	b.n	80058aa <SEGGER_SYSVIEW_Start+0x72>
 8005892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005894:	b2da      	uxtb	r2, r3
 8005896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005898:	1c59      	adds	r1, r3, #1
 800589a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800589c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a6:	09db      	lsrs	r3, r3, #7
 80058a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80058ae:	d8f0      	bhi.n	8005892 <SEGGER_SYSVIEW_Start+0x5a>
 80058b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058c4:	4b36      	ldr	r3, [pc, #216]	@ (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	623b      	str	r3, [r7, #32]
 80058ca:	e00b      	b.n	80058e4 <SEGGER_SYSVIEW_Start+0xac>
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	1c59      	adds	r1, r3, #1
 80058d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80058d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	09db      	lsrs	r3, r3, #7
 80058e2:	623b      	str	r3, [r7, #32]
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80058e8:	d8f0      	bhi.n	80058cc <SEGGER_SYSVIEW_Start+0x94>
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80058f0:	6a3a      	ldr	r2, [r7, #32]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	4b28      	ldr	r3, [pc, #160]	@ (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e00b      	b.n	800591e <SEGGER_SYSVIEW_Start+0xe6>
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	1c59      	adds	r1, r3, #1
 800590e:	61f9      	str	r1, [r7, #28]
 8005910:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	09db      	lsrs	r3, r3, #7
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b7f      	cmp	r3, #127	@ 0x7f
 8005922:	d8f0      	bhi.n	8005906 <SEGGER_SYSVIEW_Start+0xce>
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	61fa      	str	r2, [r7, #28]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	2300      	movs	r3, #0
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	e00b      	b.n	8005956 <SEGGER_SYSVIEW_Start+0x11e>
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	b2da      	uxtb	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	1c59      	adds	r1, r3, #1
 8005946:	6179      	str	r1, [r7, #20]
 8005948:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	09db      	lsrs	r3, r3, #7
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	2b7f      	cmp	r3, #127	@ 0x7f
 800595a:	d8f0      	bhi.n	800593e <SEGGER_SYSVIEW_Start+0x106>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	617a      	str	r2, [r7, #20]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800596c:	2218      	movs	r2, #24
 800596e:	6839      	ldr	r1, [r7, #0]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fbe3 	bl	800513c <_SendPacket>
      RECORD_END();
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800597c:	4b08      	ldr	r3, [pc, #32]	@ (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 800597e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005984:	4b06      	ldr	r3, [pc, #24]	@ (80059a0 <SEGGER_SYSVIEW_Start+0x168>)
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800598a:	f000 f9eb 	bl	8005d64 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800598e:	f000 f9b1 	bl	8005cf4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005992:	f000 fc2d 	bl	80061f0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005996:	bf00      	nop
 8005998:	3730      	adds	r7, #48	@ 0x30
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	200143e0 	.word	0x200143e0
 80059a4:	08006e34 	.word	0x08006e34
 80059a8:	20014410 	.word	0x20014410

080059ac <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059b2:	f3ef 8311 	mrs	r3, BASEPRI
 80059b6:	f04f 0120 	mov.w	r1, #32
 80059ba:	f381 8811 	msr	BASEPRI, r1
 80059be:	607b      	str	r3, [r7, #4]
 80059c0:	480b      	ldr	r0, [pc, #44]	@ (80059f0 <SEGGER_SYSVIEW_Stop+0x44>)
 80059c2:	f7ff face 	bl	8004f62 <_PreparePacket>
 80059c6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80059c8:	4b0a      	ldr	r3, [pc, #40]	@ (80059f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80059d0:	220b      	movs	r2, #11
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6838      	ldr	r0, [r7, #0]
 80059d6:	f7ff fbb1 	bl	800513c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80059da:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f383 8811 	msr	BASEPRI, r3
}
 80059e6:	bf00      	nop
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20014410 	.word	0x20014410
 80059f4:	200143e0 	.word	0x200143e0

080059f8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08c      	sub	sp, #48	@ 0x30
 80059fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005a02:	f04f 0120 	mov.w	r1, #32
 8005a06:	f381 8811 	msr	BASEPRI, r1
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	4845      	ldr	r0, [pc, #276]	@ (8005b24 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005a0e:	f7ff faa8 	bl	8004f62 <_PreparePacket>
 8005a12:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a1c:	4b42      	ldr	r3, [pc, #264]	@ (8005b28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a22:	e00b      	b.n	8005a3c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2a:	1c59      	adds	r1, r3, #1
 8005a2c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005a2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	09db      	lsrs	r3, r3, #7
 8005a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a40:	d8f0      	bhi.n	8005a24 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a56:	4b34      	ldr	r3, [pc, #208]	@ (8005b28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	e00b      	b.n	8005a76 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	1c59      	adds	r1, r3, #1
 8005a66:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	09db      	lsrs	r3, r3, #7
 8005a74:	623b      	str	r3, [r7, #32]
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a7a:	d8f0      	bhi.n	8005a5e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a82:	6a3a      	ldr	r2, [r7, #32]
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	4b25      	ldr	r3, [pc, #148]	@ (8005b28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	e00b      	b.n	8005ab0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	1c59      	adds	r1, r3, #1
 8005aa0:	61f9      	str	r1, [r7, #28]
 8005aa2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	09db      	lsrs	r3, r3, #7
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ab4:	d8f0      	bhi.n	8005a98 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	61fa      	str	r2, [r7, #28]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	e00b      	b.n	8005ae8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	1c59      	adds	r1, r3, #1
 8005ad8:	6179      	str	r1, [r7, #20]
 8005ada:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	09db      	lsrs	r3, r3, #7
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b7f      	cmp	r3, #127	@ 0x7f
 8005aec:	d8f0      	bhi.n	8005ad0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	617a      	str	r2, [r7, #20]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005afe:	2218      	movs	r2, #24
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	68b8      	ldr	r0, [r7, #8]
 8005b04:	f7ff fb1a 	bl	800513c <_SendPacket>
  RECORD_END();
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005b0e:	4b06      	ldr	r3, [pc, #24]	@ (8005b28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005b16:	4b04      	ldr	r3, [pc, #16]	@ (8005b28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	4798      	blx	r3
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	3730      	adds	r7, #48	@ 0x30
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20014410 	.word	0x20014410
 8005b28:	200143e0 	.word	0x200143e0

08005b2c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b092      	sub	sp, #72	@ 0x48
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005b34:	f3ef 8311 	mrs	r3, BASEPRI
 8005b38:	f04f 0120 	mov.w	r1, #32
 8005b3c:	f381 8811 	msr	BASEPRI, r1
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	486a      	ldr	r0, [pc, #424]	@ (8005cec <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005b44:	f7ff fa0d 	bl	8004f62 <_PreparePacket>
 8005b48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4b66      	ldr	r3, [pc, #408]	@ (8005cf0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b5e:	e00b      	b.n	8005b78 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b66:	1c59      	adds	r1, r3, #1
 8005b68:	6479      	str	r1, [r7, #68]	@ 0x44
 8005b6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b74:	09db      	lsrs	r3, r3, #7
 8005b76:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b7c:	d8f0      	bhi.n	8005b60 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b98:	e00b      	b.n	8005bb2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba0:	1c59      	adds	r1, r3, #1
 8005ba2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005ba4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bae:	09db      	lsrs	r3, r3, #7
 8005bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bb6:	d8f0      	bhi.n	8005b9a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005bbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	4619      	mov	r1, r3
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7ff f98d 	bl	8004ef0 <_EncodeStr>
 8005bd6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005bd8:	2209      	movs	r2, #9
 8005bda:	68f9      	ldr	r1, [r7, #12]
 8005bdc:	6938      	ldr	r0, [r7, #16]
 8005bde:	f7ff faad 	bl	800513c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4b40      	ldr	r3, [pc, #256]	@ (8005cf0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bf6:	e00b      	b.n	8005c10 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	6379      	str	r1, [r7, #52]	@ 0x34
 8005c02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0c:	09db      	lsrs	r3, r3, #7
 8005c0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c12:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c14:	d8f0      	bhi.n	8005bf8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	637a      	str	r2, [r7, #52]	@ 0x34
 8005c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c30:	e00b      	b.n	8005c4a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c38:	1c59      	adds	r1, r3, #1
 8005c3a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005c3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	09db      	lsrs	r3, r3, #7
 8005c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c4e:	d8f0      	bhi.n	8005c32 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	623b      	str	r3, [r7, #32]
 8005c6a:	e00b      	b.n	8005c84 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	1c59      	adds	r1, r3, #1
 8005c74:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	09db      	lsrs	r3, r3, #7
 8005c82:	623b      	str	r3, [r7, #32]
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c88:	d8f0      	bhi.n	8005c6c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c90:	6a3a      	ldr	r2, [r7, #32]
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	e00b      	b.n	8005cbe <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	1c59      	adds	r1, r3, #1
 8005cae:	61f9      	str	r1, [r7, #28]
 8005cb0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	09db      	lsrs	r3, r3, #7
 8005cbc:	61bb      	str	r3, [r7, #24]
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cc2:	d8f0      	bhi.n	8005ca6 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	61fa      	str	r2, [r7, #28]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005cd4:	2215      	movs	r2, #21
 8005cd6:	68f9      	ldr	r1, [r7, #12]
 8005cd8:	6938      	ldr	r0, [r7, #16]
 8005cda:	f7ff fa2f 	bl	800513c <_SendPacket>
  RECORD_END();
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f383 8811 	msr	BASEPRI, r3
}
 8005ce4:	bf00      	nop
 8005ce6:	3748      	adds	r7, #72	@ 0x48
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20014410 	.word	0x20014410
 8005cf0:	200143e0 	.word	0x200143e0

08005cf4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005cf8:	4b07      	ldr	r3, [pc, #28]	@ (8005d18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005d00:	4b05      	ldr	r3, [pc, #20]	@ (8005d18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005d0a:	4b03      	ldr	r3, [pc, #12]	@ (8005d18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	4798      	blx	r3
  }
}
 8005d12:	bf00      	nop
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	200143e0 	.word	0x200143e0

08005d1c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d24:	f3ef 8311 	mrs	r3, BASEPRI
 8005d28:	f04f 0120 	mov.w	r1, #32
 8005d2c:	f381 8811 	msr	BASEPRI, r1
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	480b      	ldr	r0, [pc, #44]	@ (8005d60 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005d34:	f7ff f915 	bl	8004f62 <_PreparePacket>
 8005d38:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d3a:	2280      	movs	r2, #128	@ 0x80
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	6938      	ldr	r0, [r7, #16]
 8005d40:	f7ff f8d6 	bl	8004ef0 <_EncodeStr>
 8005d44:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005d46:	220e      	movs	r2, #14
 8005d48:	68f9      	ldr	r1, [r7, #12]
 8005d4a:	6938      	ldr	r0, [r7, #16]
 8005d4c:	f7ff f9f6 	bl	800513c <_SendPacket>
  RECORD_END();
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f383 8811 	msr	BASEPRI, r3
}
 8005d56:	bf00      	nop
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20014410 	.word	0x20014410

08005d64 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005d64:	b590      	push	{r4, r7, lr}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005d6a:	4b15      	ldr	r3, [pc, #84]	@ (8005dc0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01a      	beq.n	8005da8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005d72:	4b13      	ldr	r3, [pc, #76]	@ (8005dc0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d015      	beq.n	8005da8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005d7c:	4b10      	ldr	r3, [pc, #64]	@ (8005dc0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4798      	blx	r3
 8005d84:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d88:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005d8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	000a      	movs	r2, r1
 8005d98:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4621      	mov	r1, r4
 8005da0:	200d      	movs	r0, #13
 8005da2:	f7ff fbe7 	bl	8005574 <SEGGER_SYSVIEW_RecordU32x2>
 8005da6:	e006      	b.n	8005db6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005da8:	4b06      	ldr	r3, [pc, #24]	@ (8005dc4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4619      	mov	r1, r3
 8005dae:	200c      	movs	r0, #12
 8005db0:	f7ff fba4 	bl	80054fc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd90      	pop	{r4, r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	200143e0 	.word	0x200143e0
 8005dc4:	e0001004 	.word	0xe0001004

08005dc8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005dce:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd2:	f04f 0120 	mov.w	r1, #32
 8005dd6:	f381 8811 	msr	BASEPRI, r1
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	4819      	ldr	r0, [pc, #100]	@ (8005e44 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005dde:	f7ff f8c0 	bl	8004f62 <_PreparePacket>
 8005de2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005de8:	4b17      	ldr	r3, [pc, #92]	@ (8005e48 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	e00b      	b.n	8005e14 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	1c59      	adds	r1, r3, #1
 8005e04:	6179      	str	r1, [r7, #20]
 8005e06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	09db      	lsrs	r3, r3, #7
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e18:	d8f0      	bhi.n	8005dfc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	617a      	str	r2, [r7, #20]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	68b8      	ldr	r0, [r7, #8]
 8005e30:	f7ff f984 	bl	800513c <_SendPacket>
  RECORD_END();
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f383 8811 	msr	BASEPRI, r3
}
 8005e3a:	bf00      	nop
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20014410 	.word	0x20014410
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e52:	f3ef 8311 	mrs	r3, BASEPRI
 8005e56:	f04f 0120 	mov.w	r1, #32
 8005e5a:	f381 8811 	msr	BASEPRI, r1
 8005e5e:	607b      	str	r3, [r7, #4]
 8005e60:	4807      	ldr	r0, [pc, #28]	@ (8005e80 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005e62:	f7ff f87e 	bl	8004f62 <_PreparePacket>
 8005e66:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005e68:	2203      	movs	r2, #3
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6838      	ldr	r0, [r7, #0]
 8005e6e:	f7ff f965 	bl	800513c <_SendPacket>
  RECORD_END();
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f383 8811 	msr	BASEPRI, r3
}
 8005e78:	bf00      	nop
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20014410 	.word	0x20014410

08005e84 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e8e:	f04f 0120 	mov.w	r1, #32
 8005e92:	f381 8811 	msr	BASEPRI, r1
 8005e96:	607b      	str	r3, [r7, #4]
 8005e98:	4807      	ldr	r0, [pc, #28]	@ (8005eb8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005e9a:	f7ff f862 	bl	8004f62 <_PreparePacket>
 8005e9e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005ea0:	2212      	movs	r2, #18
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6838      	ldr	r0, [r7, #0]
 8005ea6:	f7ff f949 	bl	800513c <_SendPacket>
  RECORD_END();
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f383 8811 	msr	BASEPRI, r3
}
 8005eb0:	bf00      	nop
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20014410 	.word	0x20014410

08005ebc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ec2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ec6:	f04f 0120 	mov.w	r1, #32
 8005eca:	f381 8811 	msr	BASEPRI, r1
 8005ece:	607b      	str	r3, [r7, #4]
 8005ed0:	4807      	ldr	r0, [pc, #28]	@ (8005ef0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005ed2:	f7ff f846 	bl	8004f62 <_PreparePacket>
 8005ed6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005ed8:	2211      	movs	r2, #17
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	6838      	ldr	r0, [r7, #0]
 8005ede:	f7ff f92d 	bl	800513c <_SendPacket>
  RECORD_END();
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f383 8811 	msr	BASEPRI, r3
}
 8005ee8:	bf00      	nop
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20014410 	.word	0x20014410

08005ef4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005efc:	f3ef 8311 	mrs	r3, BASEPRI
 8005f00:	f04f 0120 	mov.w	r1, #32
 8005f04:	f381 8811 	msr	BASEPRI, r1
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	4819      	ldr	r0, [pc, #100]	@ (8005f70 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005f0c:	f7ff f829 	bl	8004f62 <_PreparePacket>
 8005f10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f16:	4b17      	ldr	r3, [pc, #92]	@ (8005f74 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	61bb      	str	r3, [r7, #24]
 8005f28:	e00b      	b.n	8005f42 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	1c59      	adds	r1, r3, #1
 8005f32:	61f9      	str	r1, [r7, #28]
 8005f34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	09db      	lsrs	r3, r3, #7
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f46:	d8f0      	bhi.n	8005f2a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	61fa      	str	r2, [r7, #28]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005f58:	2208      	movs	r2, #8
 8005f5a:	68f9      	ldr	r1, [r7, #12]
 8005f5c:	6938      	ldr	r0, [r7, #16]
 8005f5e:	f7ff f8ed 	bl	800513c <_SendPacket>
  RECORD_END();
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f383 8811 	msr	BASEPRI, r3
}
 8005f68:	bf00      	nop
 8005f6a:	3720      	adds	r7, #32
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20014410 	.word	0x20014410
 8005f74:	200143e0 	.word	0x200143e0

08005f78 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f80:	f3ef 8311 	mrs	r3, BASEPRI
 8005f84:	f04f 0120 	mov.w	r1, #32
 8005f88:	f381 8811 	msr	BASEPRI, r1
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	4819      	ldr	r0, [pc, #100]	@ (8005ff4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005f90:	f7fe ffe7 	bl	8004f62 <_PreparePacket>
 8005f94:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f9a:	4b17      	ldr	r3, [pc, #92]	@ (8005ff8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	61fb      	str	r3, [r7, #28]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	e00b      	b.n	8005fc6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	1c59      	adds	r1, r3, #1
 8005fb6:	61f9      	str	r1, [r7, #28]
 8005fb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	701a      	strb	r2, [r3, #0]
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	09db      	lsrs	r3, r3, #7
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fca:	d8f0      	bhi.n	8005fae <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	61fa      	str	r2, [r7, #28]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005fdc:	2204      	movs	r2, #4
 8005fde:	68f9      	ldr	r1, [r7, #12]
 8005fe0:	6938      	ldr	r0, [r7, #16]
 8005fe2:	f7ff f8ab 	bl	800513c <_SendPacket>
  RECORD_END();
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f383 8811 	msr	BASEPRI, r3
}
 8005fec:	bf00      	nop
 8005fee:	3720      	adds	r7, #32
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	20014410 	.word	0x20014410
 8005ff8:	200143e0 	.word	0x200143e0

08005ffc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006004:	f3ef 8311 	mrs	r3, BASEPRI
 8006008:	f04f 0120 	mov.w	r1, #32
 800600c:	f381 8811 	msr	BASEPRI, r1
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	4819      	ldr	r0, [pc, #100]	@ (8006078 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006014:	f7fe ffa5 	bl	8004f62 <_PreparePacket>
 8006018:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800601e:	4b17      	ldr	r3, [pc, #92]	@ (800607c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	61bb      	str	r3, [r7, #24]
 8006030:	e00b      	b.n	800604a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	b2da      	uxtb	r2, r3
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	1c59      	adds	r1, r3, #1
 800603a:	61f9      	str	r1, [r7, #28]
 800603c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	09db      	lsrs	r3, r3, #7
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b7f      	cmp	r3, #127	@ 0x7f
 800604e:	d8f0      	bhi.n	8006032 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	61fa      	str	r2, [r7, #28]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006060:	2206      	movs	r2, #6
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	6938      	ldr	r0, [r7, #16]
 8006066:	f7ff f869 	bl	800513c <_SendPacket>
  RECORD_END();
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f383 8811 	msr	BASEPRI, r3
}
 8006070:	bf00      	nop
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20014410 	.word	0x20014410
 800607c:	200143e0 	.word	0x200143e0

08006080 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006088:	4b04      	ldr	r3, [pc, #16]	@ (800609c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	1ad3      	subs	r3, r2, r3
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	200143e0 	.word	0x200143e0

080060a0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08c      	sub	sp, #48	@ 0x30
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4603      	mov	r3, r0
 80060a8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80060aa:	4b40      	ldr	r3, [pc, #256]	@ (80061ac <SEGGER_SYSVIEW_SendModule+0x10c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d077      	beq.n	80061a2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80060b2:	4b3e      	ldr	r3, [pc, #248]	@ (80061ac <SEGGER_SYSVIEW_SendModule+0x10c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80060b8:	2300      	movs	r3, #0
 80060ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060bc:	e008      	b.n	80060d0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80060be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80060c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80060ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060cc:	3301      	adds	r3, #1
 80060ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d3f2      	bcc.n	80060be <SEGGER_SYSVIEW_SendModule+0x1e>
 80060d8:	e000      	b.n	80060dc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80060da:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80060dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d055      	beq.n	800618e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060e2:	f3ef 8311 	mrs	r3, BASEPRI
 80060e6:	f04f 0120 	mov.w	r1, #32
 80060ea:	f381 8811 	msr	BASEPRI, r1
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	482f      	ldr	r0, [pc, #188]	@ (80061b0 <SEGGER_SYSVIEW_SendModule+0x110>)
 80060f2:	f7fe ff36 	bl	8004f62 <_PreparePacket>
 80060f6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006100:	79fb      	ldrb	r3, [r7, #7]
 8006102:	623b      	str	r3, [r7, #32]
 8006104:	e00b      	b.n	800611e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	b2da      	uxtb	r2, r3
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	1c59      	adds	r1, r3, #1
 800610e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006110:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	09db      	lsrs	r3, r3, #7
 800611c:	623b      	str	r3, [r7, #32]
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	2b7f      	cmp	r3, #127	@ 0x7f
 8006122:	d8f0      	bhi.n	8006106 <SEGGER_SYSVIEW_SendModule+0x66>
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	627a      	str	r2, [r7, #36]	@ 0x24
 800612a:	6a3a      	ldr	r2, [r7, #32]
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	e00b      	b.n	8006158 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	b2da      	uxtb	r2, r3
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	1c59      	adds	r1, r3, #1
 8006148:	61f9      	str	r1, [r7, #28]
 800614a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	09db      	lsrs	r3, r3, #7
 8006156:	61bb      	str	r3, [r7, #24]
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	2b7f      	cmp	r3, #127	@ 0x7f
 800615c:	d8f0      	bhi.n	8006140 <SEGGER_SYSVIEW_SendModule+0xa0>
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	61fa      	str	r2, [r7, #28]
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2280      	movs	r2, #128	@ 0x80
 8006174:	4619      	mov	r1, r3
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f7fe feba 	bl	8004ef0 <_EncodeStr>
 800617c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800617e:	2216      	movs	r2, #22
 8006180:	68f9      	ldr	r1, [r7, #12]
 8006182:	6938      	ldr	r0, [r7, #16]
 8006184:	f7fe ffda 	bl	800513c <_SendPacket>
      RECORD_END();
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800618e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d006      	beq.n	80061a2 <SEGGER_SYSVIEW_SendModule+0x102>
 8006194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800619c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4798      	blx	r3
    }
  }
}
 80061a2:	bf00      	nop
 80061a4:	3730      	adds	r7, #48	@ 0x30
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20014408 	.word	0x20014408
 80061b0:	20014410 	.word	0x20014410

080061b4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80061ba:	4b0c      	ldr	r3, [pc, #48]	@ (80061ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00f      	beq.n	80061e2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80061c2:	4b0a      	ldr	r3, [pc, #40]	@ (80061ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f2      	bne.n	80061c8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20014408 	.word	0x20014408

080061f0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80061f6:	f3ef 8311 	mrs	r3, BASEPRI
 80061fa:	f04f 0120 	mov.w	r1, #32
 80061fe:	f381 8811 	msr	BASEPRI, r1
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	4817      	ldr	r0, [pc, #92]	@ (8006264 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006206:	f7fe feac 	bl	8004f62 <_PreparePacket>
 800620a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	4b14      	ldr	r3, [pc, #80]	@ (8006268 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	613b      	str	r3, [r7, #16]
 800621a:	e00b      	b.n	8006234 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	b2da      	uxtb	r2, r3
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	1c59      	adds	r1, r3, #1
 8006224:	6179      	str	r1, [r7, #20]
 8006226:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	09db      	lsrs	r3, r3, #7
 8006232:	613b      	str	r3, [r7, #16]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	2b7f      	cmp	r3, #127	@ 0x7f
 8006238:	d8f0      	bhi.n	800621c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	617a      	str	r2, [r7, #20]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800624a:	221b      	movs	r2, #27
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	68b8      	ldr	r0, [r7, #8]
 8006250:	f7fe ff74 	bl	800513c <_SendPacket>
  RECORD_END();
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f383 8811 	msr	BASEPRI, r3
}
 800625a:	bf00      	nop
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20014410 	.word	0x20014410
 8006268:	2001440c 	.word	0x2001440c

0800626c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800626c:	b580      	push	{r7, lr}
 800626e:	b08a      	sub	sp, #40	@ 0x28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006274:	f3ef 8311 	mrs	r3, BASEPRI
 8006278:	f04f 0120 	mov.w	r1, #32
 800627c:	f381 8811 	msr	BASEPRI, r1
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	4827      	ldr	r0, [pc, #156]	@ (8006320 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006284:	f7fe fe6d 	bl	8004f62 <_PreparePacket>
 8006288:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800628a:	2280      	movs	r2, #128	@ 0x80
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	6938      	ldr	r0, [r7, #16]
 8006290:	f7fe fe2e 	bl	8004ef0 <_EncodeStr>
 8006294:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	627b      	str	r3, [r7, #36]	@ 0x24
 800629a:	2301      	movs	r3, #1
 800629c:	623b      	str	r3, [r7, #32]
 800629e:	e00b      	b.n	80062b8 <SEGGER_SYSVIEW_Warn+0x4c>
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	1c59      	adds	r1, r3, #1
 80062a8:	6279      	str	r1, [r7, #36]	@ 0x24
 80062aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	09db      	lsrs	r3, r3, #7
 80062b6:	623b      	str	r3, [r7, #32]
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80062bc:	d8f0      	bhi.n	80062a0 <SEGGER_SYSVIEW_Warn+0x34>
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80062c4:	6a3a      	ldr	r2, [r7, #32]
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	61fb      	str	r3, [r7, #28]
 80062d2:	2300      	movs	r3, #0
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	e00b      	b.n	80062f0 <SEGGER_SYSVIEW_Warn+0x84>
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	1c59      	adds	r1, r3, #1
 80062e0:	61f9      	str	r1, [r7, #28]
 80062e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	09db      	lsrs	r3, r3, #7
 80062ee:	61bb      	str	r3, [r7, #24]
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062f4:	d8f0      	bhi.n	80062d8 <SEGGER_SYSVIEW_Warn+0x6c>
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	61fa      	str	r2, [r7, #28]
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006306:	221a      	movs	r2, #26
 8006308:	68f9      	ldr	r1, [r7, #12]
 800630a:	6938      	ldr	r0, [r7, #16]
 800630c:	f7fe ff16 	bl	800513c <_SendPacket>
  RECORD_END();
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f383 8811 	msr	BASEPRI, r3
}
 8006316:	bf00      	nop
 8006318:	3728      	adds	r7, #40	@ 0x28
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20014410 	.word	0x20014410

08006324 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	2000      	movs	r0, #0
 8006338:	f7fe fce4 	bl	8004d04 <SEGGER_RTT_Write>
  return len;
 800633c:	683b      	ldr	r3, [r7, #0]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <std>:
 8006348:	2300      	movs	r3, #0
 800634a:	b510      	push	{r4, lr}
 800634c:	4604      	mov	r4, r0
 800634e:	e9c0 3300 	strd	r3, r3, [r0]
 8006352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006356:	6083      	str	r3, [r0, #8]
 8006358:	8181      	strh	r1, [r0, #12]
 800635a:	6643      	str	r3, [r0, #100]	@ 0x64
 800635c:	81c2      	strh	r2, [r0, #14]
 800635e:	6183      	str	r3, [r0, #24]
 8006360:	4619      	mov	r1, r3
 8006362:	2208      	movs	r2, #8
 8006364:	305c      	adds	r0, #92	@ 0x5c
 8006366:	f000 f9f7 	bl	8006758 <memset>
 800636a:	4b0d      	ldr	r3, [pc, #52]	@ (80063a0 <std+0x58>)
 800636c:	6263      	str	r3, [r4, #36]	@ 0x24
 800636e:	4b0d      	ldr	r3, [pc, #52]	@ (80063a4 <std+0x5c>)
 8006370:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006372:	4b0d      	ldr	r3, [pc, #52]	@ (80063a8 <std+0x60>)
 8006374:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006376:	4b0d      	ldr	r3, [pc, #52]	@ (80063ac <std+0x64>)
 8006378:	6323      	str	r3, [r4, #48]	@ 0x30
 800637a:	4b0d      	ldr	r3, [pc, #52]	@ (80063b0 <std+0x68>)
 800637c:	6224      	str	r4, [r4, #32]
 800637e:	429c      	cmp	r4, r3
 8006380:	d006      	beq.n	8006390 <std+0x48>
 8006382:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006386:	4294      	cmp	r4, r2
 8006388:	d002      	beq.n	8006390 <std+0x48>
 800638a:	33d0      	adds	r3, #208	@ 0xd0
 800638c:	429c      	cmp	r4, r3
 800638e:	d105      	bne.n	800639c <std+0x54>
 8006390:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006398:	f000 ba3e 	b.w	8006818 <__retarget_lock_init_recursive>
 800639c:	bd10      	pop	{r4, pc}
 800639e:	bf00      	nop
 80063a0:	08006589 	.word	0x08006589
 80063a4:	080065ab 	.word	0x080065ab
 80063a8:	080065e3 	.word	0x080065e3
 80063ac:	08006607 	.word	0x08006607
 80063b0:	200144f4 	.word	0x200144f4

080063b4 <stdio_exit_handler>:
 80063b4:	4a02      	ldr	r2, [pc, #8]	@ (80063c0 <stdio_exit_handler+0xc>)
 80063b6:	4903      	ldr	r1, [pc, #12]	@ (80063c4 <stdio_exit_handler+0x10>)
 80063b8:	4803      	ldr	r0, [pc, #12]	@ (80063c8 <stdio_exit_handler+0x14>)
 80063ba:	f000 b869 	b.w	8006490 <_fwalk_sglue>
 80063be:	bf00      	nop
 80063c0:	20000014 	.word	0x20000014
 80063c4:	08006b35 	.word	0x08006b35
 80063c8:	20000024 	.word	0x20000024

080063cc <cleanup_stdio>:
 80063cc:	6841      	ldr	r1, [r0, #4]
 80063ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006400 <cleanup_stdio+0x34>)
 80063d0:	4299      	cmp	r1, r3
 80063d2:	b510      	push	{r4, lr}
 80063d4:	4604      	mov	r4, r0
 80063d6:	d001      	beq.n	80063dc <cleanup_stdio+0x10>
 80063d8:	f000 fbac 	bl	8006b34 <_fflush_r>
 80063dc:	68a1      	ldr	r1, [r4, #8]
 80063de:	4b09      	ldr	r3, [pc, #36]	@ (8006404 <cleanup_stdio+0x38>)
 80063e0:	4299      	cmp	r1, r3
 80063e2:	d002      	beq.n	80063ea <cleanup_stdio+0x1e>
 80063e4:	4620      	mov	r0, r4
 80063e6:	f000 fba5 	bl	8006b34 <_fflush_r>
 80063ea:	68e1      	ldr	r1, [r4, #12]
 80063ec:	4b06      	ldr	r3, [pc, #24]	@ (8006408 <cleanup_stdio+0x3c>)
 80063ee:	4299      	cmp	r1, r3
 80063f0:	d004      	beq.n	80063fc <cleanup_stdio+0x30>
 80063f2:	4620      	mov	r0, r4
 80063f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f8:	f000 bb9c 	b.w	8006b34 <_fflush_r>
 80063fc:	bd10      	pop	{r4, pc}
 80063fe:	bf00      	nop
 8006400:	200144f4 	.word	0x200144f4
 8006404:	2001455c 	.word	0x2001455c
 8006408:	200145c4 	.word	0x200145c4

0800640c <global_stdio_init.part.0>:
 800640c:	b510      	push	{r4, lr}
 800640e:	4b0b      	ldr	r3, [pc, #44]	@ (800643c <global_stdio_init.part.0+0x30>)
 8006410:	4c0b      	ldr	r4, [pc, #44]	@ (8006440 <global_stdio_init.part.0+0x34>)
 8006412:	4a0c      	ldr	r2, [pc, #48]	@ (8006444 <global_stdio_init.part.0+0x38>)
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	4620      	mov	r0, r4
 8006418:	2200      	movs	r2, #0
 800641a:	2104      	movs	r1, #4
 800641c:	f7ff ff94 	bl	8006348 <std>
 8006420:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006424:	2201      	movs	r2, #1
 8006426:	2109      	movs	r1, #9
 8006428:	f7ff ff8e 	bl	8006348 <std>
 800642c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006430:	2202      	movs	r2, #2
 8006432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006436:	2112      	movs	r1, #18
 8006438:	f7ff bf86 	b.w	8006348 <std>
 800643c:	2001462c 	.word	0x2001462c
 8006440:	200144f4 	.word	0x200144f4
 8006444:	080063b5 	.word	0x080063b5

08006448 <__sfp_lock_acquire>:
 8006448:	4801      	ldr	r0, [pc, #4]	@ (8006450 <__sfp_lock_acquire+0x8>)
 800644a:	f000 b9e6 	b.w	800681a <__retarget_lock_acquire_recursive>
 800644e:	bf00      	nop
 8006450:	20014635 	.word	0x20014635

08006454 <__sfp_lock_release>:
 8006454:	4801      	ldr	r0, [pc, #4]	@ (800645c <__sfp_lock_release+0x8>)
 8006456:	f000 b9e1 	b.w	800681c <__retarget_lock_release_recursive>
 800645a:	bf00      	nop
 800645c:	20014635 	.word	0x20014635

08006460 <__sinit>:
 8006460:	b510      	push	{r4, lr}
 8006462:	4604      	mov	r4, r0
 8006464:	f7ff fff0 	bl	8006448 <__sfp_lock_acquire>
 8006468:	6a23      	ldr	r3, [r4, #32]
 800646a:	b11b      	cbz	r3, 8006474 <__sinit+0x14>
 800646c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006470:	f7ff bff0 	b.w	8006454 <__sfp_lock_release>
 8006474:	4b04      	ldr	r3, [pc, #16]	@ (8006488 <__sinit+0x28>)
 8006476:	6223      	str	r3, [r4, #32]
 8006478:	4b04      	ldr	r3, [pc, #16]	@ (800648c <__sinit+0x2c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1f5      	bne.n	800646c <__sinit+0xc>
 8006480:	f7ff ffc4 	bl	800640c <global_stdio_init.part.0>
 8006484:	e7f2      	b.n	800646c <__sinit+0xc>
 8006486:	bf00      	nop
 8006488:	080063cd 	.word	0x080063cd
 800648c:	2001462c 	.word	0x2001462c

08006490 <_fwalk_sglue>:
 8006490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006494:	4607      	mov	r7, r0
 8006496:	4688      	mov	r8, r1
 8006498:	4614      	mov	r4, r2
 800649a:	2600      	movs	r6, #0
 800649c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064a0:	f1b9 0901 	subs.w	r9, r9, #1
 80064a4:	d505      	bpl.n	80064b2 <_fwalk_sglue+0x22>
 80064a6:	6824      	ldr	r4, [r4, #0]
 80064a8:	2c00      	cmp	r4, #0
 80064aa:	d1f7      	bne.n	800649c <_fwalk_sglue+0xc>
 80064ac:	4630      	mov	r0, r6
 80064ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b2:	89ab      	ldrh	r3, [r5, #12]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d907      	bls.n	80064c8 <_fwalk_sglue+0x38>
 80064b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064bc:	3301      	adds	r3, #1
 80064be:	d003      	beq.n	80064c8 <_fwalk_sglue+0x38>
 80064c0:	4629      	mov	r1, r5
 80064c2:	4638      	mov	r0, r7
 80064c4:	47c0      	blx	r8
 80064c6:	4306      	orrs	r6, r0
 80064c8:	3568      	adds	r5, #104	@ 0x68
 80064ca:	e7e9      	b.n	80064a0 <_fwalk_sglue+0x10>

080064cc <_puts_r>:
 80064cc:	6a03      	ldr	r3, [r0, #32]
 80064ce:	b570      	push	{r4, r5, r6, lr}
 80064d0:	6884      	ldr	r4, [r0, #8]
 80064d2:	4605      	mov	r5, r0
 80064d4:	460e      	mov	r6, r1
 80064d6:	b90b      	cbnz	r3, 80064dc <_puts_r+0x10>
 80064d8:	f7ff ffc2 	bl	8006460 <__sinit>
 80064dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064de:	07db      	lsls	r3, r3, #31
 80064e0:	d405      	bmi.n	80064ee <_puts_r+0x22>
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	0598      	lsls	r0, r3, #22
 80064e6:	d402      	bmi.n	80064ee <_puts_r+0x22>
 80064e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064ea:	f000 f996 	bl	800681a <__retarget_lock_acquire_recursive>
 80064ee:	89a3      	ldrh	r3, [r4, #12]
 80064f0:	0719      	lsls	r1, r3, #28
 80064f2:	d502      	bpl.n	80064fa <_puts_r+0x2e>
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d135      	bne.n	8006566 <_puts_r+0x9a>
 80064fa:	4621      	mov	r1, r4
 80064fc:	4628      	mov	r0, r5
 80064fe:	f000 f8c5 	bl	800668c <__swsetup_r>
 8006502:	b380      	cbz	r0, 8006566 <_puts_r+0x9a>
 8006504:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006508:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800650a:	07da      	lsls	r2, r3, #31
 800650c:	d405      	bmi.n	800651a <_puts_r+0x4e>
 800650e:	89a3      	ldrh	r3, [r4, #12]
 8006510:	059b      	lsls	r3, r3, #22
 8006512:	d402      	bmi.n	800651a <_puts_r+0x4e>
 8006514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006516:	f000 f981 	bl	800681c <__retarget_lock_release_recursive>
 800651a:	4628      	mov	r0, r5
 800651c:	bd70      	pop	{r4, r5, r6, pc}
 800651e:	2b00      	cmp	r3, #0
 8006520:	da04      	bge.n	800652c <_puts_r+0x60>
 8006522:	69a2      	ldr	r2, [r4, #24]
 8006524:	429a      	cmp	r2, r3
 8006526:	dc17      	bgt.n	8006558 <_puts_r+0x8c>
 8006528:	290a      	cmp	r1, #10
 800652a:	d015      	beq.n	8006558 <_puts_r+0x8c>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	6022      	str	r2, [r4, #0]
 8006532:	7019      	strb	r1, [r3, #0]
 8006534:	68a3      	ldr	r3, [r4, #8]
 8006536:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800653a:	3b01      	subs	r3, #1
 800653c:	60a3      	str	r3, [r4, #8]
 800653e:	2900      	cmp	r1, #0
 8006540:	d1ed      	bne.n	800651e <_puts_r+0x52>
 8006542:	2b00      	cmp	r3, #0
 8006544:	da11      	bge.n	800656a <_puts_r+0x9e>
 8006546:	4622      	mov	r2, r4
 8006548:	210a      	movs	r1, #10
 800654a:	4628      	mov	r0, r5
 800654c:	f000 f85f 	bl	800660e <__swbuf_r>
 8006550:	3001      	adds	r0, #1
 8006552:	d0d7      	beq.n	8006504 <_puts_r+0x38>
 8006554:	250a      	movs	r5, #10
 8006556:	e7d7      	b.n	8006508 <_puts_r+0x3c>
 8006558:	4622      	mov	r2, r4
 800655a:	4628      	mov	r0, r5
 800655c:	f000 f857 	bl	800660e <__swbuf_r>
 8006560:	3001      	adds	r0, #1
 8006562:	d1e7      	bne.n	8006534 <_puts_r+0x68>
 8006564:	e7ce      	b.n	8006504 <_puts_r+0x38>
 8006566:	3e01      	subs	r6, #1
 8006568:	e7e4      	b.n	8006534 <_puts_r+0x68>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	6022      	str	r2, [r4, #0]
 8006570:	220a      	movs	r2, #10
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	e7ee      	b.n	8006554 <_puts_r+0x88>
	...

08006578 <puts>:
 8006578:	4b02      	ldr	r3, [pc, #8]	@ (8006584 <puts+0xc>)
 800657a:	4601      	mov	r1, r0
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	f7ff bfa5 	b.w	80064cc <_puts_r>
 8006582:	bf00      	nop
 8006584:	20000020 	.word	0x20000020

08006588 <__sread>:
 8006588:	b510      	push	{r4, lr}
 800658a:	460c      	mov	r4, r1
 800658c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006590:	f000 f90c 	bl	80067ac <_read_r>
 8006594:	2800      	cmp	r0, #0
 8006596:	bfab      	itete	ge
 8006598:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800659a:	89a3      	ldrhlt	r3, [r4, #12]
 800659c:	181b      	addge	r3, r3, r0
 800659e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065a2:	bfac      	ite	ge
 80065a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065a6:	81a3      	strhlt	r3, [r4, #12]
 80065a8:	bd10      	pop	{r4, pc}

080065aa <__swrite>:
 80065aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ae:	461f      	mov	r7, r3
 80065b0:	898b      	ldrh	r3, [r1, #12]
 80065b2:	05db      	lsls	r3, r3, #23
 80065b4:	4605      	mov	r5, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	4616      	mov	r6, r2
 80065ba:	d505      	bpl.n	80065c8 <__swrite+0x1e>
 80065bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c0:	2302      	movs	r3, #2
 80065c2:	2200      	movs	r2, #0
 80065c4:	f000 f8e0 	bl	8006788 <_lseek_r>
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065d2:	81a3      	strh	r3, [r4, #12]
 80065d4:	4632      	mov	r2, r6
 80065d6:	463b      	mov	r3, r7
 80065d8:	4628      	mov	r0, r5
 80065da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065de:	f7ff bea1 	b.w	8006324 <_write_r>

080065e2 <__sseek>:
 80065e2:	b510      	push	{r4, lr}
 80065e4:	460c      	mov	r4, r1
 80065e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ea:	f000 f8cd 	bl	8006788 <_lseek_r>
 80065ee:	1c43      	adds	r3, r0, #1
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	bf15      	itete	ne
 80065f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80065f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80065fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80065fe:	81a3      	strheq	r3, [r4, #12]
 8006600:	bf18      	it	ne
 8006602:	81a3      	strhne	r3, [r4, #12]
 8006604:	bd10      	pop	{r4, pc}

08006606 <__sclose>:
 8006606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800660a:	f000 b8ad 	b.w	8006768 <_close_r>

0800660e <__swbuf_r>:
 800660e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006610:	460e      	mov	r6, r1
 8006612:	4614      	mov	r4, r2
 8006614:	4605      	mov	r5, r0
 8006616:	b118      	cbz	r0, 8006620 <__swbuf_r+0x12>
 8006618:	6a03      	ldr	r3, [r0, #32]
 800661a:	b90b      	cbnz	r3, 8006620 <__swbuf_r+0x12>
 800661c:	f7ff ff20 	bl	8006460 <__sinit>
 8006620:	69a3      	ldr	r3, [r4, #24]
 8006622:	60a3      	str	r3, [r4, #8]
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	071a      	lsls	r2, r3, #28
 8006628:	d501      	bpl.n	800662e <__swbuf_r+0x20>
 800662a:	6923      	ldr	r3, [r4, #16]
 800662c:	b943      	cbnz	r3, 8006640 <__swbuf_r+0x32>
 800662e:	4621      	mov	r1, r4
 8006630:	4628      	mov	r0, r5
 8006632:	f000 f82b 	bl	800668c <__swsetup_r>
 8006636:	b118      	cbz	r0, 8006640 <__swbuf_r+0x32>
 8006638:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800663c:	4638      	mov	r0, r7
 800663e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	6922      	ldr	r2, [r4, #16]
 8006644:	1a98      	subs	r0, r3, r2
 8006646:	6963      	ldr	r3, [r4, #20]
 8006648:	b2f6      	uxtb	r6, r6
 800664a:	4283      	cmp	r3, r0
 800664c:	4637      	mov	r7, r6
 800664e:	dc05      	bgt.n	800665c <__swbuf_r+0x4e>
 8006650:	4621      	mov	r1, r4
 8006652:	4628      	mov	r0, r5
 8006654:	f000 fa6e 	bl	8006b34 <_fflush_r>
 8006658:	2800      	cmp	r0, #0
 800665a:	d1ed      	bne.n	8006638 <__swbuf_r+0x2a>
 800665c:	68a3      	ldr	r3, [r4, #8]
 800665e:	3b01      	subs	r3, #1
 8006660:	60a3      	str	r3, [r4, #8]
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	6022      	str	r2, [r4, #0]
 8006668:	701e      	strb	r6, [r3, #0]
 800666a:	6962      	ldr	r2, [r4, #20]
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	429a      	cmp	r2, r3
 8006670:	d004      	beq.n	800667c <__swbuf_r+0x6e>
 8006672:	89a3      	ldrh	r3, [r4, #12]
 8006674:	07db      	lsls	r3, r3, #31
 8006676:	d5e1      	bpl.n	800663c <__swbuf_r+0x2e>
 8006678:	2e0a      	cmp	r6, #10
 800667a:	d1df      	bne.n	800663c <__swbuf_r+0x2e>
 800667c:	4621      	mov	r1, r4
 800667e:	4628      	mov	r0, r5
 8006680:	f000 fa58 	bl	8006b34 <_fflush_r>
 8006684:	2800      	cmp	r0, #0
 8006686:	d0d9      	beq.n	800663c <__swbuf_r+0x2e>
 8006688:	e7d6      	b.n	8006638 <__swbuf_r+0x2a>
	...

0800668c <__swsetup_r>:
 800668c:	b538      	push	{r3, r4, r5, lr}
 800668e:	4b29      	ldr	r3, [pc, #164]	@ (8006734 <__swsetup_r+0xa8>)
 8006690:	4605      	mov	r5, r0
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	460c      	mov	r4, r1
 8006696:	b118      	cbz	r0, 80066a0 <__swsetup_r+0x14>
 8006698:	6a03      	ldr	r3, [r0, #32]
 800669a:	b90b      	cbnz	r3, 80066a0 <__swsetup_r+0x14>
 800669c:	f7ff fee0 	bl	8006460 <__sinit>
 80066a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066a4:	0719      	lsls	r1, r3, #28
 80066a6:	d422      	bmi.n	80066ee <__swsetup_r+0x62>
 80066a8:	06da      	lsls	r2, r3, #27
 80066aa:	d407      	bmi.n	80066bc <__swsetup_r+0x30>
 80066ac:	2209      	movs	r2, #9
 80066ae:	602a      	str	r2, [r5, #0]
 80066b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066b4:	81a3      	strh	r3, [r4, #12]
 80066b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066ba:	e033      	b.n	8006724 <__swsetup_r+0x98>
 80066bc:	0758      	lsls	r0, r3, #29
 80066be:	d512      	bpl.n	80066e6 <__swsetup_r+0x5a>
 80066c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066c2:	b141      	cbz	r1, 80066d6 <__swsetup_r+0x4a>
 80066c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066c8:	4299      	cmp	r1, r3
 80066ca:	d002      	beq.n	80066d2 <__swsetup_r+0x46>
 80066cc:	4628      	mov	r0, r5
 80066ce:	f000 f8b5 	bl	800683c <_free_r>
 80066d2:	2300      	movs	r3, #0
 80066d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066dc:	81a3      	strh	r3, [r4, #12]
 80066de:	2300      	movs	r3, #0
 80066e0:	6063      	str	r3, [r4, #4]
 80066e2:	6923      	ldr	r3, [r4, #16]
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	f043 0308 	orr.w	r3, r3, #8
 80066ec:	81a3      	strh	r3, [r4, #12]
 80066ee:	6923      	ldr	r3, [r4, #16]
 80066f0:	b94b      	cbnz	r3, 8006706 <__swsetup_r+0x7a>
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80066f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066fc:	d003      	beq.n	8006706 <__swsetup_r+0x7a>
 80066fe:	4621      	mov	r1, r4
 8006700:	4628      	mov	r0, r5
 8006702:	f000 fa65 	bl	8006bd0 <__smakebuf_r>
 8006706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800670a:	f013 0201 	ands.w	r2, r3, #1
 800670e:	d00a      	beq.n	8006726 <__swsetup_r+0x9a>
 8006710:	2200      	movs	r2, #0
 8006712:	60a2      	str	r2, [r4, #8]
 8006714:	6962      	ldr	r2, [r4, #20]
 8006716:	4252      	negs	r2, r2
 8006718:	61a2      	str	r2, [r4, #24]
 800671a:	6922      	ldr	r2, [r4, #16]
 800671c:	b942      	cbnz	r2, 8006730 <__swsetup_r+0xa4>
 800671e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006722:	d1c5      	bne.n	80066b0 <__swsetup_r+0x24>
 8006724:	bd38      	pop	{r3, r4, r5, pc}
 8006726:	0799      	lsls	r1, r3, #30
 8006728:	bf58      	it	pl
 800672a:	6962      	ldrpl	r2, [r4, #20]
 800672c:	60a2      	str	r2, [r4, #8]
 800672e:	e7f4      	b.n	800671a <__swsetup_r+0x8e>
 8006730:	2000      	movs	r0, #0
 8006732:	e7f7      	b.n	8006724 <__swsetup_r+0x98>
 8006734:	20000020 	.word	0x20000020

08006738 <memcmp>:
 8006738:	b510      	push	{r4, lr}
 800673a:	3901      	subs	r1, #1
 800673c:	4402      	add	r2, r0
 800673e:	4290      	cmp	r0, r2
 8006740:	d101      	bne.n	8006746 <memcmp+0xe>
 8006742:	2000      	movs	r0, #0
 8006744:	e005      	b.n	8006752 <memcmp+0x1a>
 8006746:	7803      	ldrb	r3, [r0, #0]
 8006748:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800674c:	42a3      	cmp	r3, r4
 800674e:	d001      	beq.n	8006754 <memcmp+0x1c>
 8006750:	1b18      	subs	r0, r3, r4
 8006752:	bd10      	pop	{r4, pc}
 8006754:	3001      	adds	r0, #1
 8006756:	e7f2      	b.n	800673e <memcmp+0x6>

08006758 <memset>:
 8006758:	4402      	add	r2, r0
 800675a:	4603      	mov	r3, r0
 800675c:	4293      	cmp	r3, r2
 800675e:	d100      	bne.n	8006762 <memset+0xa>
 8006760:	4770      	bx	lr
 8006762:	f803 1b01 	strb.w	r1, [r3], #1
 8006766:	e7f9      	b.n	800675c <memset+0x4>

08006768 <_close_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4d06      	ldr	r5, [pc, #24]	@ (8006784 <_close_r+0x1c>)
 800676c:	2300      	movs	r3, #0
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fa fa1f 	bl	8000bb6 <_close>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_close_r+0x1a>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_close_r+0x1a>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	20014630 	.word	0x20014630

08006788 <_lseek_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4d07      	ldr	r5, [pc, #28]	@ (80067a8 <_lseek_r+0x20>)
 800678c:	4604      	mov	r4, r0
 800678e:	4608      	mov	r0, r1
 8006790:	4611      	mov	r1, r2
 8006792:	2200      	movs	r2, #0
 8006794:	602a      	str	r2, [r5, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	f7fa fa34 	bl	8000c04 <_lseek>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_lseek_r+0x1e>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_lseek_r+0x1e>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	20014630 	.word	0x20014630

080067ac <_read_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d07      	ldr	r5, [pc, #28]	@ (80067cc <_read_r+0x20>)
 80067b0:	4604      	mov	r4, r0
 80067b2:	4608      	mov	r0, r1
 80067b4:	4611      	mov	r1, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f7fa f9de 	bl	8000b7c <_read>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_read_r+0x1e>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_read_r+0x1e>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20014630 	.word	0x20014630

080067d0 <__libc_init_array>:
 80067d0:	b570      	push	{r4, r5, r6, lr}
 80067d2:	4d0d      	ldr	r5, [pc, #52]	@ (8006808 <__libc_init_array+0x38>)
 80067d4:	4c0d      	ldr	r4, [pc, #52]	@ (800680c <__libc_init_array+0x3c>)
 80067d6:	1b64      	subs	r4, r4, r5
 80067d8:	10a4      	asrs	r4, r4, #2
 80067da:	2600      	movs	r6, #0
 80067dc:	42a6      	cmp	r6, r4
 80067de:	d109      	bne.n	80067f4 <__libc_init_array+0x24>
 80067e0:	4d0b      	ldr	r5, [pc, #44]	@ (8006810 <__libc_init_array+0x40>)
 80067e2:	4c0c      	ldr	r4, [pc, #48]	@ (8006814 <__libc_init_array+0x44>)
 80067e4:	f000 fa70 	bl	8006cc8 <_init>
 80067e8:	1b64      	subs	r4, r4, r5
 80067ea:	10a4      	asrs	r4, r4, #2
 80067ec:	2600      	movs	r6, #0
 80067ee:	42a6      	cmp	r6, r4
 80067f0:	d105      	bne.n	80067fe <__libc_init_array+0x2e>
 80067f2:	bd70      	pop	{r4, r5, r6, pc}
 80067f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f8:	4798      	blx	r3
 80067fa:	3601      	adds	r6, #1
 80067fc:	e7ee      	b.n	80067dc <__libc_init_array+0xc>
 80067fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006802:	4798      	blx	r3
 8006804:	3601      	adds	r6, #1
 8006806:	e7f2      	b.n	80067ee <__libc_init_array+0x1e>
 8006808:	08006e48 	.word	0x08006e48
 800680c:	08006e48 	.word	0x08006e48
 8006810:	08006e48 	.word	0x08006e48
 8006814:	08006e4c 	.word	0x08006e4c

08006818 <__retarget_lock_init_recursive>:
 8006818:	4770      	bx	lr

0800681a <__retarget_lock_acquire_recursive>:
 800681a:	4770      	bx	lr

0800681c <__retarget_lock_release_recursive>:
 800681c:	4770      	bx	lr

0800681e <memcpy>:
 800681e:	440a      	add	r2, r1
 8006820:	4291      	cmp	r1, r2
 8006822:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006826:	d100      	bne.n	800682a <memcpy+0xc>
 8006828:	4770      	bx	lr
 800682a:	b510      	push	{r4, lr}
 800682c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006830:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006834:	4291      	cmp	r1, r2
 8006836:	d1f9      	bne.n	800682c <memcpy+0xe>
 8006838:	bd10      	pop	{r4, pc}
	...

0800683c <_free_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4605      	mov	r5, r0
 8006840:	2900      	cmp	r1, #0
 8006842:	d041      	beq.n	80068c8 <_free_r+0x8c>
 8006844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006848:	1f0c      	subs	r4, r1, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	bfb8      	it	lt
 800684e:	18e4      	addlt	r4, r4, r3
 8006850:	f000 f8e0 	bl	8006a14 <__malloc_lock>
 8006854:	4a1d      	ldr	r2, [pc, #116]	@ (80068cc <_free_r+0x90>)
 8006856:	6813      	ldr	r3, [r2, #0]
 8006858:	b933      	cbnz	r3, 8006868 <_free_r+0x2c>
 800685a:	6063      	str	r3, [r4, #4]
 800685c:	6014      	str	r4, [r2, #0]
 800685e:	4628      	mov	r0, r5
 8006860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006864:	f000 b8dc 	b.w	8006a20 <__malloc_unlock>
 8006868:	42a3      	cmp	r3, r4
 800686a:	d908      	bls.n	800687e <_free_r+0x42>
 800686c:	6820      	ldr	r0, [r4, #0]
 800686e:	1821      	adds	r1, r4, r0
 8006870:	428b      	cmp	r3, r1
 8006872:	bf01      	itttt	eq
 8006874:	6819      	ldreq	r1, [r3, #0]
 8006876:	685b      	ldreq	r3, [r3, #4]
 8006878:	1809      	addeq	r1, r1, r0
 800687a:	6021      	streq	r1, [r4, #0]
 800687c:	e7ed      	b.n	800685a <_free_r+0x1e>
 800687e:	461a      	mov	r2, r3
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	b10b      	cbz	r3, 8006888 <_free_r+0x4c>
 8006884:	42a3      	cmp	r3, r4
 8006886:	d9fa      	bls.n	800687e <_free_r+0x42>
 8006888:	6811      	ldr	r1, [r2, #0]
 800688a:	1850      	adds	r0, r2, r1
 800688c:	42a0      	cmp	r0, r4
 800688e:	d10b      	bne.n	80068a8 <_free_r+0x6c>
 8006890:	6820      	ldr	r0, [r4, #0]
 8006892:	4401      	add	r1, r0
 8006894:	1850      	adds	r0, r2, r1
 8006896:	4283      	cmp	r3, r0
 8006898:	6011      	str	r1, [r2, #0]
 800689a:	d1e0      	bne.n	800685e <_free_r+0x22>
 800689c:	6818      	ldr	r0, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	6053      	str	r3, [r2, #4]
 80068a2:	4408      	add	r0, r1
 80068a4:	6010      	str	r0, [r2, #0]
 80068a6:	e7da      	b.n	800685e <_free_r+0x22>
 80068a8:	d902      	bls.n	80068b0 <_free_r+0x74>
 80068aa:	230c      	movs	r3, #12
 80068ac:	602b      	str	r3, [r5, #0]
 80068ae:	e7d6      	b.n	800685e <_free_r+0x22>
 80068b0:	6820      	ldr	r0, [r4, #0]
 80068b2:	1821      	adds	r1, r4, r0
 80068b4:	428b      	cmp	r3, r1
 80068b6:	bf04      	itt	eq
 80068b8:	6819      	ldreq	r1, [r3, #0]
 80068ba:	685b      	ldreq	r3, [r3, #4]
 80068bc:	6063      	str	r3, [r4, #4]
 80068be:	bf04      	itt	eq
 80068c0:	1809      	addeq	r1, r1, r0
 80068c2:	6021      	streq	r1, [r4, #0]
 80068c4:	6054      	str	r4, [r2, #4]
 80068c6:	e7ca      	b.n	800685e <_free_r+0x22>
 80068c8:	bd38      	pop	{r3, r4, r5, pc}
 80068ca:	bf00      	nop
 80068cc:	2001463c 	.word	0x2001463c

080068d0 <sbrk_aligned>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	4e0f      	ldr	r6, [pc, #60]	@ (8006910 <sbrk_aligned+0x40>)
 80068d4:	460c      	mov	r4, r1
 80068d6:	6831      	ldr	r1, [r6, #0]
 80068d8:	4605      	mov	r5, r0
 80068da:	b911      	cbnz	r1, 80068e2 <sbrk_aligned+0x12>
 80068dc:	f000 f9d6 	bl	8006c8c <_sbrk_r>
 80068e0:	6030      	str	r0, [r6, #0]
 80068e2:	4621      	mov	r1, r4
 80068e4:	4628      	mov	r0, r5
 80068e6:	f000 f9d1 	bl	8006c8c <_sbrk_r>
 80068ea:	1c43      	adds	r3, r0, #1
 80068ec:	d103      	bne.n	80068f6 <sbrk_aligned+0x26>
 80068ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80068f2:	4620      	mov	r0, r4
 80068f4:	bd70      	pop	{r4, r5, r6, pc}
 80068f6:	1cc4      	adds	r4, r0, #3
 80068f8:	f024 0403 	bic.w	r4, r4, #3
 80068fc:	42a0      	cmp	r0, r4
 80068fe:	d0f8      	beq.n	80068f2 <sbrk_aligned+0x22>
 8006900:	1a21      	subs	r1, r4, r0
 8006902:	4628      	mov	r0, r5
 8006904:	f000 f9c2 	bl	8006c8c <_sbrk_r>
 8006908:	3001      	adds	r0, #1
 800690a:	d1f2      	bne.n	80068f2 <sbrk_aligned+0x22>
 800690c:	e7ef      	b.n	80068ee <sbrk_aligned+0x1e>
 800690e:	bf00      	nop
 8006910:	20014638 	.word	0x20014638

08006914 <_malloc_r>:
 8006914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006918:	1ccd      	adds	r5, r1, #3
 800691a:	f025 0503 	bic.w	r5, r5, #3
 800691e:	3508      	adds	r5, #8
 8006920:	2d0c      	cmp	r5, #12
 8006922:	bf38      	it	cc
 8006924:	250c      	movcc	r5, #12
 8006926:	2d00      	cmp	r5, #0
 8006928:	4606      	mov	r6, r0
 800692a:	db01      	blt.n	8006930 <_malloc_r+0x1c>
 800692c:	42a9      	cmp	r1, r5
 800692e:	d904      	bls.n	800693a <_malloc_r+0x26>
 8006930:	230c      	movs	r3, #12
 8006932:	6033      	str	r3, [r6, #0]
 8006934:	2000      	movs	r0, #0
 8006936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800693a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a10 <_malloc_r+0xfc>
 800693e:	f000 f869 	bl	8006a14 <__malloc_lock>
 8006942:	f8d8 3000 	ldr.w	r3, [r8]
 8006946:	461c      	mov	r4, r3
 8006948:	bb44      	cbnz	r4, 800699c <_malloc_r+0x88>
 800694a:	4629      	mov	r1, r5
 800694c:	4630      	mov	r0, r6
 800694e:	f7ff ffbf 	bl	80068d0 <sbrk_aligned>
 8006952:	1c43      	adds	r3, r0, #1
 8006954:	4604      	mov	r4, r0
 8006956:	d158      	bne.n	8006a0a <_malloc_r+0xf6>
 8006958:	f8d8 4000 	ldr.w	r4, [r8]
 800695c:	4627      	mov	r7, r4
 800695e:	2f00      	cmp	r7, #0
 8006960:	d143      	bne.n	80069ea <_malloc_r+0xd6>
 8006962:	2c00      	cmp	r4, #0
 8006964:	d04b      	beq.n	80069fe <_malloc_r+0xea>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	4639      	mov	r1, r7
 800696a:	4630      	mov	r0, r6
 800696c:	eb04 0903 	add.w	r9, r4, r3
 8006970:	f000 f98c 	bl	8006c8c <_sbrk_r>
 8006974:	4581      	cmp	r9, r0
 8006976:	d142      	bne.n	80069fe <_malloc_r+0xea>
 8006978:	6821      	ldr	r1, [r4, #0]
 800697a:	1a6d      	subs	r5, r5, r1
 800697c:	4629      	mov	r1, r5
 800697e:	4630      	mov	r0, r6
 8006980:	f7ff ffa6 	bl	80068d0 <sbrk_aligned>
 8006984:	3001      	adds	r0, #1
 8006986:	d03a      	beq.n	80069fe <_malloc_r+0xea>
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	442b      	add	r3, r5
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	f8d8 3000 	ldr.w	r3, [r8]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	bb62      	cbnz	r2, 80069f0 <_malloc_r+0xdc>
 8006996:	f8c8 7000 	str.w	r7, [r8]
 800699a:	e00f      	b.n	80069bc <_malloc_r+0xa8>
 800699c:	6822      	ldr	r2, [r4, #0]
 800699e:	1b52      	subs	r2, r2, r5
 80069a0:	d420      	bmi.n	80069e4 <_malloc_r+0xd0>
 80069a2:	2a0b      	cmp	r2, #11
 80069a4:	d917      	bls.n	80069d6 <_malloc_r+0xc2>
 80069a6:	1961      	adds	r1, r4, r5
 80069a8:	42a3      	cmp	r3, r4
 80069aa:	6025      	str	r5, [r4, #0]
 80069ac:	bf18      	it	ne
 80069ae:	6059      	strne	r1, [r3, #4]
 80069b0:	6863      	ldr	r3, [r4, #4]
 80069b2:	bf08      	it	eq
 80069b4:	f8c8 1000 	streq.w	r1, [r8]
 80069b8:	5162      	str	r2, [r4, r5]
 80069ba:	604b      	str	r3, [r1, #4]
 80069bc:	4630      	mov	r0, r6
 80069be:	f000 f82f 	bl	8006a20 <__malloc_unlock>
 80069c2:	f104 000b 	add.w	r0, r4, #11
 80069c6:	1d23      	adds	r3, r4, #4
 80069c8:	f020 0007 	bic.w	r0, r0, #7
 80069cc:	1ac2      	subs	r2, r0, r3
 80069ce:	bf1c      	itt	ne
 80069d0:	1a1b      	subne	r3, r3, r0
 80069d2:	50a3      	strne	r3, [r4, r2]
 80069d4:	e7af      	b.n	8006936 <_malloc_r+0x22>
 80069d6:	6862      	ldr	r2, [r4, #4]
 80069d8:	42a3      	cmp	r3, r4
 80069da:	bf0c      	ite	eq
 80069dc:	f8c8 2000 	streq.w	r2, [r8]
 80069e0:	605a      	strne	r2, [r3, #4]
 80069e2:	e7eb      	b.n	80069bc <_malloc_r+0xa8>
 80069e4:	4623      	mov	r3, r4
 80069e6:	6864      	ldr	r4, [r4, #4]
 80069e8:	e7ae      	b.n	8006948 <_malloc_r+0x34>
 80069ea:	463c      	mov	r4, r7
 80069ec:	687f      	ldr	r7, [r7, #4]
 80069ee:	e7b6      	b.n	800695e <_malloc_r+0x4a>
 80069f0:	461a      	mov	r2, r3
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	42a3      	cmp	r3, r4
 80069f6:	d1fb      	bne.n	80069f0 <_malloc_r+0xdc>
 80069f8:	2300      	movs	r3, #0
 80069fa:	6053      	str	r3, [r2, #4]
 80069fc:	e7de      	b.n	80069bc <_malloc_r+0xa8>
 80069fe:	230c      	movs	r3, #12
 8006a00:	6033      	str	r3, [r6, #0]
 8006a02:	4630      	mov	r0, r6
 8006a04:	f000 f80c 	bl	8006a20 <__malloc_unlock>
 8006a08:	e794      	b.n	8006934 <_malloc_r+0x20>
 8006a0a:	6005      	str	r5, [r0, #0]
 8006a0c:	e7d6      	b.n	80069bc <_malloc_r+0xa8>
 8006a0e:	bf00      	nop
 8006a10:	2001463c 	.word	0x2001463c

08006a14 <__malloc_lock>:
 8006a14:	4801      	ldr	r0, [pc, #4]	@ (8006a1c <__malloc_lock+0x8>)
 8006a16:	f7ff bf00 	b.w	800681a <__retarget_lock_acquire_recursive>
 8006a1a:	bf00      	nop
 8006a1c:	20014634 	.word	0x20014634

08006a20 <__malloc_unlock>:
 8006a20:	4801      	ldr	r0, [pc, #4]	@ (8006a28 <__malloc_unlock+0x8>)
 8006a22:	f7ff befb 	b.w	800681c <__retarget_lock_release_recursive>
 8006a26:	bf00      	nop
 8006a28:	20014634 	.word	0x20014634

08006a2c <__sflush_r>:
 8006a2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a34:	0716      	lsls	r6, r2, #28
 8006a36:	4605      	mov	r5, r0
 8006a38:	460c      	mov	r4, r1
 8006a3a:	d454      	bmi.n	8006ae6 <__sflush_r+0xba>
 8006a3c:	684b      	ldr	r3, [r1, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	dc02      	bgt.n	8006a48 <__sflush_r+0x1c>
 8006a42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	dd48      	ble.n	8006ada <__sflush_r+0xae>
 8006a48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a4a:	2e00      	cmp	r6, #0
 8006a4c:	d045      	beq.n	8006ada <__sflush_r+0xae>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a54:	682f      	ldr	r7, [r5, #0]
 8006a56:	6a21      	ldr	r1, [r4, #32]
 8006a58:	602b      	str	r3, [r5, #0]
 8006a5a:	d030      	beq.n	8006abe <__sflush_r+0x92>
 8006a5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	0759      	lsls	r1, r3, #29
 8006a62:	d505      	bpl.n	8006a70 <__sflush_r+0x44>
 8006a64:	6863      	ldr	r3, [r4, #4]
 8006a66:	1ad2      	subs	r2, r2, r3
 8006a68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a6a:	b10b      	cbz	r3, 8006a70 <__sflush_r+0x44>
 8006a6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	2300      	movs	r3, #0
 8006a72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a74:	6a21      	ldr	r1, [r4, #32]
 8006a76:	4628      	mov	r0, r5
 8006a78:	47b0      	blx	r6
 8006a7a:	1c43      	adds	r3, r0, #1
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	d106      	bne.n	8006a8e <__sflush_r+0x62>
 8006a80:	6829      	ldr	r1, [r5, #0]
 8006a82:	291d      	cmp	r1, #29
 8006a84:	d82b      	bhi.n	8006ade <__sflush_r+0xb2>
 8006a86:	4a2a      	ldr	r2, [pc, #168]	@ (8006b30 <__sflush_r+0x104>)
 8006a88:	410a      	asrs	r2, r1
 8006a8a:	07d6      	lsls	r6, r2, #31
 8006a8c:	d427      	bmi.n	8006ade <__sflush_r+0xb2>
 8006a8e:	2200      	movs	r2, #0
 8006a90:	6062      	str	r2, [r4, #4]
 8006a92:	04d9      	lsls	r1, r3, #19
 8006a94:	6922      	ldr	r2, [r4, #16]
 8006a96:	6022      	str	r2, [r4, #0]
 8006a98:	d504      	bpl.n	8006aa4 <__sflush_r+0x78>
 8006a9a:	1c42      	adds	r2, r0, #1
 8006a9c:	d101      	bne.n	8006aa2 <__sflush_r+0x76>
 8006a9e:	682b      	ldr	r3, [r5, #0]
 8006aa0:	b903      	cbnz	r3, 8006aa4 <__sflush_r+0x78>
 8006aa2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006aa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006aa6:	602f      	str	r7, [r5, #0]
 8006aa8:	b1b9      	cbz	r1, 8006ada <__sflush_r+0xae>
 8006aaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006aae:	4299      	cmp	r1, r3
 8006ab0:	d002      	beq.n	8006ab8 <__sflush_r+0x8c>
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f7ff fec2 	bl	800683c <_free_r>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	6363      	str	r3, [r4, #52]	@ 0x34
 8006abc:	e00d      	b.n	8006ada <__sflush_r+0xae>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	47b0      	blx	r6
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	1c50      	adds	r0, r2, #1
 8006ac8:	d1c9      	bne.n	8006a5e <__sflush_r+0x32>
 8006aca:	682b      	ldr	r3, [r5, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0c6      	beq.n	8006a5e <__sflush_r+0x32>
 8006ad0:	2b1d      	cmp	r3, #29
 8006ad2:	d001      	beq.n	8006ad8 <__sflush_r+0xac>
 8006ad4:	2b16      	cmp	r3, #22
 8006ad6:	d11e      	bne.n	8006b16 <__sflush_r+0xea>
 8006ad8:	602f      	str	r7, [r5, #0]
 8006ada:	2000      	movs	r0, #0
 8006adc:	e022      	b.n	8006b24 <__sflush_r+0xf8>
 8006ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ae2:	b21b      	sxth	r3, r3
 8006ae4:	e01b      	b.n	8006b1e <__sflush_r+0xf2>
 8006ae6:	690f      	ldr	r7, [r1, #16]
 8006ae8:	2f00      	cmp	r7, #0
 8006aea:	d0f6      	beq.n	8006ada <__sflush_r+0xae>
 8006aec:	0793      	lsls	r3, r2, #30
 8006aee:	680e      	ldr	r6, [r1, #0]
 8006af0:	bf08      	it	eq
 8006af2:	694b      	ldreq	r3, [r1, #20]
 8006af4:	600f      	str	r7, [r1, #0]
 8006af6:	bf18      	it	ne
 8006af8:	2300      	movne	r3, #0
 8006afa:	eba6 0807 	sub.w	r8, r6, r7
 8006afe:	608b      	str	r3, [r1, #8]
 8006b00:	f1b8 0f00 	cmp.w	r8, #0
 8006b04:	dde9      	ble.n	8006ada <__sflush_r+0xae>
 8006b06:	6a21      	ldr	r1, [r4, #32]
 8006b08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b0a:	4643      	mov	r3, r8
 8006b0c:	463a      	mov	r2, r7
 8006b0e:	4628      	mov	r0, r5
 8006b10:	47b0      	blx	r6
 8006b12:	2800      	cmp	r0, #0
 8006b14:	dc08      	bgt.n	8006b28 <__sflush_r+0xfc>
 8006b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b1e:	81a3      	strh	r3, [r4, #12]
 8006b20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b28:	4407      	add	r7, r0
 8006b2a:	eba8 0800 	sub.w	r8, r8, r0
 8006b2e:	e7e7      	b.n	8006b00 <__sflush_r+0xd4>
 8006b30:	dfbffffe 	.word	0xdfbffffe

08006b34 <_fflush_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	690b      	ldr	r3, [r1, #16]
 8006b38:	4605      	mov	r5, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	b913      	cbnz	r3, 8006b44 <_fflush_r+0x10>
 8006b3e:	2500      	movs	r5, #0
 8006b40:	4628      	mov	r0, r5
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	b118      	cbz	r0, 8006b4e <_fflush_r+0x1a>
 8006b46:	6a03      	ldr	r3, [r0, #32]
 8006b48:	b90b      	cbnz	r3, 8006b4e <_fflush_r+0x1a>
 8006b4a:	f7ff fc89 	bl	8006460 <__sinit>
 8006b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0f3      	beq.n	8006b3e <_fflush_r+0xa>
 8006b56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b58:	07d0      	lsls	r0, r2, #31
 8006b5a:	d404      	bmi.n	8006b66 <_fflush_r+0x32>
 8006b5c:	0599      	lsls	r1, r3, #22
 8006b5e:	d402      	bmi.n	8006b66 <_fflush_r+0x32>
 8006b60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b62:	f7ff fe5a 	bl	800681a <__retarget_lock_acquire_recursive>
 8006b66:	4628      	mov	r0, r5
 8006b68:	4621      	mov	r1, r4
 8006b6a:	f7ff ff5f 	bl	8006a2c <__sflush_r>
 8006b6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b70:	07da      	lsls	r2, r3, #31
 8006b72:	4605      	mov	r5, r0
 8006b74:	d4e4      	bmi.n	8006b40 <_fflush_r+0xc>
 8006b76:	89a3      	ldrh	r3, [r4, #12]
 8006b78:	059b      	lsls	r3, r3, #22
 8006b7a:	d4e1      	bmi.n	8006b40 <_fflush_r+0xc>
 8006b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b7e:	f7ff fe4d 	bl	800681c <__retarget_lock_release_recursive>
 8006b82:	e7dd      	b.n	8006b40 <_fflush_r+0xc>

08006b84 <__swhatbuf_r>:
 8006b84:	b570      	push	{r4, r5, r6, lr}
 8006b86:	460c      	mov	r4, r1
 8006b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b8c:	2900      	cmp	r1, #0
 8006b8e:	b096      	sub	sp, #88	@ 0x58
 8006b90:	4615      	mov	r5, r2
 8006b92:	461e      	mov	r6, r3
 8006b94:	da0d      	bge.n	8006bb2 <__swhatbuf_r+0x2e>
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b9c:	f04f 0100 	mov.w	r1, #0
 8006ba0:	bf14      	ite	ne
 8006ba2:	2340      	movne	r3, #64	@ 0x40
 8006ba4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ba8:	2000      	movs	r0, #0
 8006baa:	6031      	str	r1, [r6, #0]
 8006bac:	602b      	str	r3, [r5, #0]
 8006bae:	b016      	add	sp, #88	@ 0x58
 8006bb0:	bd70      	pop	{r4, r5, r6, pc}
 8006bb2:	466a      	mov	r2, sp
 8006bb4:	f000 f848 	bl	8006c48 <_fstat_r>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	dbec      	blt.n	8006b96 <__swhatbuf_r+0x12>
 8006bbc:	9901      	ldr	r1, [sp, #4]
 8006bbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006bc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006bc6:	4259      	negs	r1, r3
 8006bc8:	4159      	adcs	r1, r3
 8006bca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bce:	e7eb      	b.n	8006ba8 <__swhatbuf_r+0x24>

08006bd0 <__smakebuf_r>:
 8006bd0:	898b      	ldrh	r3, [r1, #12]
 8006bd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bd4:	079d      	lsls	r5, r3, #30
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460c      	mov	r4, r1
 8006bda:	d507      	bpl.n	8006bec <__smakebuf_r+0x1c>
 8006bdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	6123      	str	r3, [r4, #16]
 8006be4:	2301      	movs	r3, #1
 8006be6:	6163      	str	r3, [r4, #20]
 8006be8:	b003      	add	sp, #12
 8006bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bec:	ab01      	add	r3, sp, #4
 8006bee:	466a      	mov	r2, sp
 8006bf0:	f7ff ffc8 	bl	8006b84 <__swhatbuf_r>
 8006bf4:	9f00      	ldr	r7, [sp, #0]
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	4639      	mov	r1, r7
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f7ff fe8a 	bl	8006914 <_malloc_r>
 8006c00:	b948      	cbnz	r0, 8006c16 <__smakebuf_r+0x46>
 8006c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c06:	059a      	lsls	r2, r3, #22
 8006c08:	d4ee      	bmi.n	8006be8 <__smakebuf_r+0x18>
 8006c0a:	f023 0303 	bic.w	r3, r3, #3
 8006c0e:	f043 0302 	orr.w	r3, r3, #2
 8006c12:	81a3      	strh	r3, [r4, #12]
 8006c14:	e7e2      	b.n	8006bdc <__smakebuf_r+0xc>
 8006c16:	89a3      	ldrh	r3, [r4, #12]
 8006c18:	6020      	str	r0, [r4, #0]
 8006c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c1e:	81a3      	strh	r3, [r4, #12]
 8006c20:	9b01      	ldr	r3, [sp, #4]
 8006c22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c26:	b15b      	cbz	r3, 8006c40 <__smakebuf_r+0x70>
 8006c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	f000 f81d 	bl	8006c6c <_isatty_r>
 8006c32:	b128      	cbz	r0, 8006c40 <__smakebuf_r+0x70>
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	f023 0303 	bic.w	r3, r3, #3
 8006c3a:	f043 0301 	orr.w	r3, r3, #1
 8006c3e:	81a3      	strh	r3, [r4, #12]
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	431d      	orrs	r5, r3
 8006c44:	81a5      	strh	r5, [r4, #12]
 8006c46:	e7cf      	b.n	8006be8 <__smakebuf_r+0x18>

08006c48 <_fstat_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4d07      	ldr	r5, [pc, #28]	@ (8006c68 <_fstat_r+0x20>)
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4608      	mov	r0, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	602b      	str	r3, [r5, #0]
 8006c56:	f7f9 ffba 	bl	8000bce <_fstat>
 8006c5a:	1c43      	adds	r3, r0, #1
 8006c5c:	d102      	bne.n	8006c64 <_fstat_r+0x1c>
 8006c5e:	682b      	ldr	r3, [r5, #0]
 8006c60:	b103      	cbz	r3, 8006c64 <_fstat_r+0x1c>
 8006c62:	6023      	str	r3, [r4, #0]
 8006c64:	bd38      	pop	{r3, r4, r5, pc}
 8006c66:	bf00      	nop
 8006c68:	20014630 	.word	0x20014630

08006c6c <_isatty_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4d06      	ldr	r5, [pc, #24]	@ (8006c88 <_isatty_r+0x1c>)
 8006c70:	2300      	movs	r3, #0
 8006c72:	4604      	mov	r4, r0
 8006c74:	4608      	mov	r0, r1
 8006c76:	602b      	str	r3, [r5, #0]
 8006c78:	f7f9 ffb9 	bl	8000bee <_isatty>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d102      	bne.n	8006c86 <_isatty_r+0x1a>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	b103      	cbz	r3, 8006c86 <_isatty_r+0x1a>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	20014630 	.word	0x20014630

08006c8c <_sbrk_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4d06      	ldr	r5, [pc, #24]	@ (8006ca8 <_sbrk_r+0x1c>)
 8006c90:	2300      	movs	r3, #0
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	602b      	str	r3, [r5, #0]
 8006c98:	f000 f808 	bl	8006cac <_sbrk>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_sbrk_r+0x1a>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_sbrk_r+0x1a>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	20014630 	.word	0x20014630

08006cac <_sbrk>:
 8006cac:	4a04      	ldr	r2, [pc, #16]	@ (8006cc0 <_sbrk+0x14>)
 8006cae:	6811      	ldr	r1, [r2, #0]
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	b909      	cbnz	r1, 8006cb8 <_sbrk+0xc>
 8006cb4:	4903      	ldr	r1, [pc, #12]	@ (8006cc4 <_sbrk+0x18>)
 8006cb6:	6011      	str	r1, [r2, #0]
 8006cb8:	6810      	ldr	r0, [r2, #0]
 8006cba:	4403      	add	r3, r0
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	4770      	bx	lr
 8006cc0:	20014640 	.word	0x20014640
 8006cc4:	20014648 	.word	0x20014648

08006cc8 <_init>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr

08006cd4 <_fini>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr
